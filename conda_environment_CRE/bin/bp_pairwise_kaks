#!/usr/bin/env perl

use utf8;
use strict;
use warnings;

use Getopt::Long;

use Bio::Align::Utilities qw(aa_to_dna_aln);
use Bio::AlignIO;
use Bio::SeqIO;
use Bio::Tools::Run::Alignment::Clustalw;
use Bio::Tools::Run::Alignment::TCoffee;
use Bio::Tools::Run::Phylo::PAML::Codeml;
use Bio::Tools::Run::Phylo::PAML::Yn00;

# PODNAME: bp_pairwise_kaks
# ABSTRACT: calculate pairwise Ka,Ks for a set of sequences
# AUTHOR: Jason Stajich <jason@bioperl.org>
# OWNER: Jason Stajich <jason@bioperl.org>
# LICENSE: Perl_5


my $aln_prog = "clustalw";
my $kaks_prog = "codeml";
my $format = "fasta";
my $output;
my $cdna;
my $verbose;
my $help;

GetOptions(
           'i|input:s'      => \$cdna,
           'o|output:s'     => \$output,
           'f|format:s'     => \$format,
           'msa:s'          => \$aln_prog,
           'kaks:s'         => \$kaks_prog,
           'v|verbose'      => \$verbose,
           'h|help'         => \$help,
           );

if( $help ) {
    exec('perldoc',$0);
    exit(0);
}
$verbose = -1 unless $verbose;
my ($aln_factory,$kaks_factory);
if( $aln_prog =~ /clus/i ) {
    $aln_factory = Bio::Tools::Run::Alignment::Clustalw->new(-verbose => $verbose);
} elsif( $aln_prog =~ /t\_?cof/i ) {
    $aln_factory = Bio::Tools::Run::Alignment::TCoffee->new(-verbose => $verbose);
} else {
    warn("Did not provide either 'clustalw' or 'tcoffee' as alignment program names");
    exit(0);
}
unless( $aln_factory->executable ) {
    warn("Could not find the executable for $aln_prog, make sure you have installed it and have either set ".uc($aln_prog)."DIR or it is in your PATH");
    exit(0);
}


if( $kaks_prog =~ /yn00/i ) {
    $kaks_factory = Bio::Tools::Run::Phylo::PAML::Yn00->new(-verbose => $verbose);
} elsif( $kaks_prog =~ /codeml/i ) {
    # change the parameters here if you want to tweak your Codeml running!
    $kaks_factory = Bio::Tools::Run::Phylo::PAML::Codeml->new
        (-verbose => $verbose,
         -params => { 'runmode' => -2,
                      'seqtype' => 1,
                  }
         );
}
unless ( $kaks_factory->executable ) {
    warn("Could not find the executable for $kaks_prog, make sure you have installed it and you have defined PAMLDIR or it is in your PATH");
    exit(0);
}

unless ( $cdna && -f $cdna && -r $cdna &&  ! -z $cdna ) {
    warn("Did not specify a valid cDNA sequence file as input");
    exit(0);
}

my $seqin = new Bio::SeqIO(-file   => $cdna,
                           -format => $format);

my %seqs;
my @prots;
while( my $seq = $seqin->next_seq ) {
    $seqs{$seq->display_id} = $seq;
    my $protein = $seq->translate();
    my $pseq = $protein->seq();

    $pseq =~ s/\*$//;
    if( $pseq =~ /\*/ ) {
        warn("provided a cDNA (".$seq->display_id.") sequence with a stop codon, PAML will choke!");
        exit(0);
    }
    # Tcoffee can't handle '*'
    $pseq =~ s/\*//g;
    $protein->seq($pseq);
    push @prots, $protein;
}
if( @prots < 2 ) {
    warn("Need at least 2 cDNA sequences to proceed");
    exit(0);
}

local * OUT;
if( $output ) {
    open(OUT, ">$output") || die("cannot open output $output for writing");
} else {
    *OUT = *STDOUT;
}

my $aa_aln = $aln_factory->align(\@prots);
my $dna_aln = &aa_to_dna_aln($aa_aln, \%seqs);

my @each = $dna_aln->each_seq();


$kaks_factory->alignment($dna_aln);

my ($rc,$parser) = $kaks_factory->run();
if( $rc <= 0 ) {
    warn($kaks_factory->error_string,"\n");
    exit;
}
my $result = $parser->next_result;

if ($result->version =~ m/3\.15/) {
        warn("This script does not work with v3.15 of PAML!  Please use 3.14 instead.");
        exit(0);
}

my $MLmatrix = $result->get_MLmatrix();

my @otus = $result->get_seqs();

my @pos = map {
    my $c= 1;
    foreach my $s ( @each ) {
        last if( $s->display_id eq $_->display_id );
        $c++;
    }
    $c;
} @otus;

print OUT join("\t", qw(SEQ1 SEQ2 Ka Ks Ka/Ks PROT_PERCENTID CDNA_PERCENTID)), "\n";
for( my $i = 0; $i < (scalar @otus -1) ; $i++) {
    for( my $j = $i+1; $j < (scalar @otus); $j++ ) {
        my $sub_aa_aln = $aa_aln->select_noncont($pos[$i],$pos[$j]);
        my $sub_dna_aln = $dna_aln->select_noncont($pos[$i],$pos[$j]);
        print OUT join("\t",
                       $otus[$i]->display_id,
                       $otus[$j]->display_id,$MLmatrix->[$i]->[$j]->{'dN'},
                       $MLmatrix->[$i]->[$j]->{'dS'},
                       $MLmatrix->[$i]->[$j]->{'omega'},
                       sprintf("%.2f",$sub_aa_aln->percentage_identity),
                       sprintf("%.2f",$sub_dna_aln->percentage_identity),
                       ), "\n";
    }
}

__END__

=pod

=encoding UTF-8

=head1 NAME

bp_pairwise_kaks - calculate pairwise Ka,Ks for a set of sequences

=head1 VERSION

version 1.7.3

=head1 SYNOPSIS

bp_pairwise_kaks.PLS -i INPUT-cDNA [-f FORMAT] [-o OUTPUT] \
    [--msa tcoffee|clustal] [--kaks yn00|codeml]

=head1 DESCRIPTION

This script will take as input a dataset of cDNA sequences, verify
that they contain no stop codons, align them in protein space, project
the alignment back into cDNA, and estimate the Ka (non-synonymous) and
Ks (synonymous) substitutions based on the Maximum Likelihood method
of Yang with the PAML package.

Often there are specific specific parameters you want to run when you
are computing Ka/Ks ratios so consider this script a starting point
and do not rely it on for every situation.

=head1 OPTIONS

=over 4

=item B<-i>, B<--input>

The input file with the cDNA sequences.  Must have at least two
sequences, and be in a format that L<Bio::SeqIO> is capable to read.
In addition, if Bio::SeqIO is inable to automatically identify the
format, the B<-f> option should be specified.

Technically not an option, this is a required value.

=item B<-f>, B<--format>

Specify the format of INPUT-cDNA for L<Bio::SeqIO>.

=item B<-o>, B<--output>

Specify the file for output.  Defaults to STDOUT.

=item B<--msa>

Program used for alignment, either clustalw or tcoffee.  Defaults to
clustalw.

=item B<--kaks>

Program used for the Ka/Ks estimation, either codeml or yn00.
Defaults to codeml.

=item B<-v>, B<--verbose>

Be verbose.

=item B<-h>, B<--help>

Print help text.

=back

=head1 FEEDBACK

=head2 Mailing lists

User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.

  bioperl-l@bioperl.org              - General discussion
  http://bioperl.org/Support.html    - About the mailing lists

=head2 Support

Please direct usage questions or support issues to the mailing list:
I<bioperl-l@bioperl.org>

rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.

=head2 Reporting bugs

Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:

  https://github.com/bioperl/bio-tools-phylo-paml/issues

=head1 AUTHOR

Jason Stajich <jason@bioperl.org>

=head1 COPYRIGHT

This software is copyright (c) by Jason Stajich <jason@bioperl.org>.

This software is available under the same terms as the perl 5 programming language system itself.

=cut
