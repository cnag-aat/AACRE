.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "XML_SPLIT 1"
.TH XML_SPLIT 1 "2016-11-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  xml_split \- cut a big XML file into smaller chunks
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`xml_split\*(C'\fR takes a (presumably big) \s-1XML\s0 file and split it in several smaller
files. The memory used is the memory needed for the biggest chunk (ie memory
is reused for each new chunk).
.PP
It can split at a given level in the tree (the default, splits children of the
root), or on a condition (using the subset
of XPath understood by XML::Twig, so \f(CW\*(C`section\*(C'\fR or \f(CW\*(C`/doc/section\*(C'\fR).
.PP
Each generated file is replaced by a processing instruction that will allow 
\&\f(CW\*(C`xml_merge\*(C'\fR to rebuild the original document. The processing instruction
format is \f(CW\*(C`<?merge subdocs=[01] :<filename> ?>\*(C'\fR
.PP
File names are <file>\-<nb>.xml, with <file>\-00.xml holding the main document.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-l <level>" 4
.IX Item "-l <level>"
level to cut at: 1 generates a file for each child of the root, 2 for each grand
child
.Sp
defaults to 1
.IP "\-c <condition>" 4
.IX Item "-c <condition>"
generate a file for each element that passes the condition
.Sp
xml_split \-c <section> will put each \f(CW\*(C`section\*(C'\fR element in its own file (nested
sections are handled too)
.Sp
Note that at the moment this option is a lot slower than using \f(CW\*(C`\-l\*(C'\fR
.IP "\-s <size>" 4
.IX Item "-s <size>"
generates files of (approximately) <size>. The content of each file is
enclosed in a new element (\f(CW\*(C`xml_split::root\*(C'\fR), so it's well-formed \s-1XML.\s0
The size can be given in bytes, Kb, Mb or Gb.
.IP "\-g <nb>" 4
.IX Item "-g <nb>"
groups <nb> elements in a single file. The content of each file is
enclosed in a new element (\f(CW\*(C`xml_split::root\*(C'\fR), so it's well-formed \s-1XML.\s0
.IP "\-b <name>" 4
.IX Item "-b <name>"
base name for the output, files will be named <base>\-<nb><.ext>
.Sp
<nb> is a sequence number, see below \f(CW\*(C`\-\-nb_digits\*(C'\fR
<ext> is an extension, see below \f(CW\*(C`\-\-extension\*(C'\fR
.Sp
defaults to the original file name (if available) or \f(CW\*(C`out\*(C'\fR (if input comes 
from the standard input)
.IP "\-n <nb>" 4
.IX Item "-n <nb>"
number of digits in the sequence number for each file
.Sp
if more digits than <nb> are needed, then they are used: if \f(CW\*(C`\-\-nb_digits 2\*(C'\fR is used
and 112 files are generated they will be named \f(CW\*(C`<file>\-01.xml\*(C'\fR to \f(CW\*(C`<file>\-112.xml\*(C'\fR
.Sp
defaults to 2
.IP "\-e <ext>" 4
.IX Item "-e <ext>"
extension to use for generated files
.Sp
defaults to the original file extension or \f(CW\*(C`.xml\*(C'\fR
.IP "\-i" 4
.IX Item "-i"
use XInclude elements instead of Processing Instructions to mark where
sub files need to be included
.IP "\-v" 4
.IX Item "-v"
verbose output
.Sp
Note that this option can slow down processing considerably (by an order of
magnitude) when generating lots of small documents
.IP "\-V" 4
.IX Item "-V"
outputs version and exit
.IP "\-h" 4
.IX Item "-h"
short help
.IP "\-m" 4
.IX Item "-m"
man (requires pod2text to be in the path)
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 4
\&  xml_split foo.xml             # split at level 1
\&  xml_split \-l 2 foo.xml        # split at level 2
\&  xml_split \-c section foo.xml  # a file is generated for each section element
\&                                # nested sections are split properly
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::Twig, xml_merge
.SH "TODO"
.IX Header "TODO"
.IP "optimize the code" 4
.IX Item "optimize the code"
any idea welcome! I have already implemented most of what I thought would 
improve performances.
.IP "provide other methods that PIs to keep merge information" 4
.IX Item "provide other methods that PIs to keep merge information"
XInclude is a good candidate (alpha support added in 0.04).
.Sp
using entities, which would seem the natural way to do it,
doesn't work, as they make it impossible to have both the main document
and the sub docs to be well-formed if the sub docs include sub-sub docs (you 
can't have entity declarations in an entity)
.SH "AUTHOR"
.IX Header "AUTHOR"
Michel Rodriguez <mirod@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
This tool is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
