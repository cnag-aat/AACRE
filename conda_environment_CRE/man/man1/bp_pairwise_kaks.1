.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "BP_PAIRWISE_KAKS 1"
.TH BP_PAIRWISE_KAKS 1 "2018-07-01" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_pairwise_kaks \- calculate pairwise Ka,Ks for a set of sequences
.SH "VERSION"
.IX Header "VERSION"
version 1.7.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
bp_pairwise_kaks.PLS \-i INPUT-cDNA [\-f \s-1FORMAT\s0] [\-o \s-1OUTPUT\s0] \e
    [\-\-msa tcoffee|clustal] [\-\-kaks yn00|codeml]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script will take as input a dataset of cDNA sequences, verify
that they contain no stop codons, align them in protein space, project
the alignment back into cDNA, and estimate the Ka (non-synonymous) and
Ks (synonymous) substitutions based on the Maximum Likelihood method
of Yang with the \s-1PAML\s0 package.
.PP
Often there are specific specific parameters you want to run when you
are computing Ka/Ks ratios so consider this script a starting point
and do not rely it on for every situation.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-i\fR, \fB\-\-input\fR" 4
.IX Item "-i, --input"
The input file with the cDNA sequences.  Must have at least two
sequences, and be in a format that Bio::SeqIO is capable to read.
In addition, if Bio::SeqIO is inable to automatically identify the
format, the \fB\-f\fR option should be specified.
.Sp
Technically not an option, this is a required value.
.IP "\fB\-f\fR, \fB\-\-format\fR" 4
.IX Item "-f, --format"
Specify the format of INPUT-cDNA for Bio::SeqIO.
.IP "\fB\-o\fR, \fB\-\-output\fR" 4
.IX Item "-o, --output"
Specify the file for output.  Defaults to \s-1STDOUT.\s0
.IP "\fB\-\-msa\fR" 4
.IX Item "--msa"
Program used for alignment, either clustalw or tcoffee.  Defaults to
clustalw.
.IP "\fB\-\-kaks\fR" 4
.IX Item "--kaks"
Program used for the Ka/Ks estimation, either codeml or yn00.
Defaults to codeml.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 4
.IX Item "-v, --verbose"
Be verbose.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Print help text.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing lists"
.IX Subsection "Mailing lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org              \- General discussion
\&  http://bioperl.org/Support.html    \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bio\-tools\-phylo\-paml/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Stajich <jason@bioperl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This software is copyright (c) by Jason Stajich <jason@bioperl.org>.
.PP
This software is available under the same terms as the perl 5 programming language system itself.
