.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "XML_PP 1"
.TH XML_PP 1 "2016-11-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
xml_pp \- xml pretty\-printer
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
xml_pp [options] [<files>]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1XML\s0 pretty printer using XML::Twig
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-i[<extension>]" 4
.IX Item "-i[<extension>]"
edits the file(s) in place, if an extension is provided (no space between 
\&\f(CW\*(C`\-i\*(C'\fR and the extension) then the original file is backed-up with that extension
.Sp
The rules for the extension are the same as Perl's (see perldoc perlrun): if
the extension includes no \*(L"*\*(R" then it is appended to the original file name,
If the extension does contain one or more \*(L"*\*(R" characters, then each \*(L"*\*(R" is 
replaced with the current filename.
.IP "\-s <style>" 4
.IX Item "-s <style>"
the style to use for pretty printing: none, nsgmls, nice, indented, record, or
record_c (see XML::Twig docs for the exact description of those styles), 
\&'indented' by default
.IP "\-p <tag(s)>" 4
.IX Item "-p <tag(s)>"
preserves white spaces in tags. You can use several \f(CW\*(C`\-p\*(C'\fR options or quote the 
tags if you need more than one
.IP "\-e <encoding>" 4
.IX Item "-e <encoding>"
use XML::Twig output_encoding (based on Text::Iconv or Unicode::Map8 and 
Unicode::String) to set the output encoding. By default the original encoding
is preserved.
.Sp
If this option is used the \s-1XML\s0 declaration is updated (and created if there was
none).
.Sp
Make sure that the encoding is supported by the parser you use if you want to
be able to process the pretty_printed file (XML::Parser does not support 
\&'latin1' for example, you have to use 'iso\-8859\-1')
.IP "\-l" 4
.IX Item "-l"
loads the documents in memory instead of outputting them as they are being
parsed.
.Sp
This prevents a bug (see \s-1BUGS\s0) but uses more memory
.IP "\-f <file>" 4
.IX Item "-f <file>"
read the list of files to process from <file>, one per line
.IP "\-v" 4
.IX Item "-v"
verbose (list the current file being processed)
.IP "\-\-" 4
stop argument processing (to process files that start with \-)
.IP "\-h" 4
.IX Item "-h"
display help
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&  xml_pp foo.xml > foo_pp.xml           # pretty print foo.xml 
\&  xml_pp < foo.xml > foo_pp.xml         # pretty print from standard input
\&
\&  xml_pp \-v \-i.bak *.xml                # pretty print .xml files, with backups
\&  xml_pp \-v \-i\*(Aqorig_*\*(Aq *.xml            # backups are named orig_<filename>
\&
\&  xml_pp \-i \-p pre foo.xhtml            # preserve spaces in pre tags
\&  
\&  xml_pp \-i.bak \-p \*(Aqpre code\*(Aq foo.xml   # preserve spaces in pre and code tags
\&  xml_pp \-i.bak \-p pre \-p code foo.xml  # same
\&
\&  xml_pp \-i \-s record mydb_export.xml   # pretty print using the record style
\&
\&  xml_pp \-e utf8 \-i foo.xml             # output will be in utf8
\&  xml_pp \-e iso\-8859\-1 \-i foo.xml       # output will be in iso\-8859\-1
\&
\&  xml_pp \-v \-i.bak \-f lof               # pretty print in place files from lof
\&  
\&  xml_pp \-\- \-i.xml                      # pretty print the \-i.xml file
\&
\&  xml_pp \-l foo.xml                     # loads the entire file in memory 
\&                                        # before pretty printing it
\&
\&  xml_pp \-h                             # display help
.Ve
.SH "BUGS"
.IX Header "BUGS"
Elements with mixed content that start with an embedded element get an extra \en
.PP
.Vb 1
\&  <elt><b>b</b>toto<b>bold</b></elt>
.Ve
.PP
will be output as
.PP
.Vb 2
\&  <elt>
\&    <b>b</b>toto<b>bold</b></elt>
.Ve
.PP
Using the \f(CW\*(C`\-l\*(C'\fR option solves this bug (but uses more memory)
.SH "TODO"
.IX Header "TODO"
update XML::Twig to use Encode with perl 5.8.0
.SH "AUTHOR"
.IX Header "AUTHOR"
Michel Rodriguez <mirod@xmltwig.com>
