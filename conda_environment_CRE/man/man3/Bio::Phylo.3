.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo 3"
.TH Bio::Phylo 3 "2014-03-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo \- Phylogenetic analysis using perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # Actually, you would almost never use this module directly. This is 
\& # the base class for other modules.
\& use Bio::Phylo;
\& 
\& # sets global verbosity to \*(Aqerror\*(Aq
\& Bio::Phylo\->VERBOSE( \-level => Bio::Phylo::Util::Logger::ERROR );
\& 
\& # sets verbosity for forest ojects to \*(Aqdebug\*(Aq
\& Bio::Phylo\->VERBOSE( 
\&        \-level => Bio::Phylo::Util::Logger::DEBUG, 
\&        \-class => \*(AqBio::Phylo::Forest\*(Aq 
\& );
\& 
\& # prints version, including SVN revision number
\& print Bio::Phylo\->VERSION;
\& 
\& # prints suggested citation
\& print Bio::Phylo\->CITATION;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for the Bio::Phylo package for phylogenetic analysis using 
object-oriented perl5. In this file, methods are defined that are performed by other 
objects in the Bio::Phylo release that inherit from this base class (which you normally
wouldn't use directly).
.PP
For general information on how to use Bio::Phylo, consult the manual
(Bio::Phylo::Manual).
.PP
If you come here because you are trying to debug a problem you run into in
using Bio::Phylo, you may be interested in the \*(L"exceptions\*(R" system as discussed
in Bio::Phylo::Util::Exceptions. In addition, you may find the logging system
in Bio::Phylo::Util::Logger of use to localize problems.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
The Bio::Phylo root constructor is rarely used directly. Rather, many other 
objects in Bio::Phylo internally go up the inheritance tree to this constructor. 
The arguments shown here can therefore also be passed to any of the child 
classes' constructors, which will pass them on up the inheritance tree. Generally, 
constructors in Bio::Phylo subclasses can process as arguments all methods that 
have set_* in their names. The arguments are named for the methods, but \*(L"set_\*(R" 
has been replaced with a dash \*(L"\-\*(R", e.g. the method \*(L"set_name\*(R" becomes the 
argument \*(L"\-name\*(R" in the constructor.
.Sp
.Vb 8
\& Type    : Constructor
\& Title   : new
\& Usage   : my $phylo = Bio::Phylo\->new;
\& Function: Instantiates Bio::Phylo object
\& Returns : a Bio::Phylo object 
\& Args    : Optional, any number of setters. For example,
\&                   Bio::Phylo\->new( \-name => $name )
\&                   will call set_name( $name ) internally
.Ve
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_guid()\fR" 4
.IX Item "set_guid()"
Sets invocant \s-1GUID.\s0
.Sp
.Vb 9
\& Type    : Mutator
\& Title   : set_guid
\& Usage   : $obj\->set_guid($guid);
\& Function: Assigns an object\*(Aqs GUID.
\& Returns : Modified object.
\& Args    : A scalar
\& Notes   : This field can be used for storing an identifier that is
\&           unambiguous within a given content. For example, an LSID,
\&           a genbank accession number, etc.
.Ve
.IP "\fIset_desc()\fR" 4
.IX Item "set_desc()"
Sets invocant description.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_desc
\& Usage   : $obj\->set_desc($desc);
\& Function: Assigns an object\*(Aqs description.
\& Returns : Modified object.
\& Args    : Argument must be a string.
.Ve
.IP "\fIset_score()\fR" 4
.IX Item "set_score()"
Sets invocant score.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_score
\& Usage   : $obj\->set_score($score);
\& Function: Assigns an object\*(Aqs numerical score.
\& Returns : Modified object.
\& Args    : Argument must be any of
\&           perl\*(Aqs number formats, or undefined
\&           to reset score.
.Ve
.IP "\fIset_generic()\fR" 4
.IX Item "set_generic()"
Sets generic key/value pair(s).
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_generic
\& Usage   : $obj\->set_generic( %generic );
\& Function: Assigns generic key/value pairs to the invocant.
\& Returns : Modified object.
\& Args    : Valid arguments constitute:
\&
\&           * key/value pairs, for example:
\&             $obj\->set_generic( \*(Aq\-lnl\*(Aq => 0.87565 );
\&
\&           * or a hash ref, for example:
\&             $obj\->set_generic( { \*(Aq\-lnl\*(Aq => 0.87565 } );
\&
\&           * or nothing, to reset the stored hash, e.g.
\&                $obj\->set_generic( );
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_guid()\fR" 4
.IX Item "get_guid()"
Gets invocant \s-1GUID.\s0
.Sp
.Vb 9
\& Type    : Accessor
\& Title   : get_guid
\& Usage   : my $guid = $obj\->get_guid;
\& Function: Assigns an object\*(Aqs GUID.
\& Returns : Scalar.
\& Args    : None
\& Notes   : This field can be used for storing an identifier that is
\&           unambiguous within a given content. For example, an LSID,
\&           a genbank accession number, etc.
.Ve
.IP "\fIget_desc()\fR" 4
.IX Item "get_desc()"
Gets invocant description.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_desc
\& Usage   : my $desc = $obj\->get_desc;
\& Function: Returns the object\*(Aqs description (if any).
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_score()\fR" 4
.IX Item "get_score()"
Gets invocant's score.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_score
\& Usage   : my $score = $obj\->get_score;
\& Function: Returns the object\*(Aqs numerical score (if any).
\& Returns : A number
\& Args    : None
.Ve
.IP "\fIget_generic()\fR" 4
.IX Item "get_generic()"
Gets generic hashref or hash value(s).
.Sp
.Vb 12
\& Type    : Accessor
\& Title   : get_generic
\& Usage   : my $value = $obj\->get_generic($key);
\&           or
\&           my %hash = %{ $obj\->get_generic() };
\& Function: Returns the object\*(Aqs generic data. If an
\&           argument is used, it is considered a key
\&           for which the associated value is returned.
\&           Without arguments, a reference to the whole
\&           hash is returned.
\& Returns : A value or an array reference of values
\& Args    : A key (string) or an array reference of keys
.Ve
.SS "\s-1PACKAGE METHODS\s0"
.IX Subsection "PACKAGE METHODS"
.IP "\fIget_obj_by_id()\fR" 4
.IX Item "get_obj_by_id()"
Attempts to fetch an in-memory object by its \s-1UID\s0
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_obj_by_id
\& Usage   : my $obj = Bio::Phylo\->get_obj_by_id($uid);
\& Function: Fetches an object from the IDPool cache
\& Returns : A Bio::Phylo object 
\& Args    : A unique id
.Ve
.IP "\fIget_logger()\fR" 4
.IX Item "get_logger()"
Returns a singleton reference to a Bio::Phylo::Util::Logger object
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_logger
\& Usage   : my $logger = Bio::Phylo\->get_logger
\& Function: Returns logger
\& Returns : A Bio::Phylo::Util::Logger object 
\& Args    : None
.Ve
.IP "\s-1\fIVERSION\s0()\fR" 4
.IX Item "VERSION()"
Returns the \f(CW$VERSION\fR string of this Bio::Phylo release
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : VERSION
\& Usage   : my $version = Bio::Phylo\->VERSION
\& Function: Returns version string
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIclone()\fR" 4
.IX Item "clone()"
Clones invocant.
.Sp
.Vb 7
\& Type    : Utility method
\& Title   : clone
\& Usage   : my $clone = $object\->clone;
\& Function: Creates a copy of the invocant object.
\& Returns : A copy of the invocant.
\& Args    : None.
\& Comments: Cloning is currently experimental, use with caution.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.PP
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
