.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::PDF::Array 3"
.TH PDF::API2::Basic::PDF::Array 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Basic::PDF::Array \- Corresponds to a PDF array. Inherits from PDF::Objind
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "PDF::Array\->new($parent, @values)"
.el .SS "PDF::Array\->new($parent, \f(CW@values\fP)"
.IX Subsection "PDF::Array->new($parent, @values)"
Creates an array with the given storage parent and an optional list of values to
initialise the array with.
.ie n .SS "$a\->outobjdeep($fh, $pdf)"
.el .SS "\f(CW$a\fP\->outobjdeep($fh, \f(CW$pdf\fP)"
.IX Subsection "$a->outobjdeep($fh, $pdf)"
Outputs an array as a \s-1PDF\s0 array to the given filehandle.
.ie n .SS "$a\->\fIelements()\fP"
.el .SS "\f(CW$a\fP\->\fIelements()\fP"
.IX Subsection "$a->elements()"
Returns the contents of the array.
.ie n .SS "$a\->add_elements(@elements)"
.el .SS "\f(CW$a\fP\->add_elements(@elements)"
.IX Subsection "$a->add_elements(@elements)"
Appends the given elements to the array. An element is only added if it
is defined.
.ie n .SS "$a\->remove_element($element)"
.el .SS "\f(CW$a\fP\->remove_element($element)"
.IX Subsection "$a->remove_element($element)"
Removes all occurrences of an element from an array.
.ie n .SS "$a\->\fIval()\fP"
.el .SS "\f(CW$a\fP\->\fIval()\fP"
.IX Subsection "$a->val()"
Returns a reference to the contents of the array.
.ie n .SS "$a\->copy($pdf)"
.el .SS "\f(CW$a\fP\->copy($pdf)"
.IX Subsection "$a->copy($pdf)"
Copies the array with deep-copy on elements which are not full \s-1PDF\s0 objects
with respect to a particular \f(CW$pdf\fR output context
