.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Coordinate::Chain 3"
.TH Bio::Coordinate::Chain 3 "2016-12-15" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Coordinate::Chain \- Mapping locations through a chain of coordinate mappers.
.SH "VERSION"
.IX Header "VERSION"
version 1.007001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # create Bio::Coordinate::Pairs, or any MapperIs, somehow
\&  $pair1; $pair2;
\&
\&  # add them into a Chain
\&  $collection = Bio::Coordinate::Chain\->new;
\&  $collection\->add_mapper($pair1);
\&  $collection\->add_mapper($pair2);
\&
\&  # create a position and map it
\&  $pos = Bio::Location::Simple\->new (\-start => 5, \-end => 9 );
\&  $match = $collection\->map($pos);
\&  if ($match) {
\&      sprintf "Matches at %d\-%d\en", $match\->start, $match\->end,
\&  } else {
\&      print "No match\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class assumes that you have built several mappers and want to
link them together so that output from the previous mapper is the next
mappers input. This way you can build arbitrarily complex mappers from
simpler components.
.PP
Note that Chain does not do any sanity checking on its mappers. You
are solely responsible that input and output coordinate systems,
direction of mapping and parameters internal to mappers make sense
when chained together.
.PP
To put it bluntly, the present class is just a glorified foreach loop
over an array of mappers calling the map method.
.PP
It would be neat to an internal function that would generate a new
single step mapper from those included in the chain. It should speed
things up considerably. Any volunteers?
.SH "METHODS"
.IX Header "METHODS"
.SS "map"
.IX Subsection "map"
.Vb 6
\& Title   : map
\& Usage   : $newpos = $obj\->map($pos);
\& Function: Map the location through all the mappers in the chain.
\& Example :
\& Returns : new Location in the output coordiante system
\& Args    : a Bio::Location::Simple object
.Ve
.SS "sort"
.IX Subsection "sort"
You do not really want to sort your chain, do you! This function does nothing
other than a warning.
.SS "Inherited methods"
.IX Subsection "Inherited methods"
.SS "add_mapper"
.IX Subsection "add_mapper"
.Vb 7
\& Title   : add_mapper
\& Usage   : $obj\->add_mapper($mapper)
\& Function: Pushes one Bio::Coodinate::MapperI into the list of mappers.
\&           Sets _is_sorted() to false.
\& Example :
\& Returns : 1 when succeeds, 0 for failure.
\& Args    : mapper object
.Ve
.SS "mappers"
.IX Subsection "mappers"
.Vb 6
\& Title   : mappers
\& Usage   : $obj\->mappers();
\& Function: Returns or sets a list of mappers.
\& Example :
\& Returns : array of mappers
\& Args    : array of mappers
.Ve
.SS "each_mapper"
.IX Subsection "each_mapper"
.Vb 6
\& Title   : each_mapper
\& Usage   : $obj\->each_mapper();
\& Function: Returns a list of mappers.
\& Example :
\& Returns : array of mappers
\& Args    : none
.Ve
.SS "swap"
.IX Subsection "swap"
.Vb 6
\& Title   : swap
\& Usage   : $obj\->swap;
\& Function: Swap the direction of mapping;input <\-> output
\& Example :
\& Returns : 1
\& Args    :
.Ve
.SS "test"
.IX Subsection "test"
.Vb 7
\& Title   : test
\& Usage   : $obj\->test;
\& Function: test that both components of all pairs are of the same length.
\&           Ran automatically.
\& Example :
\& Returns : boolean
\& Args    :
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing lists"
.IX Subsection "Mailing lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/%%7Bdist%7D
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Heikki Lehvaslaiho <heikki@bioperl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This software is copyright (c) by Heikki Lehvaslaiho.
.PP
This software is available under the same terms as the perl 5 programming language system itself.
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Ewan Birney <birney@ebi.ac.uk>
