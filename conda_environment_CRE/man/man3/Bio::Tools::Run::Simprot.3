.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Simprot 3"
.TH Bio::Tools::Run::Simprot 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Simprot \- Wrapper around the Simprot program. Wrapper for the calculation of a multiple sequence alignment from a phylogenetic tree
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::Tools::Run::Simprot;
\&  use Bio::TreeIO;
\&
\&  my $treeio = Bio::TreeIO\->new(
\&      \-format => \*(Aqnh\*(Aq, \-file => \*(Aqt/data/tree.nh\*(Aq);
\&
\&  my $tree = $treeio\->next_tree;
\&
\&  my $simprot = Bio::Tools::Run::Simprot\->new();
\&  $simprot\->tree($tree);
\&  my ($rc,$aln,$seq) = $simprot\->run();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper around the Simprot program by Andy Pang, Andrew D
Smith, Paulo \s-1AS\s0 Nuin and Elisabeth \s-1RM\s0 Tillier.
.PP
Simprot allows for several models of amino acid substitution (\s-1PAM, JTT\s0
and \s-1PMB\s0), allows for gamma distributed sites rates according to Yang's
model, and implements a parameterised Qian and Goldstein distribution
model for insertion and deletion.
.PP
See http://www.uhnres.utoronto.ca/labs/tillier/software.htm for more
information.
.SS "Helping the module find your executable"
.IX Subsection "Helping the module find your executable"
You will need to enable \s-1SIMPROTDIR\s0 to find the simprot program. This can be
done in (at least) three ways:
.PP
.Vb 8
\&  1. Make sure the simprot executable is in your path (i.e. 
\&     \*(Aqwhich simprot\*(Aq returns a valid program
\&  2. define an environmental variable SIMPROTDIR which points to a 
\&     directory containing the \*(Aqsimprot\*(Aq app:
\&   In bash 
\&        export SIMPROTDIR=/home/progs/simprot   or
\&   In csh/tcsh
\&        setenv SIMPROTDIR /home/progs/simprot
\&
\&  3. include a definition of an environmental variable SIMPROTDIR 
\&      in every script that will
\&     BEGIN {$ENV{SIMPROTDIR} = \*(Aq/home/progs/simprot\*(Aq; }
\&     use Bio::Tools::Run::Simprot;
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\& http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \-  Albert Vilella"
.IX Header "AUTHOR - Albert Vilella"
Email avilella-at-gmail-dot-com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory\->program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $simprot = Bio::Tools::Run::Simprot\->new();
\& Function: Builds a new Bio::Tools::Run::Simprot
\& Returns : Bio::Tools::Run::Simprot
\& Args    : \-alignment => the Bio::Align::AlignI object
\&           \-tree => the Bio::Tree::TreeI object
\&           \-save_tempfiles => boolean to save the generated tempfiles and
\&                              NOT cleanup after onesself (default FALSE)
\&           \-executable => where the simprot executable resides
\&                                         \-params => A reference to a hash where keys are parameter names
\&                                                    and hash values are the associated parameter values
.Ve
.PP
See also: Bio::Tree::TreeI, Bio::Align::AlignI
.SS "set_parameters"
.IX Subsection "set_parameters"
.Vb 6
\& Title   : set_parameters
\& Usage   : $codeml\->set_parameters($parameter, $value);
\& Function: (Re)set the SimProt parameters
\& Returns : none
\& Args    : First argument is the parameter name
\&           Second argument is the parameter value
.Ve
.SS "set_default_parameters"
.IX Subsection "set_default_parameters"
.Vb 7
\& Title   : set_default_parameters
\& Usage   : $codeml\->set_default_parameters(0);
\& Function: (Re)set the default parameters from the defaults
\&           (the first value in each array in the 
\&            %VALIDVALUES class variable)
\& Returns : none
\& Args    : boolean: keep existing parameter values
.Ve
.SS "get_parameters"
.IX Subsection "get_parameters"
.Vb 5
\& Title   : get_parameters
\& Usage   : my %params = $self\->get_parameters();
\& Function: returns the list of parameters as a hash
\& Returns : associative array keyed on parameter names
\& Args    : none
.Ve
.SS "prepare"
.IX Subsection "prepare"
.Vb 7
\& Title   : prepare
\& Usage   : my $rundir = $simprot\->prepare();
\& Function: prepare the simprot analysis using the default or updated parameters
\&           the alignment parameter and species tree must have been set
\& Returns : value of rundir
\& Args    : L<Bio::Align::AlignI> object,
\&           L<Bio::Tree::TreeI> object [optional]
.Ve
.SS "run"
.IX Subsection "run"
.Vb 7
\& Title   : run
\& Usage   : my $nhx_tree = $simprot\->run();
\& Function: run the simprot analysis using the default or updated parameters
\&           the alignment parameter must have been set
\& Returns : L<Bio::Tree::TreeI> object [optional]
\& Args    : L<Bio::Align::AlignI> object
\&           L<Bio::Tree::TreeI> object
.Ve
.SS "error_string"
.IX Subsection "error_string"
.Vb 5
\& Title   : error_string
\& Usage   : $obj\->error_string($newval)
\& Function: Where the output from the last analysus run is stored.
\& Returns : value of error_string
\& Args    : newvalue (optional)
.Ve
.SS "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   : exit if $prog\->version() < 1.8
\& Function: Determine the version number of the program
\& Example :
\& Returns : float or undef
\& Args    : none
.Ve
.SS "alignment"
.IX Subsection "alignment"
.Vb 8
\& Title   : alignment
\& Usage   : $simprot\->align($aln);
\& Function: Get/Set the L<Bio::Align::AlignI> object
\& Returns : L<Bio::Align::AlignI> object
\& Args    : [optional] L<Bio::Align::AlignI>
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\& See also: L<Bio::SimpleAlign>
.Ve
.SS "tree"
.IX Subsection "tree"
.Vb 6
\& Title   : tree
\& Usage   : $simprot\->tree($tree, %params);
\& Function: Get/Set the L<Bio::Tree::TreeI> object
\& Returns : L<Bio::Tree::TreeI> 
\& Args    : [optional] $tree => L<Bio::Tree::TreeI>,
\&           [optional] %parameters => hash of tree\-specific parameters
\&
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\& See also: L<Bio::Tree::Tree>
.Ve
.SH "Bio::Tools::Run::BaseWrapper methods"
.IX Header "Bio::Tools::Run::BaseWrapper methods"
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function: 
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $simprot\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $simprot\->cleanup();
\& Function: Will cleanup the tempdir directory
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
