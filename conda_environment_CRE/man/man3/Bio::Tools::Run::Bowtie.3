.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Bowtie 3"
.TH Bio::Tools::Run::Bowtie 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Bowtie \- Run wrapper for the Bowtie short\-read assembler *BETA*
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # create an index
\& $bowtie_build = Bio::Tools::Run::Bowtie\->new();
\& $index = $bowtie_fac\->run( \*(Aqreference.fasta\*(Aq, \*(Aqindex_base\*(Aq );
\&
\& # or with named args...
\&
\& $index = $bowtie_fac\->run( \-ref => \*(Aqreference.fasta\*(Aq, \-ind => \*(Aqindex_base\*(Aq );
\&
\& # get the base name of the last index from an index builder
\& $index = $bowtie_fac\->result;
\& 
\& # create an assembly
\& $bowtie_fac = Bio::Tools::Run::Bowtie\->new();
\& $bowtie_fac\->want(\*(AqBio::Assembly::Scaffold\*(Aq);
\& $bowtie_assy = $bowtie_fac\->run( \*(Aqreads.fastq\*(Aq, \*(Aqindex_base\*(Aq );
\& 
\& # if IO::Uncompress::Gunzip is available and with named args...
\& $bowtie_assy = $bowtie_fac\->run( \-seq => \*(Aqreads.fastq.gz\*(Aq, \-ind => \*(Aqindex_base\*(Aq );
\& 
\& # paired\-end
\& $bowtie_fac = Bio::Tools::Run::Bowtie\->new(\-command => \*(Aqpaired\*(Aq,
\&                                            \-want => \*(AqBio::Assembly::Scaffold\*(Aq);
\& $bowtie_assy = $bowtie_fac\->run( \*(Aqreads.fastq\*(Aq, \*(Aqindex_base\*(Aq, \*(Aqpaired\-reads.fastq\*(Aq );
\& 
\& # be more strict
\& $bowtie_fac\->set_parameters( \-max_qual_mismatch => 50 );
\& 
\& # create a Bio::Assembly::Scaffold object
\& $bowtie_assy = $bowtie_fac\->run( \*(Aqreads.fastq\*(Aq, \*(Aqindex_base\*(Aq, \*(Aqpaired\-reads.fastq\*(Aq  );
\& 
\& # print consensus sequences from assembly object
\& for $contig ($bowtie_assy\->all_contigs) {
\&    print $contig\->get_consensus_sequence\->seq,"\en";
\& }
\& 
\& # get the file object of the last assembly
\& $io = $bowtie_fac\->result( \-want => \*(AqBio::Root::IO\*(Aq );
\& 
\& # get a merged SeqFeature::Collection of all hits
\& #  \- currently only available with SAM format 
\& $io = $bowtie_fac\->result( \-want => \*(AqBio::SeqFeature::Collection\*(Aq );
\& 
\& #... or the file name directly
\& $filename = $bowtie_fac\->result( \-want => \*(Aqraw\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a wrapper interface for Ben Langmead and Col
Trapnell's ultrafast memory-efficient short read aligner \f(CW\*(C`bowtie\*(C'\fR
(see <http://bowtie\-bio.sourceforge.net/> for manuals and downloads).
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\f(CW\*(C`bowtie\*(C'\fR is complex, with many command-line options. This module attempts to 
provide and options comprehensively. You can browse the choices like so:
.PP
.Vb 8
\& $bowtiefac = Bio::Tools::Run::Bowtie\->new( \-command => \*(Aqsingle\*(Aq );
\& # all bowtie commands
\& @all_commands = $bowtiefac\->available_parameters(\*(Aqcommands\*(Aq);
\& @all_commands = $bowtiefac\->available_commands; # alias
\& # just for single
\& @assemble_params = $bowtiefac\->available_parameters(\*(Aqparams\*(Aq);
\& @assemble_switches = $bowtiefac\->available_parameters(\*(Aqswitches\*(Aq);
\& @assemble_all_options = $bowtiefac\->available_parameters();
.Ve
.PP
Reasonably mnemonic names have been assigned to the single-letter
command line options. These are the names returned by
\&\f(CW\*(C`available_parameters\*(C'\fR, and can be used in the factory constructor
like typical BioPerl named parameters.
.PP
As a number of options are mutually exclusive, and the interpretation of
intent is based on last-pass option reaching bowtie with potentially unpredicted
results. This module will prevent inconsistent switches and parameters
from being passed.
.PP
See <http://bowtie.sourceforge.net/bowtie\-manpage.shtml> for details of bowtie
options.
.SH "FILES"
.IX Header "FILES"
When a command requires filenames, these are provided to the \f(CW\*(C`run\*(C'\fR method, not
the constructor (\f(CW\*(C`new()\*(C'\fR). To see the set of files required by a command, use
\&\f(CW\*(C`available_parameters(\*(Aqfilespec\*(Aq)\*(C'\fR or the alias \f(CW\*(C`filespec()\*(C'\fR:
.PP
.Vb 2
\&  $bowtiefac = Bio::Tools::Run::Bowtie\->new( \-command => \*(Aqpaired\*(Aq );
\&  @filespec = $bowtiefac\->filespec;
.Ve
.PP
This example returns the following array:
.PP
.Vb 4
\& ind
\& seq
\& seq2
\& #out
.Ve
.PP
This indicates that ind (\f(CW\*(C`bowtie\*(C'\fR index file base name), seq (fasta/fastq),and seq2
(fasta/fastq) files \s-1MUST\s0 be specified, and that the out file \s-1MAY\s0 be specified. Use
these in the \f(CW\*(C`run\*(C'\fR call like so:
.PP
.Vb 2
\& $bowtiefac\->run( \-ind => \*(Aqindex_base\*(Aq, \-seq => \*(Aqseq\-a.fq\*(Aq,
\&                  \-seq2 => \*(Aqseq\-b.fq\*(Aq, \-out => \*(Aqalign.out\*(Aq );
.Ve
.PP
Note that named parameters in this form allow you to specify the location of the outfile;
without named parameters, the outfile is located in a tempdir and does not persist beyond
the life of the object \- with the exception of index creation.
.PP
The object will store the programs \s-1STDOUT\s0 and \s-1STDERR\s0 output for you in the \f(CW\*(C`stdout()\*(C'\fR
and \f(CW\*(C`stderr()\*(C'\fR attributes:
.PP
.Vb 1
\& handle_map_warning($bowtiefac) if ($bowtiefac\->stderr =~ /warning/);
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
bioperl\-l@bioperl.org
.PP
Rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Dan Kortschak"
.IX Header "AUTHOR - Dan Kortschak"
.Vb 1
\& Email dan.kortschak adelaide.edu.au
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.Vb 1
\& Mark A. Jensen (maj \-at\- fortinbras \-dot\- us)
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::Run::Bowtie();
\& Function: Builds a new Bio::Tools::Run::Bowtie object
\& Returns : an instance of Bio::Tools::Run::Bowtie
\& Args    :
.Ve
.SS "\fIrun()\fP"
.IX Subsection "run()"
.Vb 10
\& Title   : run
\& Usage   : $assembly = $bowtie_assembler\->run($read1_fastq_file,
\&                                           $index_location,
\&                                           $read2_fastq_file);
\&           $assembly = $bowtie_assembler\->run(%params);
\& Function: Run the bowtie assembly pipeline.
\& Returns : Assembly results (file, IO object or Assembly object)
\& Args    : \- fastq file containing single\-end reads
\&           \- name of the base of the bowtie index
\&           \- [optional] fastq file containing paired\-end reads
\&           Named params are also available with args:
\&           \-seq, \-seq2, \-ind (bowtie index), \-ref (fasta reference) and \-out
\& Note    : gzipped inputs are allowed if IO::Uncompress::Gunzip
\&           is available
\&           The behaviour for locating indexes follows the definition in
\&           the bowtie manual \- you may use the environment variable
\&           BOWTIE_INDEXES to specify the index path or use an \*(Aqindexes\*(Aq
\&           directory under the directory where the bowtie executable
\&           is located
.Ve
.SS "\fIwant()\fP"
.IX Subsection "want()"
.Vb 5
\& Title   : want
\& Usage   : $bowtiefac\->want( $class )
\& Function: make factory return $class, or raw (scalar) results in file
\& Returns : return wanted type
\& Args    : [optional] string indicating class or raw of wanted result
.Ve
.SS "\fIresult()\fP"
.IX Subsection "result()"
.Vb 5
\& Title   : result
\& Usage   : $bowtiefac\->result( [\-want => $type|$format] )
\& Function: return result in wanted format
\& Returns : results
\& Args    : [optional] hashref of wanted type
.Ve
.SS "\fI_determine_format()\fP"
.IX Subsection "_determine_format()"
.Vb 5
\& Title   : _determine_format
\& Usage   : $bowtiefac\->_determine_format
\& Function: determine the format of output for current options
\& Returns : format of bowtie output
\& Args    :
.Ve
.SS "\fI_make_bam()\fP"
.IX Subsection "_make_bam()"
.Vb 5
\& Title   : _make_bam
\& Usage   : $bowtiefac\->_make_bam( $file, $sort )
\& Function: make a sorted BAM format file from SAM file
\& Returns : sorted BAM file name
\& Args    : SAM file name and boolean flag to select sorted BAM format
.Ve
.SS "\fI_validate_file_input()\fP"
.IX Subsection "_validate_file_input()"
.Vb 5
\& Title   : _validate_file_input
\& Usage   : $bowtiefac\->_validate_file_input( \-type => $file )
\& Function: validate file type for file spec
\& Returns : file type if valid type for file spec
\& Args    : hash of filespec => file_name
.Ve
.SH "Bio::Tools::Run::AssemblerBase overrides"
.IX Header "Bio::Tools::Run::AssemblerBase overrides"
.SS "\fI_assembly_format()\fP"
.IX Subsection "_assembly_format()"
.Vb 5
\& Title   : _assembly_format
\& Usage   : $bowtiefac\->_determine_format
\& Function: set the format of output for current options
\& Returns : format of bowtie output
\& Args    :
.Ve
.SS "\fI_check_sequence_input()\fP"
.IX Subsection "_check_sequence_input()"
.Vb 1
\& No\-op.
.Ve
.SS "\fI_check_optional_quality_input()\fP"
.IX Subsection "_check_optional_quality_input()"
.Vb 1
\& No\-op.
.Ve
.SS "\fI_prepare_input_sequences()\fP"
.IX Subsection "_prepare_input_sequences()"
.Vb 1
\& Prepare and check input sequences for bowtie.
.Ve
.SS "\fIset_parameters()\fP"
.IX Subsection "set_parameters()"
.Vb 8
\& Title   : set_parameters
\& Usage   : $bowtiefac\->set_parameters(%params);
\& Function: sets the parameters listed in the hash or array,
\&           maintaining sane options.
\& Returns : true on success
\& Args    : [optional] hash or array of parameter/values.
\& Note    : This will unset conflicts and set required options,
\&           but will not prevent non\-sane requests in the arguments
.Ve
.SS "\fIversion()\fP"
.IX Subsection "version()"
.Vb 4
\& Title   : version
\& Usage   : $version = $bowtiefac\->version()
\& Function: Returns the program version (if available)
\& Returns : string representing location and version of the program
.Ve
