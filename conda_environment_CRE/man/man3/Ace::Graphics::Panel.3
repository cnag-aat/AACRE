.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Ace::Graphics::Panel 3"
.TH Ace::Graphics::Panel 3 "2001-09-17" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Ace::Graphics::Panel \- PNG graphics of Ace::Sequence::Feature objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Ace::Sequence;
\&  use Ace::Graphics::Panel;
\&
\&  my $db     = Ace\->connect(\-host=>\*(Aqbrie2.cshl.org\*(Aq,\-port=>2005) or die;
\&  my $cosmid = Ace::Sequence\->new(\-seq=>\*(AqY16B4A\*(Aq,
\&                                  \-db=>$db,\-start=>\-15000,\-end=>15000) or die;
\&
\&  my @transcripts = $cosmid\->transcripts;
\&
\&  my $panel = Ace::Graphics::Panel\->new(
\&                                      \-segment => $cosmid,
\&                                      \-width  => 800
\&                                     );
\&
\&
\&  $panel\->add_track(arrow => $cosmid,
\&                  \-bump => 0,
\&                  \-tick=>2);
\&
\&  $panel\->add_track(transcript => \e@transcripts,
\&                    \-fillcolor =>  \*(Aqwheat\*(Aq,
\&                    \-fgcolor   =>  \*(Aqblack\*(Aq,
\&                    \-key       => \*(AqCurated Genes\*(Aq,
\&                    \-bump      =>  +1,
\&                    \-height    =>  10,
\&                    \-label     =>  1);
\&
\&  my $boxes = $panel\->boxes;
\&  print $panel\->png;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Ace::Graphics::Panel class provides drawing and formatting
services for Ace::Sequence::Feature objects or Das::Segment::Feature
objects.
.PP
Typically you will begin by creating a new Ace::Graphics::Panel
object, passing it the width of the visual display and the length of
the segment.
.PP
You will then call \fIadd_track()\fR one or more times to add sets of
related features to the picture.  When you have added all the features
you desire, you may call \fIpng()\fR to convert the image into a PNG-format
image, or \fIboxes()\fR to return coordinate information that can be used to
create an imagemap.
.PP
Note that this modules depends on \s-1GD.\s0
.SH "METHODS"
.IX Header "METHODS"
This section describes the class and object methods for
Ace::Graphics::Panel.
.SS "\s-1CONSTRUCTORS\s0"
.IX Subsection "CONSTRUCTORS"
There is only one constructor, the \fInew()\fR method.
.ie n .IP "$panel = Ace::Graphics::Panel\->new(@options)" 4
.el .IP "\f(CW$panel\fR = Ace::Graphics::Panel\->new(@options)" 4
.IX Item "$panel = Ace::Graphics::Panel->new(@options)"
The \fInew()\fR method creates a new panel object.  The options are
a set of tag/value pairs as follows:
.Sp
.Vb 2
\&  Option      Value                                Default
\&  \-\-\-\-\-\-      \-\-\-\-\-                                \-\-\-\-\-\-\-
\&
\&  \-length     Length of sequence segment, in bp    0
\&
\&  \-segment    An Ace::Sequence or Das::Segment     none
\&              object, used to derive length if
\&              not provided
\&
\&  \-offset     Base pair to place at extreme left   $segment\->start
\&              of image.
\&
\&  \-width      Desired width of image, in pixels    600
\&
\&  \-spacing    Spacing between tracks, in pixels    5
\&
\&  \-pad_top    Additional whitespace between top    0
\&              of image and contents, in pixels
\&
\&  \-pad_bottom Additional whitespace between top    0
\&              of image and bottom, in pixels
\&
\&  \-pad_left   Additional whitespace between left   0
\&              of image and contents, in pixels
\&
\&  \-pad_right  Additional whitespace between right  0
\&              of image and bottom, in pixels
\&
\&  \-keycolor   Background color for the key printed \*(Aqcornsilk\*(Aq
\&              at bottom of panel (if any)
\&
\&  \-keyspacing Spacing between key glyphs in the    10
\&              key printed at bottom of panel
\&              (if any)
.Ve
.Sp
Typically you will pass \fInew()\fR an object that implements the
Bio::RangeI interface, providing a \fIlength()\fR method, from which the
panel will derive its scale.
.Sp
.Vb 2
\&  $panel = Ace::Graphics::Panel\->new(\-segment => $sequence,
\&                                     \-width   => 800);
.Ve
.Sp
\&\fInew()\fR will return undef in case of an error. If the specified glyph
name is not a valid one, \fInew()\fR will throw an exception.
.SS "\s-1OBJECT METHODS\s0"
.IX Subsection "OBJECT METHODS"
.ie n .IP "$track = $panel\->add_track($glyph,$features,@options)" 4
.el .IP "\f(CW$track\fR = \f(CW$panel\fR\->add_track($glyph,$features,@options)" 4
.IX Item "$track = $panel->add_track($glyph,$features,@options)"
The \fIadd_track()\fR method adds a new track to the image.
.Sp
Tracks are horizontal bands which span the entire width of the panel.
Each track contains a number of graphical elements called \*(L"glyphs\*(R",
each corresponding to a sequence feature. There are different glyph
types, but each track can only contain a single type of glyph.
Options passed to the track control the color and size of the glyphs,
whether they are allowed to overlap, and other formatting attributes.
The height of a track is determined from its contents and cannot be
directly influenced.
.Sp
The first two arguments are the glyph name and an array reference
containing the list of features to display.  The order of the
arguments is irrelevant, allowing either of these idioms:
.Sp
.Vb 2
\&  $panel\->add_track(arrow => \e@features);
\&  $panel\->add_track(\e@features => \*(Aqarrow\*(Aq);
.Ve
.Sp
The glyph name indicates how each feature is to be rendered.  A
variety of glyphs are available, and the number is growing.
Currently, the following glyphs are available:
.Sp
.Vb 2
\&  Name        Description
\&  \-\-\-\-        \-\-\-\-\-\-\-\-\-\-\-
\&
\&  box         A filled rectangle, nondirectional.
\&
\&  ellipse     A filled ellipse, nondirectional.
\&
\&  arrow       An arrow; can be unidirectional or bidirectional.
\&              It is also capable of displaying a scale with
\&              major and minor tickmarks, and can be oriented
\&              horizontally or vertically.
\&
\&  segments    A set of filled rectangles connected by solid lines.
\&              Used for interrupted features, such as gapped
\&              alignments.
\&
\&  transcript  Similar to segments, but the connecting line is
\&              a "hat" shape, and the direction of transcription
\&              is indicated by a small arrow.
\&
\&  transcript2 Similar to transcript, but the arrow that indicates
\&              the direction of transcription is the last exon
\&              itself.
\&
\&  primers     Two inward pointing arrows connected by a line.
\&              Used for STSs.
\&
\&  toomany     A "cloud", to indicate too many features to show
\&              individually.  This is a placeholder that will be
\&              replaced by something more clever, such as a histogram
\&              or density plot.
\&
\&  group       A group of related features connected by a dashed line.
\&              This is used internally by the Track class and should
\&              not be called explicitly.
.Ve
.Sp
If the glyph name is omitted from \fIadd_track()\fR, the \*(L"box\*(R" glyph will be
used by default.
.Sp
The \f(CW@options\fR array is a list of name/value pairs that control the
attributes of the track.  The options are in turn passed to the
glyphs.  Each glyph has its own specialized subset of options, but
some are shared by all glyphs:
.Sp
.Vb 2
\&  Option      Description               Default
\&  \-\-\-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-               \-\-\-\-\-\-\-
\&
\&  \-glyph      Glyph to use              none
\&
\&  \-fgcolor    Foreground color          black
\&
\&  \-outlinecolor                         black
\&              Synonym for \-fgcolor
\&
\&  \-bgcolor    Background color          white
\&
\&  \-fillcolor  Interior color of filled  turquoise
\&              images
\&
\&  \-linewidth  Width of lines drawn by   1
\&                    glyph
\&
\&  \-height     Height of glyph           10
\&
\&  \-font       Glyph font                gdSmallFont
\&
\&  \-label      Whether to draw a label   false
\&
\&  \-bump       Bump direction            0
\&
\&  \-connect_groups                       false
\&              Connect groups by a
\&              dashed line (see below)
\&
\&  \-key        Show this track in the    undef
\&              key
.Ve
.Sp
Colors can be expressed in either of two ways: as symbolic names such
as \*(L"cyan\*(R" and as HTML-style #RRGGBB triples.  The symbolic names are
the 140 colors defined in the Netscape/Internet Explorer color cube,
and can be retrieved using the Ace::Graphics::Panel\->\fIcolor_names()\fR
method.
.Sp
The background color is used for the background color of the track
itself.  The foreground color controls the color of lines and strings.
The interior color is used for filled objects such as boxes.
.Sp
The \-label argument controls whether or not the \s-1ID\s0 of the feature
should be printed next to the feature.  It is accepted by most, but
not all of the glyphs.
.Sp
The \-bump argument controls what happens when glyphs collide.  By
default, they will simply overlap (value 0).  A \-bump value of +1 will
cause overlapping glyphs to bump downwards until there is room for
them.  A \-bump value of \-1 will cause overlapping glyphs to bump
upwards.
.Sp
The \-key argument declares that the track is to be shown in a key
appended to the bottom of the image.  The key contains a picture of a
glyph and a label describing what the glyph means.  The label is
specified in the argument to \-key.
.Sp
If present, the \-glyph argument overrides the glyph given in the first
or second argument.
.Sp
\&\fIadd_track()\fR returns an Ace::Graphics::Track object.  You can use this
object to add additional features or to control the appearance of the
track with greater detail, or just ignore it.  Tracks are added in
order from the top of the image to the bottom.  To add tracks to the
top of the image, use \fIunshift_track()\fR.
.Sp
Typical usage is:
.Sp
.Vb 6
\& $panel\->add_track( thistle    => \e@genes,
\&                    \-fillcolor =>  \*(Aqgreen\*(Aq,
\&                    \-fgcolor   =>  \*(Aqblack\*(Aq,
\&                    \-bump      =>  +1,
\&                    \-height    => 10,
\&                    \-label     => 1);
.Ve
.ie n .IP "$track = unshift_track($glyph,$features,@options)" 4
.el .IP "\f(CW$track\fR = unshift_track($glyph,$features,@options)" 4
.IX Item "$track = unshift_track($glyph,$features,@options)"
\&\fIunshift_track()\fR works like \fIadd_track()\fR, except that the new track is
added to the top of the image rather than the bottom.
.Sp
\&\fBAdding groups of features:\fR It is not uncommon to add a group of
features which are logically connected, such as the 5' and 3' ends of
\&\s-1EST\s0 reads.  To group features into sets that remain on the same
horizontal position and bump together, pass the sets as an anonymous
array.  To connect the groups by a dashed line, pass the
\&\-connect_groups argument with a true value.  For example:
.Sp
.Vb 4
\&  $panel\->add_track(segments => [[$abc_5,$abc_3],
\&                                 [$xxx_5,$xxx_3],
\&                                 [$yyy_5,$yyy_3]],
\&                    \-connect_groups => 1);
.Ve
.ie n .IP "$gd = $panel\->gd" 4
.el .IP "\f(CW$gd\fR = \f(CW$panel\fR\->gd" 4
.IX Item "$gd = $panel->gd"
The \fIgd()\fR method lays out the image and returns a GD::Image object
containing it.  You may then call the GD::Image object's \fIpng()\fR or
\&\fIjpeg()\fR methods to get the image data.
.ie n .IP "$png = $panel\->png" 4
.el .IP "\f(CW$png\fR = \f(CW$panel\fR\->png" 4
.IX Item "$png = $panel->png"
The \fIpng()\fR method returns the image as a PNG-format drawing, without
the intermediate step of returning a GD::Image object.
.ie n .IP "$boxes = $panel\->boxes" 4
.el .IP "\f(CW$boxes\fR = \f(CW$panel\fR\->boxes" 4
.IX Item "$boxes = $panel->boxes"
.PD 0
.ie n .IP "@boxes = $panel\->boxes" 4
.el .IP "\f(CW@boxes\fR = \f(CW$panel\fR\->boxes" 4
.IX Item "@boxes = $panel->boxes"
.PD
The \fIboxes()\fR method returns the coordinates of each glyph, useful for
constructing an image map.  In a scalar context, \fIboxes()\fR returns an
array ref.  In an list context, the method returns the array directly.
.Sp
Each member of the list is an anonymous array of the following format:
.Sp
.Vb 1
\&  [ $feature, $x1, $y1, $x2, $y2 ]
.Ve
.Sp
The first element is the feature object; either an
Ace::Sequence::Feature, a Das::Segment::Feature, or another Bioperl
Bio::SeqFeatureI object.  The coordinates are the topleft and
bottomright corners of the glyph, including any space allocated for
labels.
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
The following accessor methods provide access to various attributes of
the panel object.  Called with no arguments, they each return the
current value of the attribute.  Called with a single argument, they
set the attribute and return its previous value.
.PP
Note that in most cases you must change attributes prior to invoking
\&\fIgd()\fR, \fIpng()\fR or \fIboxes()\fR.  These three methods all invoke an internal
\&\fIlayout()\fR method which places the tracks and the glyphs within them,
and then caches the result.
.PP
.Vb 2
\&   Accessor Name      Description
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-
\&
\&   width()            Get/set width of panel
\&   spacing()          Get/set spacing between tracks
\&   length()           Get/set length of segment (bp)
\&   pad_top()          Get/set top padding
\&   pad_left()         Get/set left padding
\&   pad_bottom()       Get/set bottom padding
\&   pad_right()        Get/set right padding
.Ve
.SS "\s-1INTERNAL METHODS\s0"
.IX Subsection "INTERNAL METHODS"
The following methods are used internally, but may be useful for those
implementing new glyph types.
.ie n .IP "@names = Ace::Graphics::Panel\->color_names" 4
.el .IP "\f(CW@names\fR = Ace::Graphics::Panel\->color_names" 4
.IX Item "@names = Ace::Graphics::Panel->color_names"
Return the symbolic names of the colors recognized by the panel
object.  In a scalar context, returns an array reference.
.ie n .IP "@rgb = $panel\->rgb($index)" 4
.el .IP "\f(CW@rgb\fR = \f(CW$panel\fR\->rgb($index)" 4
.IX Item "@rgb = $panel->rgb($index)"
Given a \s-1GD\s0 color index (between 0 and 140), returns the \s-1RGB\s0 triplet
corresponding to this index.  This method is only useful within a
glyph's \fIdraw()\fR routine, after the panel has allocated a GD::Image and
is populating it.
.ie n .IP "$index = $panel\->translate($color)" 4
.el .IP "\f(CW$index\fR = \f(CW$panel\fR\->translate($color)" 4
.IX Item "$index = $panel->translate($color)"
Given a color, returns the GD::Image index.  The color may be
symbolic, such as \*(L"turquoise\*(R", or a #RRGGBB triple, as in #F0E0A8.
This method is only useful within a glyph's \fIdraw()\fR routine, after the
panel has allocated a GD::Image and is populating it.
.ie n .IP "$panel\->set_pen($width,$color)" 4
.el .IP "\f(CW$panel\fR\->set_pen($width,$color)" 4
.IX Item "$panel->set_pen($width,$color)"
Changes the width and color of the \s-1GD\s0 drawing pen to the values
indicated.  This is called automatically by the GlyphFactory \fIfgcolor()\fR
method.
.SH "BUGS"
.IX Header "BUGS"
Please report them.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ace::Sequence,Ace::Sequence::Feature,
Ace::Graphics::Track,Ace::Graphics::Glyph,
\&\s-1GD\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
.PP
Copyright (c) 2001 Cold Spring Harbor Laboratory
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
