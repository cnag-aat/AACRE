.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Spline 3"
.TH Spline 3 "2013-05-16" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&    Math::Spline  \- Cubic Spline Interpolation of data
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Math::Spline;
\&    $spline = Math::Spline\->new(\e@x,\e@y)
\&    $y_interp=$spline\->evaluate($x);
\&
\&    use Math::Spline qw(spline linsearch binsearch);
\&    use Math::Derivative qw(Derivative2);
\&    @y2=Derivative2(\e@x,\e@y);
\&    $index=binsearch(\e@x,$x);
\&    $index=linsearch(\e@x,$x,$index);
\&    $y_interp=spline(\e@x,\e@y,\e@y2,$index,$x);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides cubic spline interpolation of numeric data. The
data is passed as references to two arrays containing the x and y
ordinates. It may be used as an exporter of the numerical functions
or, more easily as a class module.
.PP
The \fBMath::Spline\fR class constructor \fBnew\fR takes references to the
arrays of x and y ordinates of the data. An interpolation is performed
using the \fBevaluate\fR method, which, when given an x ordinate returns
the interpolate y ordinate at that value.
.PP
The \fBspline\fR function takes as arguments references to the x and y
ordinate array, a reference to the 2nd derivatives (calculated using
\&\fBDerivative2\fR, the low index of the interval in which to interpolate
and the x ordinate in that interval. Returned is the interpolated y
ordinate. Two functions are provided to look up the appropriate index
in the array of x data. For random calls \fBbinsearch\fR can be used \-
give a reference to the x ordinates and the x loopup value it returns
the low index of the interval in the data in which the value
lies. Where the lookups are strictly in ascending sequence (e.g. if
interpolating to produce a higher resolution data set to draw a curve)
the \fBlinsearch\fR function may more efficiently be used. It performs
like \fBbinsearch\fR, but requires a third argument being the previous
index value, which is incremented if necessary.
.SH "NOTE"
.IX Header "NOTE"
requires Math::Derivative module
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 5
\&    require Math::Spline;
\&    my @x=(1,3,8,10);
\&    my @y=(1,2,3,4);                                                
\&    $spline = Math::Spline\->new(\e@x,\e@y);
\&    print $spline\->evaluate(5)."\en";
.Ve
.PP
produces the output
.PP
2.44
.SH "HISTORY"
.IX Header "HISTORY"
\&\f(CW$Log:\fR Spline.pm,v $
Revision 1.1  1995/12/26 17:28:17  willijar
Initial revision
.SH "BUGS"
.IX Header "BUGS"
Bug reports or constructive comments are welcome.
.SH "AUTHOR"
.IX Header "AUTHOR"
John A.R. Williams <J.A.R.Williams@aston.ac.uk>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"Numerical Recipies: The Art of Scientific Computing\*(R"
W.H. Press, B.P. Flannery, S.A. Teukolsky, W.T. Vetterling.
Cambridge University Press. \s-1ISBN 0 521 30811 9.\s0
