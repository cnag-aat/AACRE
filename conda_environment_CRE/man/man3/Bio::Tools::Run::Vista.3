.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Vista 3"
.TH Bio::Tools::Run::Vista 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Vista
.PP
Wrapper for Vista
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Bio::Tools::Run::Vista;
\&  use Bio::Tools::Run::Alignment::Lagan;
\&  use Bio::AlignIO;
\&
\&  my $sio = Bio::SeqIO\->new(\-file=>$ARGV[0],\-format=>\*(Aqgenbank\*(Aq);
\&  my @seq;
\&  my $reference = $sio\->next_seq;
\&  push @seq, $reference;
\&  while(my $seq = $sio\->next_seq){
\&    push @seq,$seq;
\&  }
\&  my @features = grep{$_\->primary_tag eq \*(AqCDS\*(Aq} $reference\->get_SeqFeatures;
\&
\&  my $lagan = Bio::Tools::Run::Alignment::Lagan\->new;
\&
\&  my $aln = $lagan\->mlagan(\e@seq,\*(Aq(fugu (mouse human))\*(Aq);
\&
\&
\&  my $vis = Bio::Tools::Run::Vista\->new(\*(Aqoutfile\*(Aq=>"outfile.pdf",
\&                                        \*(Aqtitle\*(Aq => "My Vista Plot",
\&                                        \*(Aqannotation\*(Aq=>\e@features,
\&                                        \*(Aqannotation_format\*(Aq=>\*(AqGFF\*(Aq,
\&                                        \*(Aqmin_perc_id\*(Aq=>75,
\&                                        \*(Aqmin_length\*(Aq=>100,
\&                                        \*(Aqplotmin\*(Aq   => 50,
\&                                        \*(Aqtickdist\*(Aq => 2000,
\&                                        \*(Aqwindow\*(Aq=>40,
\&                                        \*(Aqnumwindows\*(Aq=>4,
\&                                        \*(Aqstart\*(Aq=>50,
\&                                        \*(Aqend\*(Aq=>1500,
\&                                        \*(Aqtickdist\*(Aq=>100,
\&                                        \*(Aqbases\*(Aq=>1000,
\&                                        \*(Aqjava_param\*(Aq=>"\-Xmx128m",
\&                                        \*(Aqnum_pages\*(Aq=>1,
\&                                        \*(Aqcolor\*(Aq=> {\*(AqEXON\*(Aq=>\*(Aq100 0 0\*(Aq,
\&                                                   \*(AqCNS\*(Aq=>\*(Aq0 0 100\*(Aq},
\&                                        \*(Aqquiet\*(Aq=>1);
\&
\&  my $referenceid= \*(Aqhuman\*(Aq;
\&  $vis\->run($aln,$referenceid); 
\&
\&  #alternative one can choose pairwise alignments to plot
\&  #where the second id in each pair is the reference sequence
\&  $vis\->run($aln,([mouse,human],[fugu,human],[mouse,fugu]));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Pls see Vista documentation for plotfile options
.PP
Wrapper for Vista :
.PP
C. Mayor, M. Brudno, J. R. Schwartz, A. Poliakov, E. M. Rubin, K. A.  Frazer, 
L. S. Pachter, I. Dubchak. 
\&\s-1VISTA:\s0 Visualizing global \s-1DNA\s0  sequence alignments of arbitrary length.
Bioinformatics, 2000  Nov;16(11):1046\-1047.
Get it here:
http://www\-gsd.lbl.gov/vista/VISTAdownload2.html
.PP
On the command line, it is assumed that this can be executed:
.PP
java Vista plotfile
.PP
Some of the code was adapted from \s-1MLAGAN\s0 toolkit
.PP
M. Brudno,  C.B. Do,  G. Cooper,  M.F. Kim,  E. Davydov,  \s-1NISC\s0 Sequencing Consortium, 
E.D. Green,  A. Sidow and S. Batzoglou 
\&\s-1LAGAN\s0 and Multi-LAGAN: Efficient Tools for Large-Scale Multiple  Alignment of Genomic 
\&\s-1DNA,\s0 Genome Research, in press
.PP
get lagan here:
.PP
http://lagan.stanford.edu/
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Shawn Hoon
Email shawnh@fugu\-sg.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\&    Title   :   new
\&    Usage   :   my $vis = Bio::Tools::Run::Vista\->new(\*(Aqoutfile\*(Aq=>$out,
\&                                        \*(Aqtitle\*(Aq => "My Vista Plot",
\&                                        \*(Aqannotation\*(Aq=>\e@features,
\&                                        \*(Aqannotation_format\*(Aq=>\*(AqGFF\*(Aq,
\&                                        \*(Aqmin_perc_id\*(Aq=>75,
\&                                        \*(Aqmin_length\*(Aq=>100,
\&                                        \*(Aqplotmin\*(Aq   => 50,
\&                                        \*(Aqtickdist\*(Aq => 2000,
\&                                        \*(Aqwindow\*(Aq=>40,
\&                                        \*(Aqnumwindows\*(Aq=>4,
\&                                        \*(Aqstart\*(Aq=>50,
\&                                        \*(Aqend\*(Aq=>1500,
\&                                        \*(Aqtickdist\*(Aq=>100,
\&                                        \*(Aqbases\*(Aq=>1000,
\&                                        \*(Aqcolor\*(Aq=> {\*(AqEXON\*(Aq=>\*(Aq100 0 0\*(Aq,
\&                                                   \*(AqCNS\*(Aq=>\*(Aq0 0 100\*(Aq},
\&                                        \*(Aqquiet\*(Aq=>1);
\&    Function:   Construtor for Vista wrapper
\&    Args    :   outfile \- location of the pdf generated
\&                annotation \- either a file or and array ref of Bio::SeqFeatureI
\&                             indicating the exons 
\&                regmin     \-region min
.Ve
.SS "java"
.IX Subsection "java"
.Vb 4
\&    Title   :   java
\&    Usage   :   $obj\->java(\*(Aq/usr/opt/java130/bin/java\*(Aq);
\&    Function:   Get/set method for the location of java VM
\&    Args    :   File path (optional)
.Ve
.SS "run"
.IX Subsection "run"
.Vb 8
\& Title   : run
\& Usage   : my @genes = $self\->run($seq)
\& Function: runs Vista 
\& Returns : A boolean 1 if no errors 
\& Args    : Argument 1: Bio::Align::Align required
\&           Argument 2: a string or number, which is the sequence id of the
\&                       reference sequence or the rank of the sequence
\&                       in the alignment
.Ve
.SS "_setinput"
.IX Subsection "_setinput"
.Vb 6
\& Title   : _setinput
\& Usage   : Internal function, not to be called directly
\& Function: writes input sequence to file and return the file name
\& Example :
\& Returns : string
\& Args    :
.Ve
.SS "outfile"
.IX Subsection "outfile"
.Vb 4
\&  Title    : outfile
\&  Usage    : $obj\->outfile
\&  Function : Get/Set method outfile
\&  Args     :
.Ve
.SS "min_perc_id"
.IX Subsection "min_perc_id"
.Vb 4
\&  Title    : min_perc_id
\&  Usage    : $obj\->min_perc_id
\&  Function : Get/Set method min_perc_id
\&  Args     :
.Ve
.SS "quiet"
.IX Subsection "quiet"
.Vb 4
\&  Title    : quiet
\&  Usage    : $obj\->quiet
\&  Function : Get/Set method quiet
\&  Args     :
.Ve
.SS "verbose"
.IX Subsection "verbose"
.Vb 4
\&  Title    : verbose
\&  Usage    : $obj\->verbose
\&  Function : Get/Set method verbose
\&  Args     :
.Ve
.SS "annotation_format"
.IX Subsection "annotation_format"
.Vb 4
\&  Title    : annotation_format
\&  Usage    : $obj\->annotation_format
\&  Function : Get/Set method annotation_format
\&  Args     :
.Ve
.SS "region_file"
.IX Subsection "region_file"
.Vb 4
\&  Title    : region_file
\&  Usage    : $obj\->region_file
\&  Function : Get/Set method region_file
\&  Args     :
.Ve
.SS "score_file"
.IX Subsection "score_file"
.Vb 4
\&  Title    : score_file
\&  Usage    : $obj\->score_file
\&  Function : Get/Set method score_file
\&  Args     :
.Ve
.SS "alignment_file"
.IX Subsection "alignment_file"
.Vb 4
\&  Title    : alignment_file
\&  Usage    : $obj\->alignment_file
\&  Function : Get/Set method alignment_file
\&  Args     :
.Ve
.SS "contigs_file"
.IX Subsection "contigs_file"
.Vb 4
\&  Title    : contigs_file
\&  Usage    : $obj\->contigs_file
\&  Function : Get/Set method contigs_file
\&  Args     :
.Ve
.SS "diffs"
.IX Subsection "diffs"
.Vb 4
\&  Title    : diffs
\&  Usage    : $obj\->diffs
\&  Function : Get/Set method diffs
\&  Args     :
.Ve
.SS "plotfile"
.IX Subsection "plotfile"
.Vb 4
\&  Title    : plotfile
\&  Usage    : $obj\->plotfile
\&  Function : Get/Set method plotfile
\&  Args     :
.Ve
.SS "min_length"
.IX Subsection "min_length"
.Vb 4
\&  Title    : min_length
\&  Usage    : $obj\->min_length
\&  Function : Get/Set method min_length
\&  Args     :
.Ve
.SS "plotmin"
.IX Subsection "plotmin"
.Vb 4
\&  Title    : plotmin
\&  Usage    : $obj\->plotmin
\&  Function : Get/Set method plotmin
\&  Args     :
.Ve
.SS "annotation"
.IX Subsection "annotation"
.Vb 4
\&  Title    : annotation
\&  Usage    : $obj\->annotation
\&  Function : Get/Set method annotation
\&  Args     :
.Ve
.SS "bases"
.IX Subsection "bases"
.Vb 4
\&  Title    : bases
\&  Usage    : $obj\->bases
\&  Function : Get/Set method bases
\&  Args     :
.Ve
.SS "tickdist"
.IX Subsection "tickdist"
.Vb 4
\&  Title    : tickdist
\&  Usage    : $obj\->tickdist
\&  Function : Get/Set method tickdist
\&  Args     :
.Ve
.SS "resolution"
.IX Subsection "resolution"
.Vb 4
\&  Title    : resolution
\&  Usage    : $obj\->resolution
\&  Function : Get/Set method resolution
\&  Args     :
.Ve
.SS "title"
.IX Subsection "title"
.Vb 4
\&  Title    : title
\&  Usage    : $obj\->title
\&  Function : Get/Set method title
\&  Args     :
.Ve
.SS "window"
.IX Subsection "window"
.Vb 4
\&  Title    : window
\&  Usage    : $obj\->window
\&  Function : Get/Set method window
\&  Args     :
.Ve
.SS "numwindows"
.IX Subsection "numwindows"
.Vb 4
\&  Title    : numwindows
\&  Usage    : $obj\->numwindows
\&  Function : Get/Set method numwindows
\&  Args     :
.Ve
.SS "start"
.IX Subsection "start"
.Vb 4
\&  Title    : start
\&  Usage    : $obj\->start
\&  Function : Get/Set method start
\&  Args     :
.Ve
.SS "end"
.IX Subsection "end"
.Vb 4
\&  Title    : end
\&  Usage    : $obj\->end
\&  Function : Get/Set method end
\&  Args     :
.Ve
.SS "num_plot_lines"
.IX Subsection "num_plot_lines"
.Vb 4
\&  Title    : num_plot_lines
\&  Usage    : $obj\->num_plot_lines
\&  Function : Get/Set method num_plot_lines
\&  Args     :
.Ve
.SS "legend"
.IX Subsection "legend"
.Vb 4
\&  Title    : legend
\&  Usage    : $obj\->legend
\&  Function : Get/Set method legend
\&  Args     :
.Ve
.SS "filename"
.IX Subsection "filename"
.Vb 4
\&  Title    : filename
\&  Usage    : $obj\->filename
\&  Function : Get/Set method filename
\&  Args     :
.Ve
.SS "axis_label"
.IX Subsection "axis_label"
.Vb 4
\&  Title    : axis_label
\&  Usage    : $obj\->axis_label
\&  Function : Get/Set method axis_label
\&  Args     :
.Ve
.SS "ticks_file"
.IX Subsection "ticks_file"
.Vb 4
\&  Title    : ticks_file
\&  Usage    : $obj\->ticks_file
\&  Function : Get/Set method ticks_file
\&  Args     :
.Ve
.SS "color"
.IX Subsection "color"
.Vb 4
\&  Title    : color
\&  Usage    : $obj\->color
\&  Function : Get/Set method color
\&  Args     :
.Ve
.SS "use_order"
.IX Subsection "use_order"
.Vb 4
\&  Title    : use_order
\&  Usage    : $obj\->use_order
\&  Function : Get/Set method use_order
\&  Args     :
.Ve
.SS "gaps"
.IX Subsection "gaps"
.Vb 4
\&  Title    : gaps
\&  Usage    : $obj\->gaps
\&  Function : Get/Set method gaps
\&  Args     :
.Ve
.SS "snps_file"
.IX Subsection "snps_file"
.Vb 4
\&  Title    : snps_file
\&  Usage    : $obj\->snps_file
\&  Function : Get/Set method snps_file
\&  Args     :
.Ve
.SS "repeats_file"
.IX Subsection "repeats_file"
.Vb 4
\&  Title    : repeats_file
\&  Usage    : $obj\->repeats_file
\&  Function : Get/Set method repeats_file
\&  Args     :
.Ve
.SS "filter_repeats"
.IX Subsection "filter_repeats"
.Vb 4
\&  Title    : filter_repeats
\&  Usage    : $obj\->filter_repeats
\&  Function : Get/Set method filter_repeats
\&  Args     :
.Ve
