.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Graph::TransitiveClosure 3"
.TH Graph::TransitiveClosure 3 "2015-09-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Graph::TransitiveClosure \- create and query transitive closure of graph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Graph::TransitiveClosure;
\&    use Graph::Directed; # or Undirected
\&
\&    my $g  = Graph::Directed\->new;
\&    $g\->add_...(); # build $g
\&
\&    # Compute the transitive closure graph.
\&    my $tcg = Graph::TransitiveClosure\->new($g);
\&    $tcg\->is_reachable($u, $v) # Identical to $tcg\->has_edge($u, $v)
\&
\&    # Being reflexive is the default, meaning that null transitions
\&    # (transitions from a vertex to the same vertex) are included.
\&    my $tcg = Graph::TransitiveClosure\->new($g, reflexive => 1);
\&    my $tcg = Graph::TransitiveClosure\->new($g, reflexive => 0);
\&
\&    # is_reachable(u, v) is always reflexive.
\&    $tcg\->is_reachable($u, $v)
\&
\&    # You can check any graph for transitivity.
\&    $g\->is_transitive()
\&
\&    my $tcg = Graph::TransitiveClosure\->new($g, path_length => 1);
\&    $tcg\->path_length($u, $v)
\&
\&    # path_vertices is automatically always on so this is a no\-op.
\&    my $tcg = Graph::TransitiveClosure\->new($g, path_vertices => 1);
\&    $tcg\->path_vertices($u, $v)
\&
\&    # Both path_length and path_vertices.
\&    my $tcg = Graph::TransitiveClosure\->new($g, path => 1);
\&    $tcg\->path_vertices($u, $v)
\&    $tcg\->length($u, $v)
\&
\&    my $tcg = Graph::TransitiveClosure\->new($g, attribute_name => \*(Aqlength\*(Aq);
\&    $tcg\->path_length($u, $v)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You can use \f(CW\*(C`Graph::TransitiveClosure\*(C'\fR to compute the transitive
closure graph of a graph and optionally also the minimum paths
(lengths and vertices) between vertices, and after that query the
transitiveness between vertices by using the \f(CW\*(C`is_reachable()\*(C'\fR and
\&\f(CW\*(C`is_transitive()\*(C'\fR methods, and the paths by using the
\&\f(CW\*(C`path_length()\*(C'\fR and \f(CW\*(C`path_vertices()\*(C'\fR methods.
.PP
For further documentation, see the Graph::TransitiveClosure::Matrix.
.SS "Class Methods"
.IX Subsection "Class Methods"
.ie n .IP "new($g, %opt)" 4
.el .IP "new($g, \f(CW%opt\fR)" 4
.IX Item "new($g, %opt)"
Construct a new transitive closure object.  Note that strictly speaking
the returned object is not a graph; it is a graph plus other stuff.  But
you should be able to use it as a graph plus a couple of methods inherited
from the Graph::TransitiveClosure::Matrix class.
.SS "Object Methods"
.IX Subsection "Object Methods"
These are only the methods 'native' to the class: see
Graph::TransitiveClosure::Matrix for more.
.IP "is_transitive($g)" 4
.IX Item "is_transitive($g)"
Return true if the Graph \f(CW$g\fR is transitive.
.IP "transitive_closure_matrix" 4
.IX Item "transitive_closure_matrix"
Return the transitive closure matrix of the transitive closure object.
.SS "\s-1INTERNALS\s0"
.IX Subsection "INTERNALS"
The transitive closure matrix is stored as an attribute of the graph
called \f(CW\*(C`_tcm\*(C'\fR, and any methods not found in the graph class are searched
in the transitive closure matrix class.
