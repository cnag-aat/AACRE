.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Set 3"
.TH Bio::Phylo::Set 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Set \- Subset of the parts inside a container
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\& 
\& my $forest = $fac\->create_forest;
\& my $tree = $fac\->create_tree;
\& $forest\->insert($tree);
\& 
\& my $set = $fac\->create_set( \-name => \*(AqTreeSet1\*(Aq );
\& $forest\->add_set($set);
\& $forest\->add_to_set($tree,$set); # $tree is now part of TreeSet1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Many Bio::Phylo objects are segmented: they contain one or more subparts 
of the same type. For example, a matrix contains multiple rows; each row 
contains multiple cells; a tree contains nodes, and so on. Segmented objects
all inherit from Bio::Phylo::Listable. In many cases it is useful to be
able to define subsets of the contents of segmented objects, for example
sets of taxon objects inside a taxa block. The Bio::Phylo::Listable object
allows this through a number of methods (add_set, remove_set, add_to_set,
remove_from_set and so on). Those methods delegate the actual management of the set
contents to the Bio::Phylo::Set object, the class whose documentation you're
reading now. Consult the documentation for \*(L"\s-1SETS MANAGEMENT\*(R"\s0 in Bio::Phylo::Listable 
for more information on how to use this feature.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 12
\& Type    : Constructor
\& Title   : new
\& Usage   : my $anno = Bio::Phylo::Set\->new;
\& Function: Initializes a Bio::Phylo::Set object.
\& Returns : A Bio::Phylo::Set object.
\& Args    : optional constructor arguments are key/value
\&                   pairs where the key corresponds with any of
\&                   the methods that starts with set_ (i.e. mutators) 
\&                   and the value is the permitted argument for such 
\&                   a method. The method name is changed such that,
\&                   in order to access the set_value($val) method
\&                   in the constructor, you would pass \-value => $val
.Ve
.SS "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIcan_contain()\fR" 4
.IX Item "can_contain()"
Tests if argument can be inserted in invocant.
.Sp
.Vb 6
\& Type    : Test
\& Title   : can_contain
\& Usage   : &do_something if $listable\->can_contain( $obj );
\& Function: Tests if $obj can be inserted in $listable
\& Returns : BOOL
\& Args    : An $obj to test
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.PP
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.PP
Consult the documentation for \*(L"\s-1SETS MANAGEMENT\*(R"\s0 in Bio::Phylo::Listable for more info 
on how to define subsets of the contents of segmented objects.
.SS "Superclasses"
.IX Subsection "Superclasses"
.IP "Bio::Phylo::Listable" 4
.IX Item "Bio::Phylo::Listable"
This object inherits from Bio::Phylo::Listable, so methods
defined there are also applicable here.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
