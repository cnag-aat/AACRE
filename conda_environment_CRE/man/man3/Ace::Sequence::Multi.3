.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Ace::Sequence::Multi 3"
.TH Ace::Sequence::Multi 3 "2001-04-07" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Ace::Sequence::Multi \- Combine Feature Tables from Multiple Databases
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Ace::Sequence::Multi;
\&
\&    # open reference database
\&    $ref = Ace\->connect(\-host=>\*(Aqstein.cshl.org\*(Aq,\-port=>200009);
\&
\&    # open some secondary databases
\&    $db1 = Ace\->connect(\-host=>\*(Aqstein.cshl.org\*(Aq,\-port=>200010);
\&    $db2 = Ace\->connect(\-path=>\*(Aq/usr/local/acedb/mydata\*(Aq);
\&
\&    # Make an Ace::Sequence::Multi object
\&    $seq = Ace::Sequence::Multi\->new(\-name   => \*(AqCHROMOSOME_I,
\&                                     \-db     => $ref,
\&                                     \-offset => 3_000_000,
\&                                     \-length => 1_000_000);
\&
\&    # add the secondary databases
\&    $seq\->add_secondary($db1,$db2);
\&
\&    # get all the homologies (a list of Ace::Sequence::Feature objs)
\&    @homol = $seq\->features(\*(AqSimilarity\*(Aq);
\&
\&    # Get information about the first one \-\- goes to the correct db
\&    $feature = $homol[0];
\&    $type    = $feature\->type;
\&    $subtype = $feature\->subtype;
\&    $start   = $feature\->start;
\&    $end     = $feature\->end;
\&    $score   = $feature\->score;
\&
\&    # Follow the target
\&    $target  = $feature\->info;
\&
\&    # print the target\*(Aqs start and end positions
\&    print $target\->start,\*(Aq\-\*(Aq,$target\->end, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIAce::Sequence::Multi\fR transparently combines information stored
about a sequence in a reference database with features tables from any 
number of annotation databases.  The resulting object can be used just 
like an Ace::Sequence object, except that the features remember their
database of origin and go back to that database for information.
.PP
This class will only work properly if the reference database and all
annotation databases share the same cosmid map.
.SH "OBJECT CREATION"
.IX Header "OBJECT CREATION"
You will use the \fInew()\fR method to create new Ace::Sequence::Multi
objects.  The arguments are identical to the those in the
Ace::Sequence parent class, with the addition of an option
\&\fB\-secondary\fR argument, which points to one or more secondary databases 
from which to fetch annotation information.
.IP "\-source" 4
.IX Item "-source"
The sequence source.  This must be an \fIAce::Object\fR of the \*(L"Sequence\*(R" 
class, or be a sequence-like object containing the SMap tag (see
below).
.IP "\-offset" 4
.IX Item "-offset"
An offset from the beginning of the source sequence.  The retrieved
\&\fIAce::Sequence\fR will begin at this position.  The offset can be any
positive or negative integer.  Offets are \fB0\-based\fR.
.IP "\-length" 4
.IX Item "-length"
The length of the sequence to return.  Either a positive or negative
integer can be specified.  If a negative length is given, the returned 
sequence will be complemented relative to the source sequence.
.IP "\-refseq" 4
.IX Item "-refseq"
The sequence to use to establish the coordinate system for the
returned sequence.  Normally the source sequence is used to establish
the coordinate system, but this can be used to override that choice.
You can provide either an \fIAce::Object\fR or just a sequence name for
this argument.  The source and reference sequences must share a common
ancestor, but do not have to be directly related.  An attempt to use a
disjunct reference sequence, such as one on a different chromosome,
will fail.
.IP "\-name" 4
.IX Item "-name"
As an alternative to using an \fIAce::Object\fR with the \fB\-source\fR
argument, you may specify a source sequence using \fB\-name\fR and \fB\-db\fR.
The \fIAce::Sequence\fR module will use the provided database accessor to
fetch a Sequence object with the specified name. \fInew()\fR will return
undef is no Sequence by this name is known.
.IP "\-db" 4
.IX Item "-db"
This argument is required if the source sequence is specified by name
rather than by object reference.  It must be a previously opened
handle to the reference database.
.IP "\-secondary" 4
.IX Item "-secondary"
This argument points to one or more previously-opened annotation
databases.  You may use a scalar if there is only one annotation
database.  Otherwise, use an array reference.  You may add and delete
annotation databases after the object is created by using the
\&\fIadd_secondary()\fR and \fIdelete_secondary()\fR methods.
.PP
If \fInew()\fR is successful, it will create an \fIAce::Sequence::Multi\fR
object and return it.  Otherwise it will return undef and return a
descriptive message in Ace\->\fIerror()\fR.  Certain programming errors, such
as a failure to provide required arguments, cause a fatal error.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
Most methods are inherited from \fIAce::Sequence\fR.  The following
additional methods are supported:
.IP "\fIsecondary()\fR" 4
.IX Item "secondary()"
.Vb 1
\&  @databases = $seq\->secondary;
.Ve
.Sp
Return a list of the secondary databases currently in use, or an empty 
list if none.
.IP "\fIadd_secondary()\fR" 4
.IX Item "add_secondary()"
.Vb 1
\&  $seq\->add_secondary($db1,$db2,...)
.Ve
.Sp
Add one or more secondary databases to the list of annotation
databases.  Duplicate databases will be silently ignored.
.IP "\fIdelete_secondary()\fR" 4
.IX Item "delete_secondary()"
.Vb 1
\&  $seq\->delete_secondary($db1,$db2,...)
.Ve
.Sp
Delete one or more secondary databases from the list of annotation
databases.  Databases not already in use will be silently ignored.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ace, Ace::Object, Ace::Sequence,Ace::Sequence::Homol,
Ace::Sequence::FeatureList, Ace::Sequence::Feature, \s-1GFF\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@w3.org> with extensive help from Jean
Thierry-Mieg <mieg@kaa.crbm.cnrs\-mop.fr>
.PP
Copyright (c) 1999, Lincoln D. Stein
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
