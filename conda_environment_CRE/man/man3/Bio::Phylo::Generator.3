.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Generator 3"
.TH Bio::Phylo::Generator 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Generator \- Generator of tree topologies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\& my $gen = $fac\->create_generator;
\& my $trees = $gen\->gen_rand_pure_birth( 
\&     \*(Aq\-tips\*(Aq  => 10, 
\&     \*(Aq\-model\*(Aq => \*(Aqyule\*(Aq,
\&     \*(Aq\-trees\*(Aq => 10,
\& );
\&
\& # prints \*(AqBio::Phylo::Forest\*(Aq
\& print ref $trees;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The generator module is used to simulate trees under various models.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Generator constructor.
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : my $gen = Bio::Phylo::Generator\->new;
\& Function: Initializes a Bio::Phylo::Generator object.
\& Returns : A Bio::Phylo::Generator object.
\& Args    : NONE
.Ve
.SS "\s-1GENERATOR\s0"
.IX Subsection "GENERATOR"
.IP "\fIgen_rand_pure_birth()\fR" 4
.IX Item "gen_rand_pure_birth()"
This method generates a Bio::Phylo::Forest 
object populated with Yule/Hey trees.
.Sp
.Vb 10
\& Type    : Generator
\& Title   : gen_rand_pure_birth
\& Usage   : my $trees = $gen\->gen_rand_pure_birth(
\&               \*(Aq\-tips\*(Aq  => 10, 
\&               \*(Aq\-model\*(Aq => \*(Aqyule\*(Aq,
\&               \*(Aq\-trees\*(Aq => 10,
\&           );
\& Function: Generates markov tree shapes, 
\&           with branch lengths sampled 
\&           from a user defined model of 
\&           clade growth, for a user defined
\&           number of tips.
\& Returns : A Bio::Phylo::Forest object.
\& Args    : \-tips  => number of terminal nodes (default: 10),
\&           \-model => either \*(Aqyule\*(Aq or \*(Aqhey\*(Aq,
\&           \-trees => number of trees to generate (default: 10)
\&           Optional: \-factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_rand_birth_death()\fR" 4
.IX Item "gen_rand_birth_death()"
This method generates a Bio::Phylo::Forest 
object populated under a birth/death model
.Sp
.Vb 10
\& Type    : Generator
\& Title   : gen_rand_birth_death
\& Usage   : my $trees = $gen\->gen_rand_birth_death(
\&               \*(Aq\-tips\*(Aq     => 10, 
\&               \*(Aq\-killrate\*(Aq => 0.2,
\&               \*(Aq\-trees\*(Aq    => 10,
\&           );
\& Function: Generates trees where any growing lineage is equally
\&           likely to split at any one time, and is equally likely
\&           to go extinct at \*(Aq\-killrate\*(Aq
\& Returns : A Bio::Phylo::Forest object.
\& Args    : \-tips  => number of terminal nodes (default: 10),
\&           \-killrate => extinction over speciation rate (default: 0.2)
\&           \-trees => number of trees to generate (default: 10)
\&           Optional: \-factory => a Bio::Phylo::Factory object
\& Comments: Past extinction events are retained as unbranched internal
\&           nodes in the produced trees.
.Ve
.IP "\fIgen_exp_pure_birth()\fR" 4
.IX Item "gen_exp_pure_birth()"
This method generates a Bio::Phylo::Forest object 
populated with Yule/Hey trees whose branch lengths 
are proportional to the expected waiting times (i.e. 
not sampled from a distribution).
.Sp
.Vb 10
\& Type    : Generator
\& Title   : gen_exp_pure_birth
\& Usage   : my $trees = $gen\->gen_exp_pure_birth(
\&               \*(Aq\-tips\*(Aq  => 10, 
\&               \*(Aq\-model\*(Aq => \*(Aqyule\*(Aq,
\&               \*(Aq\-trees\*(Aq => 10,
\&           );
\& Function: Generates markov tree shapes, 
\&           with branch lengths following 
\&           the expectation under a user 
\&           defined model of clade growth, 
\&           for a user defined number of tips.
\& Returns : A Bio::Phylo::Forest object.
\& Args    : \-tips  => number of terminal nodes (default: 10),
\&           \-model => either \*(Aqyule\*(Aq or \*(Aqhey\*(Aq
\&           \-trees => number of trees to generate (default: 10)
\&           Optional: \-factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_coalescent()\fR" 4
.IX Item "gen_coalescent()"
This method generates coalescent trees for a given effective population size
(popsize) and number of alleles (tips) such that the probability of coalescence
in the previous generation for any pair of alleles is 1 / ( 2 * popsize ).
.Sp
.Vb 10
\& Type    : Generator
\& Title   : gen_coalescent
\& Usage   : my $trees = $gen\->gen_coalescent(
\&               \*(Aq\-tips\*(Aq    => 10, 
\&               \*(Aq\-popsize\*(Aq => 100,
\&               \*(Aq\-trees\*(Aq   => 10,
\&           );
\& Function: Generates coalescent trees.
\& Returns : A Bio::Phylo::Forest object.
\& Args    : \-tips    => number of terminal nodes (default: 10)
\&           \-popsize => effective population size (default: 100)
\&           \-trees   => number of trees to generate (default: 10)
\&           Optional: \-factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_equiprobable()\fR" 4
.IX Item "gen_equiprobable()"
This method draws tree shapes at random, 
such that all shapes are equally probable.
.Sp
.Vb 9
\& Type    : Generator
\& Title   : gen_equiprobable
\& Usage   : my $trees = $gen\->gen_equiprobable( \*(Aq\-tips\*(Aq => 10 );
\& Function: Generates an equiprobable tree 
\&           shape, with branch lengths = 1;
\& Returns : A Bio::Phylo::Forest object.
\& Args    : Optional: \-tips  => number of terminal nodes (default: 10),
\&           Optional: \-trees => number of trees to generate (default: 1),
\&           Optional: \-factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_balanced()\fR" 4
.IX Item "gen_balanced()"
This method creates the most balanced topology possible given the number of tips
.Sp
.Vb 9
\& Type    : Generator
\& Title   : gen_balanced
\& Usage   : my $trees = $gen\->gen_balanced( \*(Aq\-tips\*(Aq  => 10 );
\& Function: Generates the most balanced topology
\&           possible, with branch lengths = 1;
\& Returns : A Bio::Phylo::Forest object.
\& Args    : Optional: \-tips  => number of terminal nodes (default: 10),
\&           Optional: \-trees => number of trees to generate (default: 1),
\&           Optional: \-factory => a Bio::Phylo::Factory object
.Ve
.IP "\fIgen_ladder()\fR" 4
.IX Item "gen_ladder()"
This method creates a ladder tree for the number of tips
.Sp
.Vb 9
\& Type    : Generator
\& Title   : gen_ladder
\& Usage   : my $trees = $gen\->gen_ladder( \*(Aq\-tips\*(Aq  => 10 );
\& Function: Generates the least balanced topology
\&           (a ladder), with branch lengths = 1;
\& Returns : A Bio::Phylo::Forest object.
\& Args    : Optional: \-tips  => number of terminal nodes (default: 10),
\&           Optional: \-trees => number of trees to generate (default: 1),
\&           Optional: \-factory => a Bio::Phylo::Factory object
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
