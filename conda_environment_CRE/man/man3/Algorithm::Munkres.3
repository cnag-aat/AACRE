.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Algorithm::Munkres 3"
.TH Algorithm::Munkres 3 "2008-10-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 5
\&    Algorithm::Munkres \- Perl extension for Munkres\*(Aq solution to 
\&    classical Assignment problem for square and rectangular matrices 
\&    This module extends the solution of Assignment problem for square
\&    matrices to rectangular matrices by padding zeros. Thus a rectangular 
\&    matrix is converted to square matrix by padding necessary zeros.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Algorithm::Munkres;
.PP
.Vb 5
\&    @mat = (
\&         [2, 4, 7, 9],
\&         [3, 9, 5, 1],
\&         [8, 2, 9, 7],
\&         );
.Ve
.PP
assign(\e@mat,\e@out_mat);
.PP
.Vb 6
\&    Then the @out_mat array will have the output as: (0,3,1,2),
\&    where 
\&    0th element indicates that 0th row is assigned 0th column i.e value=2
\&    1st element indicates that 1st row is assigned 3rd column i.e.value=1
\&    2nd element indicates that 2nd row is assigned 1st column.i.e.value=2
\&    3rd element indicates that 3rd row is assigned 2nd column.i.e.value=0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    Assignment Problem: Given N jobs, N workers and the time taken by 
\&    each worker to complete a job then how should the assignment of a 
\&    Worker to a Job be done, so as to minimize the time taken. 
\&
\&        Thus if we have 3 jobs p,q,r and 3 workers x,y,z such that:
\&            x  y  z             
\&         p  2  4  7
\&         q  3  9  5
\&         r  8  2  9
\&        
\&        where the cell values of the above matrix give the time required
\&        for the worker(given by column name) to complete the job(given by 
\&        the row name) 
\&    
\&        then possible solutions are:    
\&                         Total
\&         1. 2, 9, 9       20
\&         2. 2, 2, 5        9
\&         3. 3, 4, 9       16
\&         4. 3, 2, 7       12
\&         5. 8, 9, 7       24
\&         6. 8, 4, 5       17
\&
\&    Thus (2) is the optimal solution for the above problem.
\&    This kind of brute\-force approach of solving Assignment problem 
\&    quickly becomes slow and bulky as N grows, because the number of 
\&    possible solution are N! and thus the task is to evaluate each 
\&    and then find the optimal solution.(If N=10, number of possible
\&    solutions: 3628800 !)
\&    Munkres\*(Aq gives us a solution to this problem, which is implemented 
\&    in this module.
\&
\&    This module also solves Assignment problem for rectangular matrices 
\&    (M x N) by converting them to square matrices by padding zeros. ex:
\&    If input matrix is:
\&         [2, 4, 7, 9],
\&         [3, 9, 5, 1],
\&         [8, 2, 9, 7]
\&    i.e 3 x 4 then we will convert it to 4 x 4 and the modified input 
\&    matrix will be:
\&         [2, 4, 7, 9],
\&         [3, 9, 5, 1],
\&         [8, 2, 9, 7],
\&         [0, 0, 0, 0]
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.Vb 1
\&    "assign" function by default.
.Ve
.SH "INPUT"
.IX Header "INPUT"
.Vb 6
\&    The input matrix should be in a two dimensional array(array of 
\&    array) and the \*(Aqassign\*(Aq subroutine expects a reference to this 
\&    array and not the complete array. 
\&    eg:assign(\e@inp_mat, \e@out_mat);
\&    The second argument to the assign subroutine is the reference 
\&    to the output array.
.Ve
.SH "OUTPUT"
.IX Header "OUTPUT"
.Vb 8
\&    The assign subroutine expects references to two arrays as its 
\&    input paramenters. The second parameter is the reference to the
\&    output array. This array is populated by assign subroutine. This 
\&    array is single dimensional Nx1 matrix.
\&    For above example the output array returned will be:
\&     (0,
\&     2,
\&     1)
\&
\&    where 
\&    0th element indicates that 0th row is assigned 0th column i.e value=2
\&    1st element indicates that 1st row is assigned 2nd column i.e.value=5
\&    2nd element indicates that 2nd row is assigned 1st column.i.e.value=2
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&    1. http://216.249.163.93/bob.pilgrim/445/munkres.html
\&
\&    2. Munkres, J. Algorithms for the assignment and transportation 
\&       Problems. J. Siam 5 (Mar. 1957), 32\-38
\&
\&    3. François Bourgeois and Jean\-Claude Lassalle. 1971.
\&       An extension of the Munkres algorithm for the assignment 
\&       problem to rectangular matrices.
\&       Communication ACM, 14(12):802\-804
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&    Anagha Kulkarni, University of Minnesota Duluth
\&    kulka020 <at> d.umn.edu
\&        
\&    Ted Pedersen, University of Minnesota Duluth
\&    tpederse <at> d.umn.edu
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2007\-2008, Ted Pedersen and Anagha Kulkarni
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place \- Suite 330, Boston, \s-1MA\s0  02111\-1307, \s-1USA.\s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 566:" 4
.IX Item "Around line 566:"
Non-ASCII character seen before =encoding in 'François'. Assuming \s-1UTF\-8\s0
