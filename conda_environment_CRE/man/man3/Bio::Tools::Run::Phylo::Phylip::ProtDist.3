.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::Phylip::ProtDist 3"
.TH Bio::Tools::Run::Phylo::Phylip::ProtDist 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::Phylip::ProtDist \- Wrapper for the phylip
program protdist
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  #Create a SimpleAlign object
\&  @params = (\*(Aqktuple\*(Aq => 2, \*(Aqmatrix\*(Aq => \*(AqBLOSUM\*(Aq);
\&  $factory = Bio::Tools::Run::Alignment::Clustalw\->new(@params);
\&  $inputfilename = \*(Aqt/data/cysprot.fa\*(Aq;
\&  $aln = $factory\->run($inputfilename); # $aln is a SimpleAlign object.
\&
\&
\&  # Create the Distance Matrix using a default PAM matrix and id name
\&  # lengths limit of 30 note to use id name length greater than the
\&  # standard 10 in protdist, you will need to modify the protdist source
\&  # code
\&
\&  @params = (\*(AqMODEL\*(Aq => \*(AqPAM\*(Aq);
\&  $protdist_factory = Bio::Tools::Run::Phylo::Phylip::ProtDist\->new(@params);
\&
\&  my ($matrix)  = $protdist_factory\->run($aln); # an array of Bio::Matrix::PhylipDist matrix
\&
\&  #finding the distance between two sequences
\&  my $distance = $matrix\->get_entry(\*(Aqprotein_name_1\*(Aq,\*(Aqprotein_name_2\*(Aq);
\&  my @column   = $matrix\->get_column(\*(Aqprotein_name_1\*(Aq);
\&  my @row      = $martrix\->get_row(\*(Aqprotein_name_1\*(Aq);
\&  my @diag     = $matrix\->get_diagonal();
\&  print $matrix\->print_matrix;
\&
\&
\&  #Alternatively, one can create the matrix by passing in a file 
\&  #name containing a multiple alignment in phylip format
\&  $protdist_factory = Bio::Tools::Run::Phylo::Phylip::ProtDist\->new(@params);
\&  my ($matrix)  = $protdist_factory\->run(\*(Aq/home/shawnh/prot.phy\*(Aq);
\&
\&  # To prevent PHYLIP from truncating sequence names:
\&  # Step 1. Shelf the original names:
\&    my ($aln_safe, $ref_name)=                    #   $aln_safe has serial names
\&               $aln\->set_displayname_safe();      #   $ref_name holds original names
\&  # Step 2. Run ProtDist and Neighbor:
\&    ($matrix) = $protdist_factory\->
\&               create_distance_matrix($aln_safe); #  Use $aln_safe instead of $aln
\&    ($tree) = $neighbor_factory\->run($matrix);
\&  # Step 3. Retrieve orgininal OTU names:
\&    use Bio::Tree::Tree;
\&    my @nodes=$tree\->get_nodes();
\&    foreach my $nd (@nodes){
\&       $nd\->id($ref_name\->{$nd\->id_output}) if $nd\->is_Leaf;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Wrapper for protdist Joseph Felsentein for creating a distance matrix
comparing protein sequences from a multiple alignment file or a
Bio::SimpleAlign object and returns a Bio::Matrix::PhylipDist object;
.PP
\&\s-1VERSION\s0 Support
.PP
This wrapper currently supports v3.5 of phylip. There is also support
for v3.6.
.SH "PARAMETERS FOR PROTDIST COMPUTATION"
.IX Header "PARAMETERS FOR PROTDIST COMPUTATION"
.SS "\s-1MODEL\s0"
.IX Subsection "MODEL"
Title		: \s-1MODEL\s0
Description	: (optional)
.PP
.Vb 5
\&                  This sets the model of amino acid substitution used
\&                  in the calculation of the distances.  3 different
\&                  models are supported: 
\&                  PAM     Dayhoff PAM Matrix(default) 
\&                  KIMURA  Kimura\*(Aqs Distance CAT
\&
\&                  Categories Distance Usage: @params =
\&                  (\*(Aqmodel\*(Aq=>\*(AqX\*(Aq);#where X is one of the values above
\&
\&                  Defaults to PAM For more information on the usage of
\&                  the different models, please refer to the
\&                  documentation 
\&                  defaults to Equal
\&                  (0.25,0.25,0.25,0.25) found in the phylip package.
\&
\&                  Additional models in PHYLIP 3.6
\&                  PMB \- Henikoff/Tillier PMB matrix
\&                  JTT \- Jones/Taylor/Thornton
.Ve
.SS "\s-1MULTIPLE\s0"
.IX Subsection "MULTIPLE"
Title    : \s-1MULTIPLE\s0
Description: (optional)
.PP
.Vb 2
\&          This allows multiple distance matrices to be generated from multiple
\&          MSA.
\&
\&          Usage: @params = (\*(AqMULTIPLE\*(Aq=>100) where the value specifyies the 
\&          number of aligments given.
.Ve
.SS "\s-1ALL SUBSEQUENT PARAMETERS WILL ONLY WORK IN CONJUNCTION WITH\s0"
.IX Subsection "ALL SUBSEQUENT PARAMETERS WILL ONLY WORK IN CONJUNCTION WITH"
\&\s-1THE\s0 Categories Distance MODEL*
.SS "\s-1GENCODE\s0"
.IX Subsection "GENCODE"
.Vb 2
\&  Title         : GENCODE 
\&  Description   : (optional)
\&
\&                  This option allows the user to select among various
\&                  nuclear and mitochondrial genetic codes.
\&
\&                  Acceptable Values:
\&                  U           Universal
\&                  M           Mitochondrial
\&                  V           Vertebrate mitochondrial
\&                  F           Fly mitochondrial
\&                  Y           Yeast mitochondrial
\&  Usage         : @params = (\*(Aqgencode\*(Aq=>\*(AqX\*(Aq); 
\&                  where X is one of the letters above
\&                  Defaults to U
.Ve
.SS "\s-1CATEGORY\s0"
.IX Subsection "CATEGORY"
Title		: \s-1CATEGORY\s0 
Description     : (optional)
.PP
.Vb 12
\&                  This option sets the categorization of amino acids
\&                  all have groups: (Glu Gln Asp Asn), (Lys Arg His),
\&                  (Phe Tyr Trp)  plus:
\&                  G   George/Hunt/Barker:
\&                          (Cys), (Met   Val  Leu  Ileu), 
\&                          (Gly  Ala  Ser  Thr  Pro)
\&                  C   Chemical:
\&                          (Cys   Met), (Val  Leu  Ileu  Gly  Ala  Ser  Thr),
\&                          (Pro)
\&                  H   Hall:
\&                        (Cys), (Met   Val  Leu  Ileu), (Gly  Ala  Ser  Thr),
\&                        (Pro)
\&
\&  Usage         : @params = (\*(Aqcategory\*(Aq=>\*(AqX\*(Aq); 
\&                  where X is one of the letters above
\&                  Defaults to G
.Ve
.SS "\s-1PROBCHANGE\s0"
.IX Subsection "PROBCHANGE"
.Vb 5
\&  Title       : PROBCHANGE
\&  Description : (optional)
\&                 This option sets the ease of changing category of amino
\&                 acid.  (1.0 if no difficulty of changing,less if less
\&                 easy. Can\*(Aqt be negative)
\&
\&  Usage       : @params = (\*(Aqprobchange\*(Aq=>X) where 0<=X<=1
\&                Defaults to 0.4570
.Ve
.SS "\s-1TRANS\s0"
.IX Subsection "TRANS"
.Vb 4
\&  Title       : TRANS
\&  Description : (optional)
\&                This option sets transition/transversion ratio can be
\&                any positive number
\&
\&  Usage        : @params = (\*(Aqtrans\*(Aq=>X) where X >= 0
\&                 Defaults to 2
.Ve
.SS "\s-1FREQ\s0"
.IX Subsection "FREQ"
.Vb 5
\&  Title       : FREQ 
\&  Description : (optional)
\&                This option sets the frequency of each base (A,C,G,T)
\&                The sum of the frequency must sum to 1.
\&                For example A,C,G,T = (0.25,0.5,0.125,0.125) 
\&
\&  Usage       : @params = (\*(Aqfreq\*(Aq=>(\*(AqW\*(Aq,\*(AqX\*(Aq,\*(AqY\*(Aq,\*(AqZ\*(Aq)
\&                where W + X + Y + Z = 1
\&                Defaults to Equal (0.25,0.25,0.25,0.25)
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
Email shawnh@fugu\-sg.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : >program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "idlength"
.IX Subsection "idlength"
.Vb 5
\& Title   : idlength 
\& Usage   : $obj\->idlength ($newval)
\& Function: 
\& Returns : value of idlength 
\& Args    : newvalue (optional)
.Ve
.SS "run"
.IX Subsection "run"
.Vb 8
\& Title   : run 
\& Usage   :
\&        $inputfilename = \*(Aqt/data/prot.phy\*(Aq;
\&        $matrix= $prodistfactory\->run($inputfilename);
\&or
\&        $seq_array_ref = \e@seq_array; @seq_array is array of Seq objs
\&        $aln = $protdistfactory\->align($seq_array_ref);
\&        $matrix = $protdistfactory\->run($aln);
\&
\& Function: Create a distance matrix from a SimpleAlign object or a multiple alignment file 
\& Example :
\& Returns : L<Bio::Matrix::PhylipDist>
\& Args    : Name of a file containing a multiple alignment in Phylip format
\&           or an SimpleAlign object 
\&
\& Throws an exception if argument is not either a string (eg a
\& filename) or a Bio::SimpleAlign object. If
\& argument is string, throws exception if file corresponding to string
\& name can not be found.
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 7
\& Title   :  _run
\& Usage   :  Internal function, not to be called directly        
\& Function:  makes actual system call to protdist program
\& Example :
\& Returns : Bio::Tree object
\& Args    : Name of a file containing a set of multiple alignments in Phylip format 
\&           and a parameter string to be passed to protdist
.Ve
.SS "create_distance_matrix"
.IX Subsection "create_distance_matrix"
.Vb 6
\& Title   : create_distance_matrix
\& Usage   : my $file = $app\->create_distance_matrix($treefile);
\& Function: This method is deprecated. Please use run method. 
\& Returns : L<Bio::Matrix::PhylipDist>
\& Args    : Name of a file containing a multiple alignment in Phylip format
\&           or an SimpleAlign object 
\&
\& Throws an exception if argument is not either a string (eg a
\& filename) or a Bio::SimpleAlign object. If
\& argument is string, throws exception if file corresponding to string
\& name can not be found.
.Ve
.SS "\fI_setinput()\fP"
.IX Subsection "_setinput()"
.Vb 6
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create input file for protdist program
\& Example :
\& Returns : name of file containing a multiple alignment in Phylip format 
\& Args    : SimpleAlign object reference or input file name
.Ve
.SS "\fI_setparams()\fP"
.IX Subsection "_setparams()"
.Vb 6
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create parameter inputs for protdist program
\& Example :
\& Returns : parameter string to be passed to protdist
\& Args    : name of calling object
.Ve
.SH "Bio::Tools::Run::Wrapper methods"
.IX Header "Bio::Tools::Run::Wrapper methods"
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values  
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function: 
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $protdist\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $codeml\->cleanup();
\& Function: Will cleanup the tempdir directory after a ProtDist run
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
