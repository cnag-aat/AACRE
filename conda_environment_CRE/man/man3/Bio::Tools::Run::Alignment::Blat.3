.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Alignment::Blat 3"
.TH Bio::Tools::Run::Alignment::Blat 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Alignment::Blat
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use Bio::Tools::Run::Alignment::Blat;
\& my $factory = Bio::Tools::Run::Alignment::Blat\->new(\-db => $database);
\& # $report is a Bio::SearchIO\-compliant object
\& my $report = $factory\->run($seqobj);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Wrapper module for Blat program. This newer version allows for all parameters to
be set by passing them as an option to \fInew()\fR.
.PP
Key bits not implemented yet (\s-1TODO\s0):
.IP "\(bu" 3
Implement all needed Bio::Tools::Run::WrapperBase methods
.Sp
Missing are a few, including \fIversion()\fR.
.IP "\(bu" 3
Re-implement using IPC::Run
.Sp
Would like to get this running under something less reliant on OS-dependent
changes within code.
.IP "\(bu" 3
No .2bit or .nib conversions yet
.Sp
These require callouts to faToNib or faTwoTwoBit, which may or may not be
installed on a user's machine.  We can possibly add functionality to
check for faToTwoBit/faToNib and other \s-1UCSC\s0 tools in the future.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& Chris Fields \- cjfields at bioperl dot org
\&
\& Original author \- Bala Email bala@tll.org.sg
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : $blat\->new( \-db => \*(Aq\*(Aq )
\& Function: Create a new Blat factory
\& Returns : A new Bio::Tools::Run::Alignment::Blat object
\& Args    : \-db       : Mandatory parameter. See db()
\&           \-qsegment : see qsegment()
\&           \-tsegment : see tsegment()
\&           Also, Blat parameters and flags are accepted: \-t, \-q, \-minIdentity,
\&              \-minScore, \-out, \-trimT, ...
\&           See Blat\*(Aqs manual for details.
.Ve
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory\->program_name()
\& Function: Get the program name
\& Returns : string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns : string
\& Args    :
.Ve
.SS "run"
.IX Subsection "run"
.Vb 5
\& Title   : run()
\& Usage   : $obj\->run($query)
\& Function: Run Blat.
\& Returns : A Bio::SearchIO object that holds the results
\& Args    : A Bio::PrimarySeqI object or a file of query sequences
.Ve
.SS "align"
.IX Subsection "align"
.Vb 3
\& Title   : align
\& Usage   : $obj\->align($query)
\& Function: Alias to run()
.Ve
.SS "db"
.IX Subsection "db"
.Vb 5
\& Title   : db
\& Usage   : $obj\->db()
\& Function: Get or set the file of database sequences (.fa , .nib or .2bit)
\& Returns : Database filename
\& Args    : Database filename
.Ve
.SS "qsegment"
.IX Subsection "qsegment"
.Vb 12
\& Title    : qsegment
\& Usage    : $obj\->qsegment(\*(Aqsequence_a:0\-1000\*(Aq)
\& Function : pass in a B<UCSC\-compliant> string for the query sequence(s)
\& Returns  : string
\& Args     : string
\& Note     : Requires the sequence(s) in question be 2bit or nib format
\& Reminder : UCSC segment/regions coordinates are 0\-based half\-open (sequence
\&            begins at 0, but start isn\*(Aqt counted with length), whereas BioPerl
\&            coordinates are 1\-based closed (sequence begins with 1, both start
\&            and end are counted in the length of the segment). For example, a
\&            segment that is \*(Aqsequence_a:0\-1000\*(Aq will have BioPerl coordinates of
\&            \*(Aqsequence_a:1\-1000\*(Aq, both with the same length (1000).
.Ve
.SS "tsegment"
.IX Subsection "tsegment"
.Vb 12
\& Title    : tsegment
\& Usage    : $obj\->tsegment(\*(Aqsequence_a:0\-1000\*(Aq)
\& Function : pass in a B<UCSC\-compliant> string for the target sequence(s)
\& Returns  : string
\& Args     : string
\& Note     : Requires the sequence(s) in question be 2bit or nib format
\& Reminder : UCSC segment/regions coordinates are 0\-based half\-open (sequence
\&            begins at 0, but start isn\*(Aqt counted with length), whereas BioPerl
\&            coordinates are 1\-based closed (sequence begins with 1, both start
\&            and end are counted in the length of the segment). For example, a
\&            segment that is \*(Aqsequence_a:0\-1000\*(Aq will have BioPerl coordinates of
\&            \*(Aqsequence_a:1\-1000\*(Aq, both with the same length (1000).
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 5
\& Title    : outfile_name
\& Usage    : $obj\->outfile_name(\*(Aqout.blat\*(Aq)
\& Function : Get or set the name for the BLAT output file
\& Returns  : string
\& Args     : string
.Ve
.SS "searchio"
.IX Subsection "searchio"
.Vb 10
\& Title    : searchio
\& Usage    : $obj\->searchio{\-writer => $writer}
\& Function : Pass in additional parameters to the returned Bio::SearchIO parser
\& Returns  : Hash reference with Bio::SearchIO parameters
\& Args     : Hash reference
\& Note     : Currently, this implementation overrides any passed \-format
\&            parameter based on whether the output is changed (\*(Aqout\*(Aq).  This
\&            may change if requested, but we can\*(Aqt see the utility of doing so,
\&            as requesting mismatched output/parser combinations is just a recipe
\&            for disaster
.Ve
.SH "Bio::ParameterBaseI\-specific methods"
.IX Header "Bio::ParameterBaseI-specific methods"
These methods are part of the Bio::ParameterBaseI interface
.SS "set_parameters"
.IX Subsection "set_parameters"
.Vb 7
\& Title   : set_parameters
\& Usage   : $pobj\->set_parameters(%params);
\& Function: sets the parameters listed in the hash or array
\& Returns : None
\& Args    : [optional] hash or array of parameter/values.  These can optionally
\&           be hash or array references
\& Note    : This only sets parameters; to set methods use the method name
.Ve
.SS "reset_parameters"
.IX Subsection "reset_parameters"
.Vb 5
\& Title   : reset_parameters
\& Usage   : resets values
\& Function: resets parameters to either undef or value in passed hash
\& Returns : none
\& Args    : [optional] hash of parameter\-value pairs
.Ve
.SS "validate_parameters"
.IX Subsection "validate_parameters"
.Vb 7
\& Title   : validate_parameters
\& Usage   : $pobj\->validate_parameters(1);
\& Function: sets a flag indicating whether to validate parameters via
\&           set_parameters() or reset_parameters()
\& Returns : Bool
\& Args    : [optional] value evaluating to True/False
\& Note    : NYI
.Ve
.SS "parameters_changed"
.IX Subsection "parameters_changed"
.Vb 6
\& Title   : parameters_changed
\& Usage   : if ($pobj\->parameters_changed) {...}
\& Function: Returns boolean true (1) if parameters have changed
\& Returns : Boolean (0 or 1)
\& Args    : None
\& Note    : This module does not run state checks, so this always returns True
.Ve
.SS "available_parameters"
.IX Subsection "available_parameters"
.Vb 6
\& Title   : available_parameters
\& Usage   : @params = $pobj\->available_parameters()
\& Function: Returns a list of the available parameters
\& Returns : Array of parameters
\& Args    : [optional] name of executable being used; defaults to returning all
\&           available parameters
.Ve
.SS "get_parameters"
.IX Subsection "get_parameters"
.Vb 5
\& Title   : get_parameters
\& Usage   : %params = $pobj\->get_parameters;
\& Function: Returns list of set key\-value pairs, parameter => value
\& Returns : List of key\-value pairs
\& Args    : none
.Ve
.SH "to_* methods"
.IX Header "to_* methods"
All to_* methods are implementation-specific
.SS "to_exe_string"
.IX Subsection "to_exe_string"
.Vb 5
\& Title   : to_exe_string
\& Usage   : $string = $pobj\->to_exe_string;
\& Function: Returns string (command line string in this case)
\& Returns : String 
\& Args    :
.Ve
