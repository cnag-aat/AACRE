.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::PhyloWS::Service 3"
.TH Bio::Phylo::PhyloWS::Service 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::PhyloWS::Service \- Base class for phylogenetic web services
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # inside a CGI script:
\& use CGI;
\& use Bio::Phylo::PhyloWS::Service::${child};
\&
\& my $service = Bio::Phylo::PhyloWS::Service::${child}\->new( \*(Aq\-url\*(Aq => $url );
\& $service\->handle_request(CGI\->new);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for services that implement 
the PhyloWS (<http://evoinfo.nescent.org/PhyloWS>) recommendations.
Such services should subclass this class and implement any relevant
abstract methods. Examples of this are Bio::Phylo::PhyloWS::Service::Tolweb
and Bio::Phylo::PhyloWS::Service::Ubio.
.PP
PhyloWS services are web services for phylogenetics that provide two types of
functionality:
.IP "Record lookup" 4
.IX Item "Record lookup"
Services that implement record lookups are services that know how to process
\&\s-1URL\s0 requests of the form \f(CW\*(C`/phylows/$object_type/$authority:$identifier?format=$format\*(C'\fR,
where \f(CW$object_type\fR is a string representing the type of object that is
returned, e.g. 'tree', 'matrix', 'taxon', etc., \f(CW$authority\fR is a naming authority
such as \s-1TB2\s0 for TreeBASE2, \f(CW$identifier\fR is a local identifier for the object,
for example an accession number, and \f(CW$format\fR is a serialization format such as
\&'nexml'.
.Sp
In order to provide this functionality, subclasses of this class must implement
a method called \f(CW\*(C`get_record\*(C'\fR which is passed at least a named \f(CW\*(C`\-guid\*(C'\fR argument
that provides the local identifier. The \f(CW\*(C`get_record\*(C'\fR method must return a
Bio::Phylo::Project object, which is subsequently serialized in the requested
format by the \f(CW\*(C`handle_request\*(C'\fR method provided here.
.IP "Record search" 4
.IX Item "Record search"
Services that implement record searches are services that know how to process
\&\s-1URL\s0 requests of the form \f(CW\*(C`/phylows/$object_type/find?query=$query&format=$format\*(C'\fR,
where \f(CW$object_type\fR is a string representing the type of object to search for,
\&\f(CW$query\fR is a \s-1CQL\s0 query (<http://www.loc.gov/standards/sru/specs/cql.html>), and
\&\f(CW$format\fR is the serialization format in which the returned results are represented.
.Sp
In order to provide this functionality, subclasses of this class must implement
a method called \f(CW\*(C`get_query_result\*(C'\fR, which is passed the \f(CW$query\fR parameter and
which must return a Bio::Phylo::Project object that combines the search
results (e.g. in a single taxa block for taxon searches).
.Sp
\&\s-1CQL\s0 has different levels of support, services may only implement certain levels
of support. The example services Bio::Phylo::PhyloWS::Service::Tolweb
and Bio::Phylo::PhyloWS::Service::Ubio only proved Level 0, term-only support,
meaning that \f(CW$query\fR is simply a term such as \f(CW\*(C`Homo+sapiens\*(C'\fR.
.PP
Child classes that implement some or all of the functionality described above
can subsequently be made operational on a web server by calling them from a
simple \s-1CGI\s0 script as shown in the \s-1SYNOPSIS\s0 section, where \f(CW$child\fR must be
substituted by the actual class name of the child class (e.g. \f(CW\*(C`Tolweb\*(C'\fR). The
\&\f(CW$url\fR parameter that is passed to the constructor is usually simply the \s-1URI\s0
of the \s-1CGI\s0 script, i.e. the environment variable \f(CW$ENV{\*(AqSCRIPT_URI\*(Aq}\fR under
most standard \s-1HTTP\s0 servers.
.SS "\s-1REQUEST HANDLER\s0"
.IX Subsection "REQUEST HANDLER"
.IP "\fIhandle_request()\fR" 4
.IX Item "handle_request()"
.Vb 6
\& Type    : Request handler
\& Title   : handle_request
\& Usage   : $service\->handle_request($cgi);
\& Function: Handles a service request
\& Returns : prints out response and exits
\& Args    : Required: a CGI.pm object
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_result()\fR" 4
.IX Item "get_result()"
Gets a phylows result, either a record lookup or a query result,
depending on the internal state of the service object
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_result
\& Usage   : my $proj = $obj\->get_result;
\& Function: Gets a phylows result
\& Returns : Bio::Phylo::Project
\& Args    : None
\& Comments:
.Ve
.IP "\fIget_record()\fR" 4
.IX Item "get_record()"
Gets a phylows record by its id
.Sp
.Vb 9
\& Type    : Abstract Accessor
\& Title   : get_record
\& Usage   : my $record = $obj\->get_record( \-guid => $guid );
\& Function: Gets a phylows record by its id
\& Returns : Bio::Phylo::Project
\& Args    : Required: \-guid => $guid, 
\&           Optional: \-format => $format
\& Comments: This is an ABSTRACT method that needs to be implemented
\&           by a child class
.Ve
.IP "\fIget_query_result()\fR" 4
.IX Item "get_query_result()"
Gets a phylows cql query result
.Sp
.Vb 8
\& Type    : Abstract Accessor
\& Title   : get_query_result
\& Usage   : my $result = $obj\->get_query_result( $query );
\& Function: Gets a query result 
\& Returns : Bio::Phylo::Project
\& Args    : Required: $query
\& Comments: This is an ABSTRACT method that needs to be implemented
\&           by a child class
.Ve
.IP "\fIget_supported_formats()\fR" 4
.IX Item "get_supported_formats()"
Gets an array ref of supported formats
.Sp
.Vb 8
\& Type    : Abstract Accessor
\& Title   : get_supported_formats
\& Usage   : my @formats = @{ $obj\->get_supported_formats };
\& Function: Gets an array ref of supported formats
\& Returns : ARRAY
\& Args    : NONE
\& Comments: This is an ABSTRACT method that needs to be implemented
\&           by a child class
.Ve
.IP "\fIget_redirect()\fR" 4
.IX Item "get_redirect()"
Gets a redirect \s-1URL\s0 if relevant
.Sp
.Vb 10
\& Type    : Accessor
\& Title   : get_redirect
\& Usage   : my $url = $obj\->get_redirect;
\& Function: Gets a redirect URL if relevant
\& Returns : String
\& Args    : $cgi
\& Comments: This method is called by handle_request so that
\&           services can 303 redirect a record lookup to 
\&           another URL. By default, this method returns 
\&           undef (i.e. no redirect)
.Ve
.IP "\fIget_description()\fR" 4
.IX Item "get_description()"
Gets an \s-1RSS1.0/XML\s0 representation of a phylows record
.Sp
.Vb 10
\& Type    : Accessor
\& Title   : get_description
\& Usage   : my $desc = $obj\->get_description;
\& Function: Gets an RSS1.0/XML representation of a phylows record
\& Returns : String
\& Args    : None
\& Comments: This method creates a representation of a single record
\&           (i.e. the service\*(Aqs base url + the record\*(Aqs guid)
\&           that can be serialized in whichever formats are 
\&           supported
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.PP
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
