.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::PAML::Evolver 3"
.TH Bio::Tools::Run::Phylo::PAML::Evolver 3 "2018-07-01" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::PAML::Evolver \- Wrapper aroud the PAML program evolver
.SH "VERSION"
.IX Header "VERSION"
version 1.7.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Run::Phylo::PAML::Evolver;
\&
\&  my $evolver = Bio::Tools::Run::Phylo::PAML::Evolver\->new();
\&
\&  # Get a $tree object somehow
\&  $evolver\->tree($tree);
\&
\&  # FIXME: evolver generates a tree (first run with option 1 or 2)?
\&
\&  # One or more alns are created
\&  my @alns = $evolver\->run();
\&
\&  ####
\&
\&  # Or with all the data coming from a previous PAML run
\&  my $parser = Bio::Tools::Phylo::PAML\->new
\&    (
\&     \-file => "$inputfile",
\&    );
\&  my $result = $parser\->next_result();
\&  my $tree = $result\->next_tree;
\&  $evolver\->tree($tree);
\&  my @codon_freqs = $result\->get_CodonFreqs();
\&  $evolver\->set_CodonFreqs(\e@codon_freqs);
\&
\&  my $val = $evolver\->prepare();
\&
\&  # FIXME: something similar for nucleotide frequencies:
\&  # Option (5) Simulate nucleotide data sets (use MCbase.dat)?
\&
\&  # FIXME: something similar for aa parameters:
\&  # Option (7) Simulate amino acid data sets (use MCaa.dat)?
\&
\&  # FIXME: With an initial RootSeq.txt
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper around the evolver program of \s-1PAML\s0 (Phylogenetic
Analysis by Maximum Likelihood) package of Ziheng Yang.  See
http://abacus.gene.ucl.ac.uk/software/paml.html for more information.
.PP
This module is more about generating the properl MCmodel.ctl file and
will run the program in a separate temporary directory to avoid
creating temp files all over the place.
.SS "Default Values"
.IX Subsection "Default Values"
Valid and default values for evolver programs are listed below.  The
default values are always the first one listed.  These descriptions
are essentially lifted from the example MCcodon.dat file and pamlDOC
documentation provided by the author.
.PP
Stub:
.PP
\&\fBoption1\fR specifies something.
.PP
\&\fBoption2\fR specifies something else.
.PP
\&\s-1INCOMPLETE DOCUMENTATION OF ALL METHODS\s0
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory\->program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "error_string"
.IX Subsection "error_string"
.Vb 5
\& Title   : error_string
\& Usage   : $obj\->error_string($newval)
\& Function: Where the output from the last analysis run is stored.
\& Returns : value of error_string
\& Args    : newvalue (optional)
.Ve
.SS "alignment"
.IX Subsection "alignment"
.Vb 8
\& Title   : alignment
\& Usage   : $evolver\->align($aln);
\& Function: Get/Set the L<Bio::Align::AlignI> object
\& Returns : L<Bio::Align::AlignI> object
\& Args    : [optional] L<Bio::Align::AlignI>
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\& See also: L<Bio::SimpleAlign>
.Ve
.SS "tree"
.IX Subsection "tree"
.Vb 8
\& Title   : tree
\& Usage   : $evolver\->tree($tree, %params);
\& Function: Get/Set the L<Bio::Tree::TreeI> object
\& Returns : L<Bio::Tree::TreeI>
\& Args    : [optional] $tree => L<Bio::Tree::TreeI>,
\&           [optional] %parameters => hash of tree\-specific parameters:
\&                  branchLengths: 0, 1 or 2
\&                  out
\&
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\& See also: L<Bio::Tree::Tree>
.Ve
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function:
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $evolver\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "indel"
.IX Subsection "indel"
.Vb 10
\& Title   : indel
\& Usage   : $obj\->indel($newval)
\& Function: this is only useful if using evolver_indel instead of main
\&           evolver package:
\&           Exploring the Relationship between Sequence Similarity and
\&           Accurate Phylogenetic Trees Brandi L. Cantarel, Hilary
\&           G. Morrison and William Pearson
\& Example :
\& Returns : value of indel (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Run::Phylo::PAML::Evolver\->new();
\& Function: Builds a new Bio::Tools::Run::Phylo::PAML::Evolver object
\& Returns : Bio::Tools::Run::Phylo::PAML::Evolver
\&           \-save_tempfiles => boolean to save the generated tempfiles and
\&                              NOT cleanup after onesself (default FALSE)
\&           \-tree => the Bio::Tree::TreeI object (FIXME: optional if this is done in a first run)
\&           \-params => a hashref of PAML parameters (all passed to set_parameter)
\&           \-executable => where the evolver executable resides
.Ve
.PP
See also: Bio::Tree::TreeI
.SS "prepare"
.IX Subsection "prepare"
.Vb 7
\& Title   : prepare
\& Usage   : my $rundir = $evolver\->prepare($aln);
\& Function: prepare the evolver analysis using the default or updated parameters
\&           the alignment parameter must have been set
\& Returns : value of rundir
\& Args    : L<Bio::Align::AlignI> object,
\&       L<Bio::Tree::TreeI> object [optional]
.Ve
.SS "run"
.IX Subsection "run"
.Vb 7
\& Title   : run
\& Usage   : my ($rc,$parser) = $evolver\->run();
\& Function: run the evolver analysis using the default or updated parameters
\&           the alignment parameter must have been set
\& Returns : Return code, L<Bio::Tools::Phylo::PAML>
\& Args    : L<Bio::Align::AlignI> object,
\&       L<Bio::Tree::TreeI> object [optional]
.Ve
.SS "get_parameters"
.IX Subsection "get_parameters"
.Vb 5
\& Title   : get_parameters
\& Usage   : my %params = $self\->get_parameters();
\& Function: returns the list of parameters as a hash
\& Returns : associative array keyed on parameter names
\& Args    : none
.Ve
.SS "set_parameter"
.IX Subsection "set_parameter"
.Vb 11
\& Title   : set_parameter
\& Usage   : $evolver\->set_parameter($param,$val);
\& Function: Sets a evolver parameter, will be validated against
\&           the valid values as set in the %VALIDVALUES class variable.
\&           The checks can be ignored if one turns off param checks like this:
\&             $evolver\->no_param_checks(1)
\& Returns : boolean if set was success, if verbose is set to \-1
\&           then no warning will be reported
\& Args    : $param => name of the parameter
\&           $value => value to set the parameter to
\& See also: L<no_param_checks()>
.Ve
.SS "set_default_parameters"
.IX Subsection "set_default_parameters"
.Vb 7
\& Title   : set_default_parameters
\& Usage   : $evolver\->set_default_parameters(0);
\& Function: (Re)set the default parameters from the defaults
\&           (the first value in each array in the
\&        %VALIDVALUES class variable)
\& Returns : none
\& Args    : boolean: keep existing parameter values
.Ve
.SS "set_CodonFreqs"
.IX Subsection "set_CodonFreqs"
.Vb 5
\& Title   : set_CodonFreqs
\& Usage   : $obj\->set_CodonFreqs($newval)
\& Function: Get/Set the Codon Frequence table
\& Returns : value of set_CodonFreqs (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "get_CodonFreqs"
.IX Subsection "get_CodonFreqs"
.Vb 5
\& Title   : get_CodonFreqs
\& Usage   : my @codon_freqs = $evolver\->get_CodonFreqs()
\& Function: Get the Codon freqs
\& Returns : Array
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $evolver\->cleanup();
\& Function: Will cleanup the tempdir directory after a PAML run
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
.SH "Bio::Tools::Run::WrapperBase methods"
.IX Header "Bio::Tools::Run::WrapperBase methods"
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing lists"
.IX Subsection "Mailing lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org              \- General discussion
\&  http://bioperl.org/Support.html    \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bio\-tools\-phylo\-paml/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Albert Vilella <avilella@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This software is copyright (c) by Albert Vilella <avilella@gmail.com>.
.PP
This software is available under the same terms as the perl 5 programming language system itself.
