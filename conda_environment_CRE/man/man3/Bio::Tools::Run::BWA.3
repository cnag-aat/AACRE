.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::BWA 3"
.TH Bio::Tools::Run::BWA 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::BWA \- Run wrapper for the BWA short\-read assembler *BETA*
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # create an assembly
\&
\& # run BWA commands separately
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a wrapper interface for Heng Li's
reference-directed short read assembly suite \f(CW\*(C`bwa\*(C'\fR (see
<http://bio\-bwa.sourceforge.net/bwa.shtml> for manuals and
downloads).
.PP
Manipulating the alignments requires \f(CW\*(C`samtools\*(C'\fR
(<http://sourceforge.net/projects/samtools/>) and Lincoln Stein's package
\&\f(CW\*(C`Bio\-SamTools\*(C'\fR (<http://search.cpan.org/perldoc?Bio::DB::Sam>).
.PP
There are two modes of action.
.IP "\(bu" 4
Easy assembly
.Sp
The first is a simple pipeline through the \f(CW\*(C`maq\*(C'\fR commands, taking
your read data in and squirting out an assembly object of type
Bio::Assembly::IO::maq. The pipeline is based on the one performed
by \f(CW\*(C`maq.pl easyrun\*(C'\fR:
.Sp
.Vb 4
\& Action                  maq commands
\& \-\-\-\-\-\-                  \-\-\-\-\-\-\-\-\-\-\-\-
\& data conversion to      fasta2bfa, fastq2bfq
\& maq binary formats
\&
\& map sequence reads      map
\& to reference seq
\&
\& assemble, creating      assemble
\& consensus
\&
\& convert map & cns       mapview, cns2fq
\& files to plaintext
\& (for B:A:IO:maq)
.Ve
.Sp
Command-line options can be directed to the \f(CW\*(C`map\*(C'\fR, \f(CW\*(C`assemble\*(C'\fR, and
\&\f(CW\*(C`cns2fq\*(C'\fR steps. See \*(L"\s-1OPTIONS\*(R"\s0 below.
.IP "\(bu" 4
\&\s-1BWA\s0 command mode
.Sp
The second mode is direct access to \f(CW\*(C`bwa\*(C'\fR commands. To run a \f(CW\*(C`bwa\*(C'\fR
command, construct a run factory, specifying the desired command using
the \f(CW\*(C`\-command\*(C'\fR argument in the factory constructor, along with
options specific to that command (see \*(L"\s-1OPTIONS\*(R"\s0):
.Sp
.Vb 1
\& $bwafac = Bio::Tools::Run::BWA\->new( \-command => \*(Aqfasta2bfa\*(Aq );
.Ve
.Sp
To execute, use the \f(CW\*(C`run_bwa\*(C'\fR methods. Input and output files are
specified in the arguments of \f(CW\*(C`run_bwa\*(C'\fR (see \*(L"\s-1FILES\*(R"\s0):
.Sp
.Vb 1
\& $bwafac\->run_bwa( \-fas => "myref.fas", \-bfa => "myref.bfa" );
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\f(CW\*(C`bwa\*(C'\fR is complex, with many subprograms (commands) and command-line
options and file specs for each. This module attempts to provide
commands and options comprehensively. You can browse the choices like so:
.PP
.Vb 8
\& $bwafac = Bio::Tools::Run::BWA\->new( \-command => \*(Aqaln\*(Aq );
\& # all maq commands
\& @all_commands = $bwafac\->available_parameters(\*(Aqcommands\*(Aq); 
\& @all_commands = $bwafac\->available_commands; # alias
\& # just for aln
\& @aln_params = $bwafac\->available_parameters(\*(Aqparams\*(Aq);
\& @aln_switches = $bwafac\->available_parameters(\*(Aqswitches\*(Aq);
\& @aln_all_options = $bwafac\->available_parameters();
.Ve
.PP
Reasonably mnemonic names have been assigned to the single-letter
command line options. These are the names returned by
\&\f(CW\*(C`available_parameters\*(C'\fR, and can be used in the factory constructor
like typical BioPerl named parameters.
.PP
See <http://bio\-bwa.sourceforge.net/bwa.shtml> for the gory details.
.SH "FILES"
.IX Header "FILES"
When a command requires filenames, these are provided to the \f(CW\*(C`run_bwa\*(C'\fR method, not
the constructor (\f(CW\*(C`new()\*(C'\fR). To see the set of files required by a command, use
\&\f(CW\*(C`available_parameters(\*(Aqfilespec\*(Aq)\*(C'\fR or the alias \f(CW\*(C`filespec()\*(C'\fR:
.PP
.Vb 2
\&  $bwafac = Bio::Tools::Run::BWA\->new( \-command => \*(Aqaln\*(Aq );
\&  @filespec = $bwafac\->filespec;
.Ve
.PP
This example returns the following array:
.PP
.Vb 3
\& fas
\& faq 
\& >sai
.Ve
.PP
This indicates that the \s-1FASTA\s0 database (faq) and the \s-1FASTQ\s0 reads (faq)
\&\s-1MUST\s0 be specified, and the \s-1STDOUT\s0 of this program (\s-1SA\s0 coordinates) \s-1MAY\s0 be
slurped into a file specified in the \f(CW\*(C`run_bwa\*(C'\fR argument list:
.PP
.Vb 2
\& $bwafac\->run_bwa( \-fas => \*(Aqmy.db.fas\*(Aq, \-faq => \*(Aqreads.faq\*(Aq,
\&                   \-sai => \*(Aqout.sai\*(Aq );
.Ve
.PP
If files are not specified per the filespec, text sent to \s-1STDOUT\s0 and
\&\s-1STDERR\s0 is saved and is accessible with \f(CW\*(C`$bwafac\-\*(C'\fR\fIstdout()\fR> and
\&\f(CW\*(C`$bwafac\-\*(C'\fR\fIstderr()\fR>.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
bioperl\-l@bioperl.org
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Mark A. Jensen"
.IX Header "AUTHOR - Mark A. Jensen"
.Vb 1
\& Email maj \-at\- fortinbras \-dot\- us
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::Run::BWA();
\& Function: Builds a new Bio::Tools::Run::BWA object
\& Returns : an instance of Bio::Tools::Run::BWA
\& Args    :
.Ve
.SS "run"
.IX Subsection "run"
.Vb 7
\& Title   : run
\& Usage   : $assembly = $bwafac\->run( @args );
\& Function: Run the bwa assembly pipeline. 
\& Returns : Assembly results (file, IO object or Assembly object)
\& Args    : \- fastq file containing single\-end reads
\&           \- fasta file containing the reference sequence
\&           \- [optional] fastq file containing paired\-end reads
.Ve
.SS "\fIrun_bwa()\fP"
.IX Subsection "run_bwa()"
.Vb 5
\& Title   : run_bwa
\& Usage   : $obj\->run_bwa( @file_args )
\& Function: Run a bwa command as specified during object contruction
\& Returns : 
\& Args    : a specification of the files to operate on:
.Ve
.SS "\fIstdout()\fP"
.IX Subsection "stdout()"
.Vb 7
\& Title   : stdout
\& Usage   : $fac\->stdout()
\& Function: store the output from STDOUT for the run, 
\&           if no file specified in run_maq()
\& Example : 
\& Returns : scalar string
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "\fIstderr()\fP"
.IX Subsection "stderr()"
.Vb 7
\& Title   : stderr
\& Usage   : $fac\->stderr()
\& Function: store the output from STDERR for the run, 
\&           if no file is specified in run_maq()
\& Example : 
\& Returns : scalar string
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SH "Bio::Tools::Run::AssemblerBase overrides"
.IX Header "Bio::Tools::Run::AssemblerBase overrides"
.SS "\fI_check_sequence_input()\fP"
.IX Subsection "_check_sequence_input()"
.Vb 1
\& No\-op.
.Ve
.SS "\fI_check_optional_quality_input()\fP"
.IX Subsection "_check_optional_quality_input()"
.Vb 1
\& No\-op.
.Ve
.SS "_prepare_input_sequences"
.IX Subsection "_prepare_input_sequences"
.Vb 1
\& Convert input fastq and fasta to maq format.
.Ve
.SS "\fI_collate_subcmd_args()\fP"
.IX Subsection "_collate_subcmd_args()"
.Vb 7
\& Title   : _collate_subcmd_args
\& Usage   : $args_hash = $self\->_collate_subcmd_args
\& Function: collate parameters and switches into command\-specific
\&           arg lists for passing to new()
\& Returns : hash of named argument lists
\& Args    : [optional] composite cmd prefix (scalar string) 
\&           [default is \*(Aqrun\*(Aq]
.Ve
.SS "\fI_run()\fP"
.IX Subsection "_run()"
.Vb 7
\& Title   :   _run
\& Usage   :   $factory\->_run()
\& Function:   Run a bwa assembly pipeline
\& Returns :   a text\-formatted sam alignment
\& Args    :   \- single end read file in maq bfq format
\&             \- reference seq file in maq bfa format
\&             \- [optional] paired end read file in maq bfq format
.Ve
.SS "\fIavailable_parameters()\fP"
.IX Subsection "available_parameters()"
.Vb 10
\& Title   : available_parameters
\& Usage   : @cmds = $fac\->available_commands(\*(Aqcommands\*(Aq);
\& Function: Use to browse available commands, params, or switches
\& Returns : array of scalar strings
\& Args    : \*(Aqcommands\*(Aq : all bwa commands
\&           \*(Aqparams\*(Aq   : parameters for this object\*(Aqs command
\&           \*(Aqswitches\*(Aq : boolean switches for this object\*(Aqs command
\&           \*(Aqfilespec\*(Aq : the filename spec for this object\*(Aqs command
\& 4Geeks  : Overrides Bio::ParameterBaseI via 
\&           Bio::Tools::Run::AssemblerBase
.Ve
