.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Coordinate::Utils 3"
.TH Bio::Coordinate::Utils 3 "2016-12-15" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Coordinate::Utils \- Additional methods to create Bio::Coordinate objects.
.SH "VERSION"
.IX Header "VERSION"
version 1.007001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Bio::Coordinate::Utils;
\&    # get a Bio::Align::AlignI compliant object, $aln, somehow
\&    # it could be a Bio::SimpleAlign
\&
\&    $mapper = Bio::Coordinate::Utils\->from_align($aln, 1);
\&
\&    # Build a set of mappers which will map, for each sequence,
\&    # that sequence position in the alignment (exon position to alignment
\&    # position)
\&    my @mappers = Bio::Coordinate::Utils\->from_seq_to_alignmentpos($aln);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is a holder of methods that work on or create
Bio::Coordinate::MapperI\- compliant objects. . These methods are not
part of the Bio::Coordinate::MapperI interface and should in general
not be essential to the primary function of sequence objects. If you
are thinking of adding essential functions, it might be better to
create your own sequence class.  See Bio::PrimarySeqI,
Bio::PrimarySeq, and Bio::Seq for more.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
\&\fInew()\fR inherited from Root
.SS "from_align"
.IX Subsection "from_align"
.Vb 6
\& Title   : from_align
\& Usage   : $mapper = Bio::Coordinate::Utils\->from_align($aln, 1);
\& Function:
\&           Create a mapper out of an alignment.
\&           The mapper will return a value only when both ends of
\&           the input range find a match.
\&
\&           Note: This implementation works only on pairwise alignments
\&           and is not yet well tested!
\&
\& Returns : A Bio::Coordinate::MapperI
\& Args    : Bio::Align::AlignI object
\&           Id for the reference sequence, optional
.Ve
.SS "from_seq_to_alignmentpos"
.IX Subsection "from_seq_to_alignmentpos"
.Vb 6
\& Title   : from_seq_to_alignmentpos
\& Usage   : $mapper = Bio::Coordinate::Utils\->from_seq_to_alignmentpos($aln, 1);
\& Function:
\&           Create a mapper out of an alignment.
\&           The mapper will map the position of a sequence into that position
\&           in the alignment.
\&
\&           Will work on alignments of >= 2 sequences
\& Returns : An array of Bio::Coordinate::MapperI
\& Args    : Bio::Align::AlignI object
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing lists"
.IX Subsection "Mailing lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/%%7Bdist%7D
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Heikki Lehvaslaiho <heikki@bioperl.org>
.PP
Jason Stajich <jason@bioperl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This software is copyright (c) by Heikki Lehvaslaiho, and by Jason Stajich.
.PP
This software is available under the same terms as the perl 5 programming language system itself.
