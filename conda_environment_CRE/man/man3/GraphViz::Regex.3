.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "GraphViz::Regex 3"
.TH GraphViz::Regex 3 "2016-12-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz::Regex \- Visualise a regular expression
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use GraphViz::Regex;
\&
\&  my $regex = \*(Aq(([abcd0\-9])|(foo))\*(Aq;
\&
\&  my $graph = GraphViz::Regex\->new($regex);
\&  print $graph\->as_png;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module attempts to visualise a Perl regular
expression. Understanding regular expressions is tricky at the best of
times, and regexess almost always evolve in ways unforseen at the
start. This module aims to visualise a regex as a graph in order to
make the structure clear and aid in understanding the regex.
.PP
The graph visualises how the Perl regular expression engine attempts
to match the regex. Simple text matches or character classes are
represented by.box\-shaped nodes. Alternations are represented by a
diamond-shaped node which points to the alternations. Repetitions are
represented by self-edges with a label of the repetition type (the
nodes being repeated are pointed to be a full edge, a dotted edge
points to what to match after the repetition). Matched patterns (such
as \f(CW$1\fR, \f(CW$2\fR, etc.) are represented by a '\s-1START \f(CW$1\fR\s0' .. '\s-1END \f(CW$1\fR\s0' node
pair.
.PP
This uses the GraphViz module to draw the graph.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This is the constructor. It takes one mandatory argument, which is a
string of the regular expression to be visualised. A GraphViz object
is returned.
.PP
.Vb 1
\&  my $graph = GraphViz::Regex\->new($regex);
.Ve
.SS "as_*"
.IX Subsection "as_*"
The regex can be visualised in a number of different graphical
formats. Methods include as_ps, as_hpgl, as_pcl, as_mif, as_pic,
as_gd, as_gd2, as_gif, as_jpeg, as_png, as_wbmp, as_ismap, as_imap,
as_vrml, as_vtx, as_mp, as_fig, as_svg. See the GraphViz documentation
for more information. The two most common methods are:
.PP
.Vb 2
\&  # Print out a PNG\-format file
\&  print $g\->as_png;
\&
\&  # Print out a PostScript\-format file
\&  print $g\->as_ps;
.Ve
.SH "BUGS"
.IX Header "BUGS"
Note that this module relies on debugging information provided by
Perl, and is known to fail on at least two versions of Perl: 5.005_03
and 5.7.1. Sorry about that \- please use a more recent version of Perl
if you want to use this module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Leon Brocard <\fIacme@astray.com\fR>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-1, Leon Brocard
.PP
This module is free software; you can redistribute it or modify it under the Perl License,
a copy of which is available at <http://dev.perl.org/licenses/>.
