.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::PhyloBase 3"
.TH Bio::Tools::Run::Phylo::PhyloBase 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::PhyloBase\- base module for phylo wrappers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use base qw(Bio::Tools::Run::Phylo::PhyloBase);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For use by Bio::Tools::Run::Phylo modules as a base in place of
Bio::Tools::Run::WrapperBase.
.PP
This is based on WrapperBase but provides additional phylo-related private
helper subs.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "_alignment"
.IX Subsection "_alignment"
.Vb 8
\& Title   : _alignment
\& Usage   : $aln = $obj\->_alignment()
\& Function: Get/set an alignment object, generating one from a file if desired.
\& Returns : Bio::Align::AlignI (probably a Bio::SimpleAlign)
\& Args    : none to get
\&           OR filename & input format of the alignment file (latter defaults to
\&           guess) to set from file
\&           OR Bio::Align::AlignI to set
.Ve
.SS "_write_alignment"
.IX Subsection "_write_alignment"
.Vb 7
\& Title   : _write_alignment
\& Usage   : $obj\->_write_alignment()
\& Function: Writes the alignment object returned by _alignment() out in the
\&           desired format to a temp file.
\& Returns : filename
\& Args    : string to desribe format (default \*(Aqfasta\*(Aq), any other options to pass
\&           to AlignIO
.Ve
.SS "_tree"
.IX Subsection "_tree"
.Vb 11
\& Title   : _tree
\& Usage   : $tree = $obj\->_tree()
\& Function: Get/set a tree object, generating one from a file/database if desired
\& Returns : Bio::Tree::TreeI
\& Args    : none to get, OR to set:
\&           OR filename & input format of the tree file (latter defaults to
\&           guess) to set from file
\&           OR Bio::Tree::TreeI
\&           OR Bio::DB::Taxonomy when _alignment() has been set and where
\&           sequences in the alignment have ids matching species in the taxonomy
\&           database
.Ve
.SS "_write_tree"
.IX Subsection "_write_tree"
.Vb 6
\& Title   : _write_tree
\& Usage   : $obj\->_write_tree()
\& Function: Writes the tree object returned by _tree() out in the desired format
\&           to a temp file.
\& Returns : filename
\& Args    : string to desribe format (default \*(Aqnewick\*(Aq)
.Ve
.SS "_get_seq_names"
.IX Subsection "_get_seq_names"
.Vb 6
\& Title   : _get_seq_names
\& Usage   : @names = $obj\->_get_seq_names()
\& Function: Get all the sequence names (from id()) of the sequenes in the
\&           alignment.  _alignment() must be set prior to calling this.
\& Returns : list of strings (seq ids)
\& Args    : none
.Ve
.SS "_get_node_names"
.IX Subsection "_get_node_names"
.Vb 6
\& Title   : _get_node_names
\& Usage   : @names = $obj\->_get_node_names()
\& Function: Get all the node names (from id()) of the nodes in the tree.
\&           _tree must be set prior to calling this.
\& Returns : list of strings (node ids)
\& Args    : none
.Ve
.SS "_check_names"
.IX Subsection "_check_names"
.Vb 8
\& Title   : _check_names
\& Usage   : if ($obj\->_check_names) { ... }
\& Function: Determine if all sequences in the alignment file have a corresponding
\&           node in the tree file. _alignment() and _tree() must be set
\&           prior to calling this.
\& Returns : boolean (will also warn about the specific problems when returning
\&           false)
\& Args    : none
.Ve
