.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Graph::Glyph::axis 3"
.TH Graph::Glyph::axis 3 "2003-11-21" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "draw"
.IX Subsection "draw"
.Vb 6
\& Title   : draw
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "x_intercept"
.IX Subsection "x_intercept"
.Vb 6
\& Title   : x_intercept
\& Usage   : $obj\->x_intercept($newval)
\& Function: 
\& Example : 
\& Returns : value of x_intercept (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "y_intercept"
.IX Subsection "y_intercept"
.Vb 6
\& Title   : y_intercept
\& Usage   : $obj\->y_intercept($newval)
\& Function: 
\& Example : 
\& Returns : value of y_intercept (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "x_fractional_ticks"
.IX Subsection "x_fractional_ticks"
.Vb 6
\& Title   : x_fractional_ticks
\& Usage   : $obj\->x_fractional_ticks($newval)
\& Function: 
\& Example : 
\& Returns : value of x_fractional_ticks (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "y_fractional_ticks"
.IX Subsection "y_fractional_ticks"
.Vb 6
\& Title   : y_fractional_ticks
\& Usage   : $obj\->y_fractional_ticks($newval)
\& Function: 
\& Example : 
\& Returns : value of y_fractional_ticks (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "x_absolute_ticks"
.IX Subsection "x_absolute_ticks"
.Vb 6
\& Title   : x_absolute_ticks
\& Usage   : $obj\->x_absolute_ticks($newval)
\& Function: 
\& Example : 
\& Returns : value of x_absolute_ticks (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "y_fractional_ticks"
.IX Subsection "y_fractional_ticks"
.Vb 6
\& Title   : y_fractional_ticks
\& Usage   : $obj\->y_fractional_ticks($newval)
\& Function: 
\& Example : 
\& Returns : value of y_fractional_ticks (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "x_intertick_labels"
.IX Subsection "x_intertick_labels"
.Vb 6
\& Title   : x_intertick_labels
\& Usage   : $obj\->x_intertick_labels($newval)
\& Function: 
\& Example : 
\& Returns : value of x_intertick_labels (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "x_tick_labels"
.IX Subsection "x_tick_labels"
.Vb 6
\& Title   : x_tick_labels
\& Usage   : $obj\->x_tick_labels($newval)
\& Function: 
\& Example : 
\& Returns : value of x_tick_labels (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "y_intertick_labels"
.IX Subsection "y_intertick_labels"
.Vb 6
\& Title   : y_intertick_labels
\& Usage   : $obj\->y_intertick_labels($newval)
\& Function: 
\& Example : 
\& Returns : value of y_intertick_labels (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "y_tick_labels"
.IX Subsection "y_tick_labels"
.Vb 6
\& Title   : y_tick_labels
\& Usage   : $obj\->y_tick_labels($newval)
\& Function: 
\& Example : 
\& Returns : value of y_tick_labels (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
