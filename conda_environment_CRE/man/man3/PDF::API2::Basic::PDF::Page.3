.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::PDF::Page 3"
.TH PDF::API2::Basic::PDF::Page 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Basic::PDF::Page \- Represents a PDF page, inherits from PDF::API2::Basic::PDF::Pages
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Represents a page of output in \s-1PDF.\s0 It also keeps track of the content stream,
any resources (such as fonts) being switched, etc.
.PP
Page inherits from Pages due to a number of shared methods. They are really
structurally quite different.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
A page has various working variables:
.IP "curstrm" 4
.IX Item "curstrm"
The currently open stream
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "PDF::API2::Basic::PDF::Page\->new($pdf, $parent, $index)"
.el .SS "PDF::API2::Basic::PDF::Page\->new($pdf, \f(CW$parent\fP, \f(CW$index\fP)"
.IX Subsection "PDF::API2::Basic::PDF::Page->new($pdf, $parent, $index)"
Creates a new page based on a pages object (perhaps the root object).
.PP
The page is also added to the parent at this point, so pages are ordered in
a \s-1PDF\s0 document in the order in which they are created rather than in the order
they are closed.
.PP
Only the essential elements in the page dictionary are created here, all others
are either optional or can be inherited.
.PP
The optional index value indicates the index in the parent list that this page
should be inserted (so that new pages need not be appended)
.ie n .SS "$p\->ship_out($pdf)"
.el .SS "\f(CW$p\fP\->ship_out($pdf)"
.IX Subsection "$p->ship_out($pdf)"
Ships the page out to the given output file context
