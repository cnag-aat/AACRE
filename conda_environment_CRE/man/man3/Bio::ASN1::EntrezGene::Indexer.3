.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::ASN1::EntrezGene::Indexer 3"
.TH Bio::ASN1::EntrezGene::Indexer 3 "2018-09-25" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::ASN1::EntrezGene::Indexer \- Indexes NCBI Sequence files.
.SH "VERSION"
.IX Header "VERSION"
version 1.73
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::ASN1::EntrezGene::Indexer;
\&
\&  # creating & using the index is just a few lines
\&  my $inx = Bio::ASN1::EntrezGene::Indexer\->new(
\&    \-filename => \*(Aqentrezgene.idx\*(Aq,
\&    \-write_flag => \*(AqWRITE\*(Aq); # needed for make_index call, but if opening
\&                             # existing index file, don\*(Aqt set write flag!
\&  $inx\->make_index(\*(AqHomo_sapiens\*(Aq, \*(AqMus_musculus\*(Aq, \*(AqRattus_norvegicus\*(Aq);
\&  my $seq = $inx\->fetch(10); # Bio::Seq obj for Entrez Gene #10
\&  # alternatively, if one prefers just a data structure instead of objects
\&  $seq = $inx\->fetch_hash(10); # a hash produced by Bio::ASN1::EntrezGene
\&                            # that contains all data in the Entrez Gene record
\&
\&  # note that in case you wonder, you can get the files \*(AqHomo_sapiens\*(Aq
\&  # from NCBI Entrez Gene ftp download, DATA/ASN/Mammalia directory
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::ASN1::EntrezGene::Indexer is a Perl Indexer for \s-1NCBI\s0 Entrez Gene genome
databases. It processes an \s-1ASN\s0.1\-formatted Entrez Gene record and stores the
file position for each record in a way compliant with Bioperl standard (in
fact its a subclass of Bioperl's index objects).
.PP
Note that this module does not parse record, because it needs to run fast and
grab only the gene ids.  For parsing record, use Bio::ASN1::EntrezGene, or
better yet, use Bio::SeqIO, format 'entrezgene'.
.PP
It takes this module (version 1.07) 21 seconds to index the human genome
Entrez Gene file (Apr. 5/2005 download) on one 2.4 GHz Intel Xeon processor.
.SH "METHODS"
.IX Header "METHODS"
.SS "fetch"
.IX Subsection "fetch"
.Vb 6
\&  Parameters: $geneid \- id for the Entrez Gene record to be retrieved
\&  Example:    my $hash = $indexer\->fetch(10); # get Entrez Gene #10
\&  Function:   fetch the data for the given Entrez Gene id.
\&  Returns:    A Bio::Seq object produced by Bio::SeqIO::entrezgene
\&  Notes:      One needs to have Bio::SeqIO::entrezgene installed before
\&                calling this function!
.Ve
.SS "fetch_hash"
.IX Subsection "fetch_hash"
.Vb 7
\&  Parameters: $geneid \- id for the Entrez Gene record to be retrieved
\&  Example:    my $hash = $indexer\->fetch_hash(10); # get Entrez Gene #10
\&  Function:   fetch a hash produced by Bio::ASN1::EntrezGene for given Entrez
\&                Gene id.
\&  Returns:    A data structure containing all data items from the Entrez
\&                Gene record.
\&  Notes:      Alternative to fetch()
.Ve
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.SS "_version"
.IX Subsection "_version"
.SS "_type_stamp"
.IX Subsection "_type_stamp"
.SS "_index_file"
.IX Subsection "_index_file"
.SS "_file_format"
.IX Subsection "_file_format"
.SS "_file_handle"
.IX Subsection "_file_handle"
.Vb 10
\&  Title   : _file_handle
\&  Usage   : $fh = $index\->_file_handle( INT )
\&  Function: Returns an open filehandle for the file
\&            index INT.  On opening a new filehandle it
\&            caches it in the @{$index\->_filehandle} array.
\&            If the requested filehandle is already open,
\&            it simply returns it from the array.
\&  Example : $fist_file_indexed = $index\->_file_handle( 0 );
\&  Returns : ref to a filehandle
\&  Args    : INT
\&  Notes   : This function is copied from Bio::Index::Abstract. Once that module
\&              changes file handle code like I do below to fit perl 5.005_03, this
\&              sub would be removed from this module
.Ve
.SH "PREREQUISITE"
.IX Header "PREREQUISITE"
Bio::ASN1::EntrezGene, Bioperl version that contains Stefan Kirov's
entrezgene.pm and all dependencies therein.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
Same as Bio::ASN1::EntrezGene
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For details on various parsers I generated for Entrez Gene, example scripts that
uses/benchmarks the modules, please see <http://sourceforge.net/projects/egparser/>.
Those other parsers etc. are included in V1.05 download.
.SH "CITATION"
.IX Header "CITATION"
Liu, Mingyi, and Andrei Grigoriev. \*(L"Fast parsers for Entrez Gene.\*(R"
Bioinformatics 21, no. 14 (2005): 3189\-3190.
.SH "OPERATION SYSTEMS SUPPORTED"
.IX Header "OPERATION SYSTEMS SUPPORTED"
Any \s-1OS\s0 that Perl & Bioperl run on.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing lists"
.IX Subsection "Mailing lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org              \- General discussion
\&  http://bioperl.org/Support.html    \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bio\-asn1\-entrezgene/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Dr. Mingyi Liu <mingyiliu@gmail.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This software is copyright (c) 2005 by Mingyi Liu, 2005 by \s-1GPC\s0 Biotech \s-1AG,\s0 and 2005 by Altana Research Institute.
.PP
This software is available under the same terms as the perl 5 programming language system itself.
