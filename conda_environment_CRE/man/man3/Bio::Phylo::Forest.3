.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Forest 3"
.TH Bio::Phylo::Forest 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Forest \- Container for tree objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\& my $forest = $fac\->create_forest;
\& my $tree = $fac\->create_tree;
\& $forest\->insert($tree);
\& print $forest\->to_nexus;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Phylo::Forest object models a set of trees. The object subclasses the
Bio::Phylo::Listable object, so look there for more methods available to
forest objects.
.SH "CALCULATIONS"
.IX Header "CALCULATIONS"
.IP "\fIcalc_split_frequency()\fR" 4
.IX Item "calc_split_frequency()"
Calculates frequency of provided split
.Sp
.Vb 7
\& Type    : Calculation
\& Title   : calc_split_frequency
\& Usage   : my $freq = $trees\->calc_split_frequency([$node1,$node2]);
\& Function: Calculates split frequency
\& Returns : Scalar, a number
\& Args    : An array of taxon objects, or a taxa object
\& Comment :
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIinsert()\fR" 4
.IX Item "insert()"
Inserts trees in forest.
.Sp
.Vb 8
\& Type    : Method
\& Title   : insert
\& Usage   : $trees\->insert( $tree1, $tree2, ... );
\& Function: Inserts trees in forest.
\& Returns : A Bio::Phylo::Forest object.
\& Args    : Trees
\& Comment : The last seen tree that is set as default
\&           becomes the default for the entire forest
.Ve
.IP "\fIget_default_tree()\fR" 4
.IX Item "get_default_tree()"
Gets the default tree in the forest.
.Sp
.Vb 8
\& Type    : Method
\& Title   : get_default_tree
\& Usage   : my $tree = $trees\->get_default_tree;
\& Function: Gets the default tree in the forest.
\& Returns : A Bio::Phylo::Forest::Tree object.
\& Args    : None
\& Comment : If no default tree has been set, 
\&           returns first tree.
.Ve
.IP "\fIcheck_taxa()\fR" 4
.IX Item "check_taxa()"
Validates taxon links of nodes in invocant's trees.
.Sp
.Vb 7
\& Type    : Method
\& Title   : check_taxa
\& Usage   : $trees\->check_taxa;
\& Function: Validates the taxon links of the
\&           nodes of the trees in $trees
\& Returns : A validated Bio::Phylo::Forest object.
\& Args    : None
.Ve
.IP "\fImake_consensus()\fR" 4
.IX Item "make_consensus()"
Creates a consensus tree.
.Sp
.Vb 10
\& Type    : Method
\& Title   : make_consensus
\& Usage   : my $tree = $obj\->make_consensus
\& Function: Creates a consensus tree
\& Returns : $tree
\& Args    : Optional:
\&           \-fraction => a fraction that specifies the cutoff frequency for including
\&                    bipartitions in the consensus. Default is 0.5 (MajRule)
\&           \-branches => \*(Aqfrequency\*(Aq or \*(Aqaverage\*(Aq, sets branch lengths to bipartition
\&                        frequency or average branch length in input trees
.Ve
.IP "\fImake_matrix()\fR" 4
.IX Item "make_matrix()"
Creates an \s-1MRP\s0 matrix object.
.Sp
.Vb 6
\& Type    : Method
\& Title   : make_matrix
\& Usage   : my $matrix = $obj\->make_matrix
\& Function: Creates an MRP matrix object
\& Returns : $matrix
\& Args    : NONE
.Ve
.IP "\fImake_taxa()\fR" 4
.IX Item "make_taxa()"
Creates a taxa block from the objects contents if none exists yet.
.Sp
.Vb 6
\& Type    : Method
\& Title   : make_taxa
\& Usage   : my $taxa = $obj\->make_taxa
\& Function: Creates a taxa block from the objects contents if none exists yet.
\& Returns : $taxa
\& Args    : NONE
.Ve
.IP "\fIto_newick()\fR" 4
.IX Item "to_newick()"
Serializes invocant to newick string.
.Sp
.Vb 8
\& Type    : Stringifier
\& Title   : to_newick
\& Usage   : my $string = $forest\->to_newick;
\& Function: Turns the invocant forest object 
\&           into a newick string, one line per tree
\& Returns : SCALAR
\& Args    : The same arguments as 
\&           Bio::Phylo::Forest::Tree::to_newick
.Ve
.IP "\fIto_nexus()\fR" 4
.IX Item "to_nexus()"
Serializer to nexus format.
.Sp
.Vb 8
\& Type    : Format convertor
\& Title   : to_nexus
\& Usage   : my $data_block = $matrix\->to_nexus;
\& Function: Converts matrix object into a nexus data block.
\& Returns : Nexus data block (SCALAR).
\& Args    : Trees can be formatted using the same arguments as those
\&           passed to Bio::Phylo::Unparsers::Newick. In addition, you
\&           can provide: 
\&           
\&           # as per mesquite\*(Aqs inter\-block linking system (default is false):
\&           \-links => 1 (to create a TITLE token, and a LINK token, if applicable)
\&           
\&           # rooting is determined based on basal trichotomy. "token" means \*(AqTREE\*(Aq or \*(AqUTREE\*(Aq
\&           # is used, "comment" means [&R] or [&U] is used, "nhx" means [%unrooted=on] or
\&           # [%unrooted=off] if used, default is "comment"
\&           \-rooting => one of (token|comment|nhx)
\&           
\&           # to map taxon names to indices (default is true)
\&           \-make_translate => 1 (autogenerate translation table, overrides \-translate => {})
\&                   
\&                   # when making a translation table, which index to start (default is
\&                   # 1, BayesTraits needs 0)
\&                   \-translate_start => 1
\& Comments:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Listable" 4
.IX Item "Bio::Phylo::Listable"
The forest object inherits from the Bio::Phylo::Listable
object. The methods defined therein are applicable to forest objects.
.IP "Bio::Phylo::Taxa::TaxaLinker" 4
.IX Item "Bio::Phylo::Taxa::TaxaLinker"
The forest object inherits from the Bio::Phylo::Taxa::TaxaLinker
object. The methods defined therein are applicable to forest objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
