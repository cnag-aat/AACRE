.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Mediators::TaxaMediator 3"
.TH Bio::Phylo::Mediators::TaxaMediator 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Mediators::TaxaMediator \- Mediator for links between taxa and other objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # no direct usage
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module manages links between taxon objects and other objects linked to 
them. It is an implementation of the Mediator design pattern (e.g. see 
<http://www.atug.com/andypatterns/RM.htm>,
<http://home.earthlink.net/~huston2/dp/mediator.html>).
.PP
Methods defined in this module are meant only for internal usage by Bio::Phylo.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
TaxaMediator constructor.
.Sp
.Vb 7
\& Type    : Constructor
\& Title   : new
\& Usage   : my $mediator = Bio::Phylo::Taxa::TaxaMediator\->new;
\& Function: Instantiates a Bio::Phylo::Taxa::TaxaMediator
\&           object.
\& Returns : A Bio::Phylo::Taxa::TaxaMediator object (singleton).
\& Args    : None.
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fIregister()\fR" 4
.IX Item "register()"
Stores argument in invocant's cache.
.Sp
.Vb 7
\& Type    : Method
\& Title   : register
\& Usage   : $mediator\->register( $obj );
\& Function: Stores an object in mediator\*(Aqs cache, if relevant
\& Returns : $self
\& Args    : An object, $obj
\& Comments: This method is called every time an object is instantiated.
.Ve
.IP "\fIunregister()\fR" 4
.IX Item "unregister()"
Removes argument from invocant's cache.
.Sp
.Vb 7
\& Type    : Method
\& Title   : unregister
\& Usage   : $mediator\->unregister( $obj );
\& Function: Cleans up mediator\*(Aqs cache of $obj and $obj\*(Aqs relations
\& Returns : $self
\& Args    : An object, $obj
\& Comments: This method is called every time an object is destroyed.
.Ve
.IP "\fIset_link()\fR" 4
.IX Item "set_link()"
Creates link between objects.
.Sp
.Vb 11
\& Type    : Method
\& Title   : set_link
\& Usage   : $mediator\->set_link( \-one => $obj1, \-many => $obj2 );
\& Function: Creates link between objects
\& Returns : $self
\& Args    : \-one  => $obj1 (source of a one\-to\-many relationship)
\&           \-many => $obj2 (target of a one\-to\-many relationship)
\& Comments: This method is called from within, for example, set_taxa
\&           method calls. A call like $taxa\->set_matrix( $matrix ),
\&           and likewise a call like $matrix\->set_taxa( $taxa ), are 
\&           both internally rerouted to:
\&
\&           $mediator\->set_link( 
\&                \-one  => $taxa, 
\&                \-many => $matrix 
\&           );
.Ve
.IP "\fIget_link()\fR" 4
.IX Item "get_link()"
Retrieves link between objects.
.Sp
.Vb 10
\& Type    : Method
\& Title   : get_link
\& Usage   : $mediator\->get_link( 
\&               \-source => $obj, 
\&               \-type   => _CONSTANT_,
\&           );
\& Function: Retrieves link between objects
\& Returns : Linked object
\& Args    : \-source => $obj (required, the source of the link)
\&           \-type   => a constant from Bio::Phylo::Util::CONSTANT
\&
\&           (\-type is optional, used to filter returned results in 
\&           one\-to\-many query).
\&
\& Comments: This method is called from within, for example, get_taxa
\&           method calls. A call like $matrix\->get_taxa()
\&           and likewise a call like $forest\->get_taxa(), are 
\&           both internally rerouted to:
\&
\&           $mediator\->get_link( 
\&               \-source => $self # e.g. $matrix or $forest           
\&           );
\&
\&           A call like $taxa\->get_matrices() is rerouted to:
\&
\&           $mediator\->get_link( \-source => $taxa, \-type => _MATRIX_ );
.Ve
.IP "\fIremove_link()\fR" 4
.IX Item "remove_link()"
Removes link between objects.
.Sp
.Vb 7
\& Type    : Method
\& Title   : remove_link
\& Usage   : $mediator\->remove_link( \-one => $obj1, \-many => $obj2 );
\& Function: Removes link between objects
\& Returns : $self
\& Args    : \-one  => $obj1 (source of a one\-to\-many relationship)
\&           \-many => $obj2 (target of a one\-to\-many relationship)
\&
\&           (\-many argument is optional)
\&
\& Comments: This method is called from within, for example, 
\&           unset_taxa method calls. A call like $matrix\->unset_taxa() 
\&           is rerouted to:
\&
\&           $mediator\->remove_link( \-many => $matrix );
\&
\&           A call like $taxa\->unset_matrix( $matrix ); is rerouted to:
\&
\&           $mediator\->remove_link( \-one => $taxa, \-many => $matrix );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
