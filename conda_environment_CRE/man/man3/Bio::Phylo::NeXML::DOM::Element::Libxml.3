.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::DOM::Element::Libxml 3"
.TH Bio::Phylo::NeXML::DOM::Element::Libxml 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::NeXML::DOM::Element::Libxml \- XML DOM element mappings to the 
"XML::LibXML" package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Don't use directly; use Bio::Phylo::NeXML::DOM\->new( \-format => 'libxml' ) instead.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides mappings the methods specified in the 
Bio::Phylo::NeXML::DOM::Element abstract class to the 
\&\f(CW\*(C`XML::LibXML::Element\*(C'\fR package.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark A. Jensen ( maj \-at\- fortinbras \-dot\- us )
.SS "Constructor"
.IX Subsection "Constructor"
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 8
\& Type    : Constructor
\& Title   : new
\& Usage   : $elt = Bio::Phylo::NeXML::DOM::Element\->new($tag, $attr)
\& Function: Create a new XML DOM element
\& Returns : DOM element object
\& Args    : Optional: 
\&           \*(Aq\-tag\*(Aq => $tag  \- tag name as string
\&           \*(Aq\-attributes\*(Aq => $attr \- hashref of attributes/values
.Ve
.IP "\fIparse_element()\fR" 4
.IX Item "parse_element()"
.Vb 6
\& Type    : Factory method
\& Title   : parse_element
\& Usage   : $elt = $dom\->parse_element($text)
\& Function: Create a new XML DOM element from XML text
\& Returns : DOM element
\& Args    : An XML String
.Ve
.SS "Tagname mutators/accessors"
.IX Subsection "Tagname mutators/accessors"
.IP "\fIget_tag()\fR" 4
.IX Item "get_tag()"
.Vb 6
\& Type    : Accessor
\& Title   : get_tag
\& Usage   : $elt\->get_tag()
\& Function: Get tag name
\& Returns : Tag name as scalar string
\& Args    : none
.Ve
.IP "\fIset_tag()\fR" 4
.IX Item "set_tag()"
.Vb 6
\& Type    : Mutator
\& Title   : set_tag
\& Usage   : $elt\->set_tag( $tagname )
\& Function: Set tagname
\& Returns : True on success
\& Args    : Tag name as scalar string
.Ve
.SS "Attribute mutators/accessors"
.IX Subsection "Attribute mutators/accessors"
.IP "\fIget_attributes()\fR" 4
.IX Item "get_attributes()"
.Vb 6
\& Type    : Accessor
\& Title   : get_attributes
\& Usage   : $elt\->get_attributes( @attribute_names )
\& Function: Get attribute values
\& Returns : Array of attribute values
\& Args    : [an array of] attribute name[s] as string[s]
.Ve
.IP "\fIset_attributes()\fR" 4
.IX Item "set_attributes()"
.Vb 6
\& Type    : Mutator
\& Title   : set_attributes
\& Usage   : $elt\->set_attributes( @attribute_assoc_array )
\& Function: Set attribute values
\& Returns : True on success
\& Args    : An associative array of form ( $name => $value, ... )
.Ve
.IP "\fIclear_attributes()\fR" 4
.IX Item "clear_attributes()"
.Vb 6
\& Type    : Mutator
\& Title   : clear_attributes
\& Usage   : $elt\->clear_attributes( @attribute_names )
\& Function: Remove attributes from element
\& Returns : Hash of removed attributes/values
\& Args    : Array of attribute names
.Ve
.SS "Content mutators/accessors"
.IX Subsection "Content mutators/accessors"
.IP "\fIset_text()\fR" 4
.IX Item "set_text()"
.Vb 6
\& Type    : Mutator
\& Title   : set_text
\& Usage   : $elt\->set_text($text_content)
\& Function: Add a #TEXT node to the element 
\& Returns : True on success
\& Args    : scalar string
.Ve
.IP "\fIget_text()\fR" 4
.IX Item "get_text()"
.Vb 6
\& Type    : Accessor
\& Title   : get_text
\& Usage   : $elt\->get_text()
\& Function: Retrieve direct #TEXT descendants as (concatenated) string
\& Returns : scalar string (the text content) or undef if no text nodes
\& Args    : none
.Ve
.IP "\fIclear_text()\fR" 4
.IX Item "clear_text()"
.Vb 6
\& Type    : Mutator
\& Title   : clear_text
\& Usage   : $elt\->clear_text()
\& Function: Remove direct #TEXT descendant nodes from element
\& Returns : True on success; false if no #TEXT nodes removed
\& Args    : none
.Ve
.SS "Traversal methods"
.IX Subsection "Traversal methods"
.IP "\fIget_parent()\fR" 4
.IX Item "get_parent()"
.Vb 6
\& Type    : Accessor
\& Title   : get_parent
\& Usage   : $elt\->get_parent()
\& Function: Get parent DOM node of invocant 
\& Returns : Element object or undef if invocant is root
\& Args    : none
.Ve
.IP "\fIget_children()\fR" 4
.IX Item "get_children()"
.Vb 6
\& Type    : Accessor
\& Title   : get_children
\& Usage   : $elt\->get_children()
\& Function: Get child nodes of invocant
\& Returns : Array of Elements
\& Args    : none
.Ve
.IP "\fIget_first_daughter()\fR" 4
.IX Item "get_first_daughter()"
.Vb 6
\& Type    : Accessor
\& Title   : get_first_daughter
\& Usage   : $elt\->get_first_daughter()
\& Function: Get first child (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is childless
\& Args    : none
.Ve
.IP "\fIget_last_daughter()\fR" 4
.IX Item "get_last_daughter()"
.Vb 6
\& Type    : Accessor
\& Title   : get_last_daughter
\& Usage   : $elt\->get_last_daughter()
\& Function: Get last child (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is childless
\& Args    : none
.Ve
.IP "\fIget_next_sister()\fR" 4
.IX Item "get_next_sister()"
.Vb 6
\& Type    : Accessor
\& Title   : get_next_sister
\& Usage   : $elt\->get_next_sister()
\& Function: Gets next sibling (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is the rightmost element
\& Args    : none
.Ve
.IP "\fIget_previous_sister()\fR" 4
.IX Item "get_previous_sister()"
.Vb 6
\& Type    : Accessor
\& Title   : get_previous_sister
\& Usage   : $elt\->get_previous_sister()
\& Function: Get previous sibling (as defined by underlying package) of invocant
\& Returns : Element object or undef if invocant is leftmost element
\& Args    : none
.Ve
.IP "\fIget_elements_by_tagname()\fR" 4
.IX Item "get_elements_by_tagname()"
.Vb 7
\& Type    : Accessor
\& Title   : get_elements_by_tagname
\& Usage   : $elt\->get_elements_by_tagname($tagname)
\& Function: Get array of elements having given tag name from invocant\*(Aqs 
\&           descendants
\& Returns : Array of elements or undef if no match
\& Args    : tag name as string
.Ve
.SS "Prune and graft methods"
.IX Subsection "Prune and graft methods"
.IP "\fIset_child()\fR" 4
.IX Item "set_child()"
.Vb 8
\& Type    : Mutator
\& Title   : set_child
\& Usage   : $elt\->set_child($child)
\& Function: Add child element object to invocant\*(Aqs descendants
\& Returns : the element object added
\& Args    : Element object
\& Note    : See caution at 
\&           L<http://search.cpan.org/~pajas/XML\-LibXML\-1.69/lib/XML/LibXML/Node.pod#addChild>
.Ve
.IP "\fIprune_child()\fR" 4
.IX Item "prune_child()"
.Vb 7
\& Type    : Mutator
\& Title   : prune_child
\& Usage   : $elt\->prune_child($child)
\& Function: Remove the subtree rooted by $child from among the invocant\*(Aqs
\&           descendants
\& Returns : $child or undef if $child is not among the children of invocant
\& Args    : Element object
.Ve
.SS "Output methods"
.IX Subsection "Output methods"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
.Vb 6
\& Type    : Serializer
\& Title   : to_xml
\& Usage   : $elt\->to_xml
\& Function: Create XML string from subtree rooted by invocant
\& Returns : XML string
\& Args    : Formatting arguments as allowed by underlying package
.Ve
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
