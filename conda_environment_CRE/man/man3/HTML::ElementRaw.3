.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "HTML::ElementRaw 3"
.TH HTML::ElementRaw 3 "2010-06-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::ElementRaw \- Perl extension for HTML::Element(3).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&  use HTML::ElementRaw;
\&  $er = new HTML::ElementRaw;
\&  $text = \*(Aq<p>I would like this &nbsp; HTML to not be encoded</p>\*(Aq;
\&  $er\->push_content($text);
\&  $h = new HTML::Element \*(Aqh2\*(Aq;
\&  $h\->push_content($er);
\&  # Now $text will appear as you typed it, non\-escaped,
\&  # embedded in the HTML produced by $h.
\&  print $h\->as_HTML;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a way to graft raw \s-1HTML\s0 strings into your \fIHTML::Element\fR\|(3)
structures.  Since they represent raw text, these can only be leaves in
your \s-1HTML\s0 element tree.  The only methods that are of any real
use in this degenerate element are \fIpush_content()\fR and \fIas_HTML()\fR.
The \fIpush_content()\fR method will simply prepend the provided text to
the current content.  If you happen to pass an HTML::element to
push_content, the output of the \fIas_HTML()\fR method in that element
will be prepended.
.SH "REQUIRES"
.IX Header "REQUIRES"
\&\fIHTML::Element\fR\|(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthew P. Sisk, <\fIsisk@mojotoad.com\fR>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998\-2010 Matthew P. Sisk.
All rights reserved. All wrongs revenged. This program is free
software; you can redistribute it and/or modify it under the
same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIHTML::Element\fR\|(3), \fIHTML::ElementSuper\fR\|(3), \fIHTML::Element::Glob\fR\|(3), \fIHTML::ElementTable\fR\|(3), \fIperl\fR\|(1).
