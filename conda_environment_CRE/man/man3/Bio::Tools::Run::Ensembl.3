.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Ensembl 3"
.TH Bio::Tools::Run::Ensembl 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Ensembl \- A simplified front\-end for setting up the registry
                           for, and then using an Ensembl database with the
                           Ensembl Perl API.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Run::Ensembl;
\&  
\&  # get a Bio::EnsEMBL::Gene for agene of interest
\&  my $gene = Bio::Tools::Run::Ensembl\->get_gene_by_name(\-species => \*(Aqhuman\*(Aq,
\&                                                        \-name => \*(AqBRCA2\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple way of accessing the Ensembl database to retrieve gene
information. Rather than learn the whole Ensembl Perl \s-1API,\s0 you only need to
install it (that is, check it out from \s-1CVS:\s0
http://www.ensembl.org/info/docs/api/api_installation.html
\&\- ignore the information about BioPerl version) and then you can get information
about a gene using \fIget_gene_by_name()\fR.
.PP
For gene retrieval it is especially useful compared to direct Ensembl Perl \s-1API\s0
usage since it can use information from alternate data sources (orthologues,
Swissprot, Entrez) to get your gene.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "registry_setup"
.IX Subsection "registry_setup"
.Vb 10
\& Title   : registry_setup
\& Usage   : Bio::Tools::Run::Ensembl\->registry_setup(\-host => $host,
\&                                                    \-user => $user);
\&           if (Bio::Tools::Run::Ensembl\->registry_setup) {...}
\& Function: Configure the ensembl registy to use a certain database.
\&           The database must be an Ensembl database compatible with the
\&           Ensembl Perl API, and you must have that API installed for this
\&           method to return true. Defaults to anonymous access to
\&           ensembldb.ensembl.org
\&           Or just ask if the registry is setup and the database ready to use.
\& Returns : boolean (true if Registry loaded and ready to use)
\& Args    : \-host    => host name (defaults to \*(Aqensembldb.ensembl.org\*(Aq)
\&           \-user    => username (defaults to \*(Aqanonymous\*(Aq)
\&           \-pass    => password (no default)
\&           \-port    => port (defaults to 3306)
\&           \-db_version => version of ensembl database to use, if different from
\&                          your installed Ensembl modules
\&           \-verbose => boolean (1 to print messages during database connection)
\&           \-no_database => boolean (1 to disable database access, causing this
\&                           method to always return false)
.Ve
.SS "get_adaptor"
.IX Subsection "get_adaptor"
.Vb 8
\& Title   : get_adaptor
\& Usage   : my $adaptor = Bio::Tools::Run::Ensembl\->get_adaptor($species, $type);
\& Function: Get a species\-specific \*(Aqcore\*(Aq database adaptor, optionally of a
\&           certain type.
\& Returns : Bio::EnsEMBL::DBSQL::DBAdaptor, OR if a certain type requested, a
\&           Bio::EnsEMBL::DBSQL::${type}Adaptor
\& Args    : Bio::Species or string (species name) (REQUIRED), AND optionally
\&           string (the type of adaptor, eg. \*(AqGene\*(Aq or \*(AqSlice\*(Aq).
.Ve
.SS "get_gene_by_name"
.IX Subsection "get_gene_by_name"
.Vb 7
\& Title   : get_gene_by_name
\& Usage   : my $gene = Bio::Tools::Run::Ensembl\->get_gene_by_name();
\& Function: Get a gene given species and a gene name. If multiple genes match
\&           this combination, tries to pick the \*(Aqbest\*(Aq match.
\& Returns : Bio::EnsEMBL::Gene
\& Args    : \-species => Bio::Species or string (species name), REQUIRED
\&           \-name => string: gene name, REQUIRED
\&
\&           If searching for the supplied gene name in the supplied species
\&           results in no genes, or more than one, you can choose what else is
\&           attempted in order to find just one gene:
\&
\&           \-use_orthologues   => Bio::Species or string (species name), or array
\&                                 ref of such things: see if any of these
\&                                 supplied species have (unambiguously) a gene
\&                                 with the supplied gene name and if a
\&                                 (one\-to\-one) orthologue of that gene in that
\&                                 species is present in the main desired species
\&                                 supplied to \-species, returns that orthologous
\&                                 gene. (default: none, do not use orthologues)
\&           \-use_swiss_lookup  => boolean: queries swissprot at expasy and if a
\&                                 suitable match is found, queries ensembl with
\&                                 the swissprot id. (default: 0, do not use
\&                                 swiss)
\&           \-use_entrez_lookup => boolean: queries entrez at the NCBI server if
\&                                 (only) a single gene could not be found by any
\&                                 other method, then query ensembl with the
\&                                 entrez gene id. (default: 0, do not use NCBI)
\&
\&           (Attempts proceed in this order and return as soon as one method is
\&           successful.)
\&
\&           \-strict => boolean: return undef with no warnings if more than one,
\&                      or zero genes were found. (default: 0, warnings are issued
\&                      and if many genes were found, one of them is returned)
.Ve
