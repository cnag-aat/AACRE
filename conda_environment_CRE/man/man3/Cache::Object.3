.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Cache::Object 3"
.TH Cache::Object 3 "2015-01-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cache::Object \-\- the data stored in a Cache.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object is used by classes implementing the Cache interface as an
object oriented wrapper around the data.  End users will not normally
use Object directly, but it can be retrieved via the get_object method
on the Cache::Cache interface.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Cache::Object;
\&
\& my $object = new Cache::Object( );
\&
\& $object\->set_key( $key );
\& $object\->set_data( $data );
\& $object\->set_expires_at( $expires_at );
\& $object\->set_created_at( $created_at );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew(  )\fR" 4
.IX Item "new( )"
Construct a new Cache::Object.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.IP "\fB(get|set)_accessed_at\fR" 4
.IX Item "(get|set)_accessed_at"
The time at which the object was last accessed.  Various cache
implementations will use the accessed_at property to store information
for \s-1LRU\s0 algorithms.  There is no guarantee that all caches will update
this field, however.
.IP "\fB(get|set)_created_at\fR" 4
.IX Item "(get|set)_created_at"
The time at which the object was created.
.IP "\fB(get|set)_data\fR" 4
.IX Item "(get|set)_data"
A scalar containing or a reference pointing to the data to be stored.
.IP "\fB(get|set)_expires_at\fR" 4
.IX Item "(get|set)_expires_at"
The time at which the object should expire from the cache.
.IP "\fB(get|set)_key\fR" 4
.IX Item "(get|set)_key"
The key under which the object was stored.
.IP "\fB(get|set)_size\fR" 4
.IX Item "(get|set)_size"
The size of the frozen version of this object
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cache::Cache
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author: DeWitt Clinton <dewitt@unto.net>
.PP
Last author:     \f(CW$Author:\fR dclinton $
.PP
Copyright (C) 2001\-2003 DeWitt Clinton
