.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Matrices::Datatype 3"
.TH Bio::Phylo::Matrices::Datatype 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Matrices::Datatype \- Validator of character state data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # No direct usage
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a superclass for objects that validate character data. Objects that
inherit from this class (typically those in the
Bio::Phylo::Matrices::Datatype::* namespace) can check strings and arrays of
character data for invalid symbols, and split and join strings and arrays
in a way appropriate for the type (on whitespace for continuous data,
on single characters for categorical data).
Bio::Phylo::Matrices::Matrix objects and Bio::Phylo::Matrices::Datum
internally delegate validation of their contents to these datatype objects;
there is no normal usage in which you'd have to deal with datatype objects 
directly.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Datatype constructor.
.Sp
.Vb 7
\& Type    : Constructor
\& Title   : new
\& Usage   : No direct usage, is called by TypeSafeData classes;
\& Function: Instantiates a Datatype object
\& Returns : a Bio::Phylo::Matrices::Datatype child class
\& Args    : $type (optional, one of continuous, custom, dna,
\&           mixed, protein, restriction, rna, standard)
.Ve
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_lookup()\fR" 4
.IX Item "set_lookup()"
Sets state lookup table.
.Sp
.Vb 11
\& Type    : Mutator
\& Title   : set_lookup
\& Usage   : $obj\->set_lookup($hashref);
\& Function: Sets the state lookup table.
\& Returns : Modified object.
\& Args    : Argument must be a hash
\&           reference that maps allowed
\&           single character symbols
\&           (including ambiguity symbols)
\&           onto the equivalent set of
\&           non\-ambiguous symbols
.Ve
.IP "\fIset_missing()\fR" 4
.IX Item "set_missing()"
Sets missing data symbol.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_missing
\& Usage   : $obj\->set_missing(\*(Aq?\*(Aq);
\& Function: Sets the symbol for missing data
\& Returns : Modified object.
\& Args    : Argument must be a single
\&           character, default is \*(Aq?\*(Aq
.Ve
.IP "\fIset_gap()\fR" 4
.IX Item "set_gap()"
Sets gap symbol.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_gap
\& Usage   : $obj\->set_gap(\*(Aq\-\*(Aq);
\& Function: Sets the symbol for gaps
\& Returns : Modified object.
\& Args    : Argument must be a single
\&           character, default is \*(Aq\-\*(Aq
.Ve
.IP "\fIset_metas_for_states()\fR" 4
.IX Item "set_metas_for_states()"
Assigns all metadata annotations for all state symbols
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_metas_for_states
\& Usage   : $obj\->set_metas_for_states({ $state => [ $m1, $m2 ] });
\& Function: Assigns all metadata annotations for all state symbols
\& Returns : Modified object.
\& Args    : A hash reference of state symbols with metadata arrays
.Ve
.IP "\fIadd_meta_for_state()\fR" 4
.IX Item "add_meta_for_state()"
Adds a metadata annotation for a state symbol
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : add_meta_for_state
\& Usage   : $obj\->add_meta_for_state($meta,$state);
\& Function: Adds a metadata annotation for a state symbol
\& Returns : Modified object.
\& Args    : A Bio::Phylo::NeXML::Meta object and a state symbol
.Ve
.IP "\fIremove_meta_for_state()\fR" 4
.IX Item "remove_meta_for_state()"
Removes a metadata annotation for a state symbol
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : remove_meta_for_state
\& Usage   : $obj\->remove_meta_for_state($meta,$state);
\& Function: Removes a metadata annotation for a state symbol
\& Returns : Modified object.
\& Args    : A Bio::Phylo::NeXML::Meta object and a state symbol
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_type()\fR" 4
.IX Item "get_type()"
Gets data type as string.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_type
\& Usage   : my $type = $obj\->get_type;
\& Function: Returns the object\*(Aqs datatype
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_ids_for_special_symbols()\fR" 4
.IX Item "get_ids_for_special_symbols()"
Gets state-to-id mapping for missing and gap symbols
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_ids_for_special_symbols
\& Usage   : my %ids = %{ $obj\->get_ids_for_special_symbols };
\& Function: Returns state\-to\-id mapping
\& Returns : A hash reference, keyed on symbol, with UID values
\& Args    : Optional, a boolean:
\&           true  => prefix state ids with \*(Aqs\*(Aq
\&           false => keep ids numerical
.Ve
.IP "\fIget_ids_for_states()\fR" 4
.IX Item "get_ids_for_states()"
Gets state-to-id mapping
.Sp
.Vb 10
\& Type    : Accessor
\& Title   : get_ids_for_states
\& Usage   : my %ids = %{ $obj\->get_ids_for_states };
\& Function: Returns state\-to\-id mapping
\& Returns : A hash reference, keyed on symbol, with UID values
\& Args    : Optional, a boolean:
\&           true  => prefix state ids with \*(Aqs\*(Aq
\&           false => keep ids numerical
\& Note    : This returns a mapping to alphanumeric states; special
\&           symbols (for missing data and gaps) are handled separately
.Ve
.IP "\fIget_states_for_symbol()\fR" 4
.IX Item "get_states_for_symbol()"
Gets set of fundamental states for an ambiguity symbol
.Sp
.Vb 9
\& Type    : Accessor
\& Title   : get_states_for_symbol
\& Usage   : my @states = @{ $obj\->get_states_for_symbol(\*(AqN\*(Aq) };
\& Function: Returns the set of states for an ambiguity symbol
\& Returns : An array ref of symbols
\& Args    : An ambiguity symbol
\& Comments: If supplied argument is a fundamental state, an array
\&           ref with just that state is returned, e.g. \*(AqA\*(Aq returns
\&           [\*(AqA\*(Aq] for DNA and RNA
.Ve
.IP "\fIget_symbol_for_states()\fR" 4
.IX Item "get_symbol_for_states()"
Gets ambiguity symbol for a set of states
.Sp
.Vb 9
\& Type    : Accessor
\& Title   : get_symbol_for_states
\& Usage   : my $state = $obj\->get_symbol_for_states(\*(AqA\*(Aq,\*(AqC\*(Aq);
\& Function: Returns the ambiguity symbol for a set of states
\& Returns : A symbol (SCALAR)
\& Args    : A set of symbols
\& Comments: If no symbol exists in the lookup
\&           table for the given set of states,
\&           a new \- numerical \- one is created
.Ve
.IP "\fIget_lookup()\fR" 4
.IX Item "get_lookup()"
Gets state lookup table.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_lookup
\& Usage   : my $lookup = $obj\->get_lookup;
\& Function: Returns the object\*(Aqs lookup hash
\& Returns : A hash reference
\& Args    : None
.Ve
.IP "\fIget_missing()\fR" 4
.IX Item "get_missing()"
Gets missing data symbol.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_missing
\& Usage   : my $missing = $obj\->get_missing;
\& Function: Returns the object\*(Aqs missing data symbol
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_gap()\fR" 4
.IX Item "get_gap()"
Gets gap symbol.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_gap
\& Usage   : my $gap = $obj\->get_gap;
\& Function: Returns the object\*(Aqs gap symbol
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_meta_for_state()\fR" 4
.IX Item "get_meta_for_state()"
Gets metadata annotations (if any) for the provided state symbol
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_meta_for_state
\& Usage   : my @meta = @{ $obj\->get_meta_for_state };
\& Function: Gets metadata annotations for a state symbol
\& Returns : An array reference of Bio::Phylo::NeXML::Meta objects
\& Args    : A state symbol
.Ve
.IP "\fIget_metas_for_states()\fR" 4
.IX Item "get_metas_for_states()"
Gets metadata annotations (if any) for all state symbols
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_metas_for_states
\& Usage   : my @meta = @{ $obj\->get_metas_for_states };
\& Function: Gets metadata annotations for state symbols
\& Returns : An array reference of Bio::Phylo::NeXML::Meta objects
\& Args    : None
.Ve
.SS "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIis_ambiguous()\fR" 4
.IX Item "is_ambiguous()"
Tests whether the supplied state symbol represents an ambiguous (polymorphic
or uncertain) state. For example, for the most commonly-used alphabet for
\&\s-1DNA\s0 states, the symbol 'N' represents complete uncertainty, the actual state
could be any of 'A', 'C', 'G' or 'T', and so this method would return a true
value.
.Sp
.Vb 8
\& Type    : Test
\& Title   : is_ambiguous
\& Usage   : if ( $obj\->is_ambiguous(\*(AqN\*(Aq) ) {
\&              # do something
\&           }
\& Function: Returns true if argument is an ambiguous state symbol
\& Returns : BOOLEAN
\& Args    : A state symbol
.Ve
.IP "\fIis_valid()\fR" 4
.IX Item "is_valid()"
Validates argument.
.Sp
.Vb 8
\& Type    : Test
\& Title   : is_valid
\& Usage   : if ( $obj\->is_valid($datum) ) {
\&              # do something
\&           }
\& Function: Returns true if $datum only contains valid characters
\& Returns : BOOLEAN
\& Args    : A Bio::Phylo::Matrices::Datum object
.Ve
.IP "\fIis_same()\fR" 4
.IX Item "is_same()"
Compares data type objects.
.Sp
.Vb 8
\& Type    : Test
\& Title   : is_same
\& Usage   : if ( $obj\->is_same($obj1) ) {
\&              # do something
\&           }
\& Function: Returns true if $obj1 contains the same validation rules
\& Returns : BOOLEAN
\& Args    : A Bio::Phylo::Matrices::Datatype::* object
.Ve
.SS "\s-1UTILITY METHODS\s0"
.IX Subsection "UTILITY METHODS"
.IP "\fIsplit()\fR" 4
.IX Item "split()"
Splits argument string of characters following appropriate rules.
.Sp
.Vb 6
\& Type    : Utility method
\& Title   : split
\& Usage   : $obj\->split($string)
\& Function: Splits $string into characters
\& Returns : An array reference of characters
\& Args    : A string
.Ve
.IP "\fIjoin()\fR" 4
.IX Item "join()"
Joins argument array ref of characters following appropriate rules.
.Sp
.Vb 6
\& Type    : Utility method
\& Title   : join
\& Usage   : $obj\->join($arrayref)
\& Function: Joins $arrayref into a string
\& Returns : A string
\& Args    : An array reference
.Ve
.SS "\s-1SERIALIZERS\s0"
.IX Subsection "SERIALIZERS"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
Writes data type definitions to xml
.Sp
.Vb 6
\& Type    : Serializer
\& Title   : to_xml
\& Usage   : my $xml = $obj\->to_xml
\& Function: Writes data type definitions to xml
\& Returns : An xml string representation of data type definition
\& Args    : None
.Ve
.IP "\fIto_dom()\fR" 4
.IX Item "to_dom()"
Analog to to_xml.
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_dom
\& Usage   : $type\->to_dom
\& Function: Generates a DOM subtree from the invocant
\&           and its contained objects
\& Returns : an <XML Package>::Element object
\& Args    : none
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo" 4
.IX Item "Bio::Phylo"
This object inherits from Bio::Phylo, so the methods defined
therein are also applicable to Bio::Phylo::Matrices::Datatype objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
