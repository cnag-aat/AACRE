.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::Phast::PhastCons 3"
.TH Bio::Tools::Run::Phylo::Phast::PhastCons 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::Phast::PhastCons \- Wrapper for footprinting using
                                           phastCons
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Run::Phylo::Phast::PhastCons;
\&
\&  # Make a PhastCons factory
\&  $factory = Bio::Tools::Run::Phylo::Phast::PhastCons\->new();
\&
\&  # Pass the factory an alignment and the corresponding species tree
\&  $align_filename = \*(Aqt/data/apes.multi_fasta\*(Aq;
\&  $species_tree_filename = \*(Aqt/data/apes.newick\*(Aq;
\&  @features = $factory\->run($align_filename, $species_tree_filename);
\&
\&  # or get a Bio::Align::AlignI (SimpleAlign) object from somewhere, and
\&  # generate the species tree automatically using a Bio::DB::Taxonomy database
\&  $tdb = Bio::DB::Taxonomy\->new(\-source => \*(Aqentrez\*(Aq);
\&  @features = $factory\->run($aln_obj, $tdb);
\&
\&  # @features is an array of Bio::SeqFeature::Annotated, one feature per
\&  # alignment sequence and prediction
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper for running the phastCons application by Adam Siepel. You
can get details here: http://compgen.bscb.cornell.edu/~acs/software.html 
phastCons is used for phylogenetic footprinting/ shadowing.
.PP
Currently the interface is extremely simplified, allowing only one
analysis method. The focus here is on ease of use, allowing phastCons
to estimate as many parameters as possible and having it output just
the 'most conserved' blocks it detects. You can, however, try
supplying normal phastCons arguments to \fInew()\fR, or calling arg-named
methods (excluding initial hyphens and converting others to
underscores, eg. \f(CW$factory\fR\->\fIindels_only\fR\|(1) to set the \-\-indels\-only
arg).
.PP
The particular analysis carried out here is to:
.PP
.Vb 6
\& 1. Use phyloFit to generate a tree model for initialization of the nonconserved
\&    model from the supplied alignment (all data) and species tree
\& 2. Run phastCons in \*(Aqtraining\*(Aq mode for parameter estimation using all the
\&    alignment data and the model from step 1
\& 3. Run phastCons with the trees from step 2 to discover the most conserved
\&    regions
.Ve
.PP
See the 'HowTo' at http://compgen.bscb.cornell.edu/~acs/phastCons\-HOWTO.html 
for details on how to improve results.
.PP
\&\s-1WARNING:\s0 the \s-1API\s0 is likely to change in the future to allow for alternative
analysis types.
.PP
You will need to enable this phastCons wrapper to find the phast programs (at
least phastCons and phyloFit).
This can be done in (at least) three ways:
.PP
.Vb 4
\& 1. Make sure the phastCons and phyloFit executables are in your path.
\& 2. Define an environmental variable PHASTDIR which is a 
\&    directory which contains the phastCons and phyloFit applications:
\&    In bash:
\&
\&    export PHASTDIR=/home/username/phast/bin
\&
\&    In csh/tcsh:
\&
\&    setenv PHASTDIR /home/username/phast/bin
\&
\& 3. Include a definition of an environmental variable PHASTDIR in
\&    every script that will use this PhastCons wrapper module, e.g.:
\&
\&    BEGIN { $ENV{PHASTDIR} = \*(Aq/home/username/phast/bin\*(Aq }
\&    use Bio::Tools::Run::Phylo::Phast::PhastCons;
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory>program_name()
\& Function: holds the program name
\& Returns : string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns : string
\& Args    : None
.Ve
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : $factory = Bio::Tools::Run::Phylo::Phast::PhastCons\->new(@params)
\& Function: Creates a new PhastCons factory
\& Returns : Bio::Tools::Run::Phylo::Phast::PhastCons
\& Args    : Optionally, provide any of the following (defaults are not to use,
\&           see the same\-named methods for information on what each option does):
\&           {
\&            \-target_coverage  => number between 0 and 1
\&            AND
\&            \-expected_length  => int
\&           }
\&           \-rho => number between 0 and 1
\&           \-quiet => boolean (turn on or off program output to console)
\&
\&           Most other options understood by phastCons can be supplied as key =>
\&           value pairs in this way. Options that don\*(Aqt normally take a value
\&           should be given a value of 1. You can type the keys as you would on
\&           the command line (eg. \*(Aq\-\-indels\-only\*(Aq => 1) or with only a single
\&           hyphen to start and internal hyphens converted to underscores (eg.
\&           \-indels_only => 1) to avoid having to quote the key.
\&
\&           These options can NOT be used with this wrapper currently:
\&           estimate_trees / T
\&           estimate_rho / O
\&           gc / G
\&           msa_format / i
\&           score / s
\&           no_post_probs / n
\&           seqname / N
\&           idpref / P
\&           help / h
\&           alias / A
\&           most_conserved / V / viterbi
\&           refidx / r
.Ve
.SS "target_coverage"
.IX Subsection "target_coverage"
.Vb 6
\& Title   : target_coverage
\& Usage   : $factory\->target_coverage(0.25);
\& Function: Constrain transition parameters such that the expected fraction of
\&           sites in conserved elements is the supplied value.
\& Returns : number (default undef)
\& Args    : None to get, number (between 0 and 1) to set
.Ve
.SS "expected_length"
.IX Subsection "expected_length"
.Vb 7
\& Title   : expected_length
\& Usage   : $factory\->expected_length(5);
\& Function: Set transition probabilities such that the expected length of a
\&           conserved element is the supplied value. target_coverage() must also
\&           be set.
\& Returns : int (default undef)
\& Args    : None to get, int to set
.Ve
.SS "rho"
.IX Subsection "rho"
.Vb 7
\& Title   : rho
\& Usage   : $factory\->rho(0.3);
\& Function: Set the *scale* (overall evolutionary rate) of the model for the
\&           conserved state to be the supplied number times that of the model for
\&           the non\-conserved state (default 0.3).
\& Returns : number (default undef)
\& Args    : None to get, number (between 0 and 1) to set
.Ve
.SS "run"
.IX Subsection "run"
.Vb 10
\& Title   : run
\& Usage   : $result = $factory\->run($fasta_align_file, $newick_tree_file);
\&           \-or\-
\&           $result = $factory\->run($align_object, $tree_object);
\&           \-or\-
\&           $result = $factory\->run($align_object, $db_taxonomy_object);
\& Function: Runs phastCons on an alignment to find the most conserved regions
\&           (\*(Aqfootprinting\*(Aq).
\& Returns : array of Bio::SeqFeature::Annotated (one feature per alignment
\&           sequence and prediction)
\& Args    : The first argument represents an alignment, the second argument
\&           a species tree.
\&           The alignment can be provided as a multi\-fasta format alignment
\&           filename, or a Bio::Align::AlignI compliant object (eg. a
\&           Bio::SimpleAlign).
\&           The species tree can be provided as a newick format tree filename
\&           or a Bio::Tree::TreeI compliant object. Alternatively a
\&           Bio::DB::Taxonomy object can be supplied, in which case the species
\&           tree will be generated by using the alignment sequence names as
\&           species names and looking for those in the supplied database.
\&
\&           In all cases, the alignment sequence names must correspond to node
\&           ids in the species tree. Multi\-word species names should be joined
\&           with underscores to form the sequence names, eg. Homo_sapiens
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 6
\& Title   : _setparams
\& Usage   : Internal function, not to be called directly
\& Function: Creates a string of params to be used in the command string
\& Returns : string of params
\& Args    : alignment file name for result production, AND filename of phyloFit
\&           generated init.mod file to estimate trees
.Ve
