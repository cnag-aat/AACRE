.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Taxa::Taxon 3"
.TH Bio::Phylo::Taxa::Taxon 3 "2014-03-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Taxa::Taxon \- Operational taxonomic unit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Bio::Phylo::IO qw(parse);
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\&
\& # array of names
\& my @apes = qw(
\&     Homo_sapiens
\&     Pan_paniscus
\&     Pan_troglodytes
\&     Gorilla_gorilla
\& );
\&
\& # newick string
\& my $str = \*(Aq(((Pan_paniscus,Pan_troglodytes),\*(Aq;
\& $str   .= \*(AqHomo_sapiens),Gorilla_gorilla);\*(Aq;
\&
\& # create tree object
\& my $tree = parse(
\&    \-format => \*(Aqnewick\*(Aq,
\&    \-string => $str
\& )\->first;
\&
\& # instantiate taxa object
\& my $taxa = $fac\->create_taxa;
\&
\& # instantiate taxon objects, insert in taxa object
\& foreach( @apes ) {
\&    my $taxon = $fac\->create_taxon(
\&        \-name => $_,
\&    );
\&    $taxa\->insert($taxon);
\& }
\&
\& # crossreference tree and taxa
\& $tree\->cross_reference($taxa);
\&
\& # iterate over nodes
\& while ( my $node = $tree\->next ) {
\&
\&    # check references
\&    if ( $node\->get_taxon ) {
\&
\&        # prints crossreferenced tips
\&        print "match: ", $node\->get_name, "\en";
\&    }
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The taxon object models a single operational taxonomic unit. It is useful for
cross-referencing datum objects and tree nodes.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_data()\fR" 4
.IX Item "set_data()"
Associates argument data with invocant.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_data
\& Usage   : $taxon\->set_data( $datum );
\& Function: Associates data with
\&           the current taxon.
\& Returns : Modified object.
\& Args    : Must be an object of type
\&           Bio::Phylo::Matrices::Datum
.Ve
.IP "\fIset_nodes()\fR" 4
.IX Item "set_nodes()"
Associates argument node with invocant.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_nodes
\& Usage   : $taxon\->set_nodes($node);
\& Function: Associates tree nodes
\&           with the current taxon.
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Forest::Node object
.Ve
.IP "\fIunset_datum()\fR" 4
.IX Item "unset_datum()"
Removes association between argument data and invocant.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : unset_datum
\& Usage   : $taxon\->unset_datum($node);
\& Function: Disassociates datum from
\&           the invocant taxon (i.e.
\&           removes reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Matrix::Datum object
.Ve
.IP "\fIunset_node()\fR" 4
.IX Item "unset_node()"
Removes association between argument node and invocant.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : unset_node
\& Usage   : $taxon\->unset_node($node);
\& Function: Disassociates tree node from
\&           the invocant taxon (i.e.
\&           removes reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Forest::Node object
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_data()\fR" 4
.IX Item "get_data()"
Retrieves associated datum objects.
.Sp
.Vb 9
\& Type    : Accessor
\& Title   : get_data
\& Usage   : @data = @{ $taxon\->get_data };
\& Function: Retrieves data associated
\&           with the current taxon.
\& Returns : An ARRAY reference of
\&           Bio::Phylo::Matrices::Datum
\&           objects.
\& Args    : None.
.Ve
.IP "\fIget_nodes()\fR" 4
.IX Item "get_nodes()"
Retrieves associated node objects.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_nodes
\& Usage   : @nodes = @{ $taxon\->get_nodes };
\& Function: Retrieves tree nodes associated
\&           with the current taxon.
\& Returns : An ARRAY reference of
\&           Bio::Phylo::Trees::Node objects
\& Args    : None.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::NeXML::Writable" 4
.IX Item "Bio::Phylo::NeXML::Writable"
The taxon objects inherits from the Bio::Phylo::NeXML::Writable object. The methods defined
there are also applicable to the taxon object.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
