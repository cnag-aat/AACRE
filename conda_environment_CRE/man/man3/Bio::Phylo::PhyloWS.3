.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::PhyloWS 3"
.TH Bio::Phylo::PhyloWS 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::PhyloWS \- Base class for phylogenetic web services
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # no direct usage, used by child classes
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for clients and service that implement the PhyloWS
(<http://evoinfo.nescent.org/PhyloWS>) recommendations. This base class
isn't used directly, it contains useful methods that are inherited by
its children.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_format()\fR" 4
.IX Item "set_format()"
Sets invocant's preferred serialization format.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_format
\& Usage   : $obj\->set_format($format);
\& Function: Assigns an object\*(Aqs serialization format.
\& Returns : Modified object.
\& Args    : Argument must be a string.
.Ve
.IP "\fIset_section()\fR" 4
.IX Item "set_section()"
Sets invocant's section (\*(L"table\*(R") to operate on, e.g. 'taxon', 'tree', etc.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_section
\& Usage   : $obj\->set_section($section);
\& Function: Sets section
\& Returns : Modified object.
\& Args    : Argument must be a string.
.Ve
.IP "\fIset_query()\fR" 4
.IX Item "set_query()"
Sets invocant's query parameter
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_query
\& Usage   : $obj\->set_query($query);
\& Function: Assigns an object\*(Aqs query.
\& Returns : Modified object.
\& Args    : Argument must be a string.
.Ve
.IP "\fIset_authority()\fR" 4
.IX Item "set_authority()"
Sets the authority prefix (e.g. \s-1TB2\s0) for the implementing service
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_authority
\& Usage   : $obj\->set_authority(\*(AqTB2\*(Aq);
\& Function: Sets authority prefix
\& Returns : $self
\& Args    : String
\& Comments:
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_url()\fR" 4
.IX Item "get_url()"
Gets invocant's url. This constructs the full url including section, authority
prefix, uid and query string.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_url
\& Usage   : my $url = $obj\->get_url;
\& Function: Returns the object\*(Aqs url.
\& Returns : A string
\& Args    :
.Ve
.IP "\fIget_url_prefix()\fR" 4
.IX Item "get_url_prefix()"
Constructs a url prefix to which an \s-1ID\s0 can be appended in order to resolve
to some resource. Combined with get_authority these form the moving parts
for how PhyloWS services could be plugged into the <http://lsrn.org>
system.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_url_prefix
\& Usage   : my $prefix = $obj\->get_url_prefix;
\& Function: Returns the object\*(Aqs url prefix.
\& Returns : A string
\& Args    :
.Ve
.IP "\fIget_format()\fR" 4
.IX Item "get_format()"
Gets invocant's preferred serialization format
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_format
\& Usage   : my $format = $obj\->get_format;
\& Function: Returns the object\*(Aqs preferred serialization format
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_authority()\fR" 4
.IX Item "get_authority()"
Gets the authority prefix (e.g. \s-1TB2\s0) for the implementing service
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_authority
\& Usage   : my $auth = $obj\->get_authority;
\& Function: Gets authority prefix
\& Returns : String
\& Args    : None
\& Comments:
.Ve
.IP "\fIget_section()\fR" 4
.IX Item "get_section()"
Gets invocant's section (\*(L"table\*(R") to operate on, e.g. 'taxon', 'tree', etc.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_section
\& Usage   : my $section = $obj\->get_section;
\& Function: Gets section
\& Returns : String
\& Args    : None
.Ve
.IP "\fIget_query()\fR" 4
.IX Item "get_query()"
Gets invocant's query parameter
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_query
\& Usage   : my $query = $obj\->get_query;
\& Function: Retrieves an object\*(Aqs query.
\& Returns : Query
\& Args    : None
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.PP
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
