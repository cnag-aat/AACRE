.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Factory 3"
.TH Bio::Phylo::Factory 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Factory \- Creator of objects, reduces hardcoded class names in code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\& my $node = $fac\->create_node( \*(Aq\-name\*(Aq => \*(Aqnode1\*(Aq );
\&
\& # probably prints \*(AqBio::Phylo::Forest::Node\*(Aq?
\& print ref $node;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The factory module is used to create other objects without having to 'use' 
their classes. This allows for greater flexibility in Bio::Phylo's design,
as class names are no longer hard-coded all over the place.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Factory constructor.
.Sp
.Vb 12
\& Type    : Constructor
\& Title   : new
\& Usage   : my $fac = Bio::Phylo::Factory\->new;
\& Function: Initializes a Bio::Phylo::Factory object.
\& Returns : A Bio::Phylo::Factory object.
\& Args    : (optional) a hash keyed on short names, with
\&           class names for values. For example, 
\&           \*(Aqnode\*(Aq => \*(AqBio::Phylo::Forest::Node\*(Aq, which 
\&           will allow you to subsequently call $fac\->create_node,
\&           which will return a Bio::Phylo::Forest::Node object.
\&           (Note that this example is enabled by default, so you
\&           don\*(Aqt need to specify it.)
.Ve
.SS "\s-1FACTORY METHODS\s0"
.IX Subsection "FACTORY METHODS"
.ie n .IP "create($class, %args)" 4
.el .IP "create($class, \f(CW%args\fR)" 4
.IX Item "create($class, %args)"
.Vb 7
\& Type    : Factory methods
\& Title   : create
\& Usage   : my $foo = $fac\->create(\*(AqFoo::Class\*(Aq);
\& Function: Creates an instance of $class, with constructor arguments %args
\& Returns : A Bio::Phylo::* object.
\& Args    : $class, a class name (required),
\&           %args, constructor arguments (optional)
.Ve
.IP "\fIregister_class()\fR" 4
.IX Item "register_class()"
Registers the argument class name such that subsequently
the factory can instantiates objects of that class. For
example, if you register Foo::Bar, the factory will be 
able to instantiate objects through the \fIcreate_bar()\fR
method.
.Sp
.Vb 8
\& Type    : Factory methods
\& Title   : register_class
\& Usage   : $fac\->register_class(\*(AqFoo::Bar\*(Aq);
\& Function: Registers a class name for instantiation
\& Returns : Invocant
\& Args    : $class, a class name (required), or
\&           \*(Aqbar\*(Aq => \*(AqFoo::Bar\*(Aq, such that you
\&           can subsequently call $fac\->create_bar()
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
