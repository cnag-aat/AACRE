.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phrap 3"
.TH Bio::Tools::Run::Phrap 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phrap \- a wrapper for running Phrap
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use Bio::Tools::Run::Phrap;
\&  # Run Phrap using an input FASTA file
\&  my $factory = Bio::Tools::Run::Phrap\->new( \-penalty => \-2, \-raw => 1 );
\&  my $asm_obj = $factory\->run($fasta_file, $qual_file);
\&  # An assembly object is returned by default
\&  for my $contig ($assembly\->all_contigs) {
\&    ... do something ...
\&  }
\&
\&  # Read some sequences
\&  use Bio::SeqIO;
\&  my $sio = Bio::SeqIO\->new(\-file => $fasta_file, \-format => \*(Aqfasta\*(Aq);
\&  my @seqs;
\&  while (my $seq = $sio\->next_seq()) {
\&    push @seqs,$seq;
\&  }
\&
\&  # Run Phrap using input sequence objects and returning an assembly file
\&  my $asm_file = \*(Aqresults.phrap\*(Aq;
\&  $factory\->out_type($asm_file);
\&  $factory\->run(\e@seqs);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&  Wrapper module for the Phrap assembly program
\&  Phrap is available at: http://www.phrap.org/
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
.Vb 1
\&  Email shawnh\-at\-stanford.edu
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
.Vb 2
\& The rest of the documentation details each of the object
\& methods. Internal methods are usually preceded with a _
.Ve
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : $factory = Bio::Tools::Run::Phrap\->new(
\&             \-penalty => \-2, # parameter option and value
\&             \-raw     =>  1  # flag (1=yes, 0=no)
\&           );
\& Function: Create a new Phrap factory
\& Returns : A Bio::Tools::Run::Phrap object
\& Args    : Phrap options available in this module:
.Ve
.PP
Option names & default values taken from the \s-1PHRAP\s0 manual:
.PP
1. Scoring of pairwise alignments
.PP
.Vb 2
\& \-penalty \-2
\&Mismatch (substitution) penalty for SWAT comparisons.
\&
\& \-gap_init penalty\-2
\&Gap initiation penalty for SWAT comparisons.
\&
\& \-gap_ext  penalty\-1
\&Gap extension penalty for SWAT comparisons.
\&
\& \-ins_gap_ext gap_ext
\& Insertion gap extension penalty for SWAT comparisons (insertion in
\&subject relative to query).
\&
\& \-del_gap_ext gap_ext
\& Deletion gap extension penalty for SWAT comparisons (deletion in
\&subject relative to query).
\&
\& \-matrix [None]
\& Score matrix for SWAT comparisons (if present, supersedes \-penalty)
\&
\& \-raw *
\& Use raw rather than complexity\-adjusted Smith\-Waterman scores.
.Ve
.PP
2. Banded search
.PP
.Vb 3
\& \-maxmatch 30
\& Maximum length of matching word. For cross_match, the default value
\&is equal to minmatch, instead of 30.
\&
\& \-max_group_size 20
\& Group size (query file, forward strand words)
\&
\& \-word_raw *
\& Use raw rather than complexity\-adjusted word length, in testing
\&against minmatch (N.B. maxmatch always refer to raw lengths).  (The
\&default is to adjust word length to reflect complexity of matching
\&sequence).
\&
\& \-bandwidth 14
\& 1/2 band width for banded SWAT searches (full width is 2 times
\&bandwidth + 1). Decreasing bandwidth also decreases running time at
\&the expense of sensitivity. Phrap assemblies of clones containing long
\&tandem repeats of a short repeat unit (< 30 bp) may be more accurately
\&assembled by decreasing \-bandwidth; \-bandwidth should be set such that
\&2 bandwidth + 1 is less than the length of a repeat unit. \-bandwidth 0
\&can be used to find gap\-free alignments.
.Ve
.PP
3. Filtering of matches
.PP
.Vb 2
\& \-minscore 30
\& Minimum alignment score.
\&
\& \-vector_bound 80
\& Number of potential vector bases at beginning of each read.  Matches
\&that lie entirely within this region are assumed to represent vector
\&matches and are ignored.  For cross_match, the default value is 0
\&instead of 80.
\&
\& \-masklevel 80
\& (cross_match only). A match is reported only if at least (100 \-
\&masklevel)% of the bases in its "domain" (the part of the query that
\&is aligned) are not contained within the domain of any higher\-scoring
\&match.
\& Special cases:
\&    \-masklevel 0     report only the single highest scoring match for each query
\&    \-masklevel 100   report any match whose domain is not completely contained
\&                         within a higher scoring match
\&    \-masklevel 101   report all matches
.Ve
.PP
4. Input data interpretation
.PP
.Vb 7
\& \-default_qual 15
\& Quality value to be used for each base, when no input .qual file is
\&provided. Note that a quality value of 15 corresponds to an error rate
\&of approximately 1 in 30 bases, i.e. relatively accurate sequence. If
\&you are using sequence that is substantially less accurate than this
\&and do not have phred\-generated quality values you should be sure to
\&decrease the value of this parameter.
\&
\& \-subclone_delim .
\& (phrap only). Subclone name delimiter: Character used to indicate end
\&of that part of the read name that corresponds to the subclone name
\&
\& \-n_delim 1
\& (phrap only). Indicates which occurrence of the subclone delimiter
\&character denotes the end of the subclone name (so for example
\&     \-subclone_delim _ \-n_delim 2
\&means that the end of the subclone name occurs at the
\&second occurrence of the character \*(Aq_\*(Aq). Must be the same for all
\&reads!
\&
\& \-group_delim _
\& (phrap only). Group name delimiter: Character used to indicate end of
\&that part of the read name that corresponds to the group name
\&(relevant only if option \-preassemble is used); this character must
\&occur before the subclone delimiter (else it has no effect, and the
\&read is not assigned to a group).
\&
\& \-trim_start 0
\& (phrap only). No. of bases to be removed at beginning of each read.
.Ve
.PP
5. Assembly
.PP
.Vb 4
\& \-forcelevel 0
\& (phrap only). Relaxes stringency to varying degree during final
\&contig merge pass.  Allowed values are integers from 0 (most
\&stringent) to 10 (least stringent), inclusive.
\&
\& \-bypasslevel 1
\& (phrap only). Controls treatment of inconsistent reads in merge.
\&Currently allowed values are 0 (no bypasses allowed; most stringent)
\&and 1 (a single conflicting read may be bypassed).
\&
\& \-maxgap 30
\& (phrap only). Maximum permitted size of an unmatched region in
\&merging contigs, during first (most stringent) merging pass.
\&
\& \-repeat_stringency .95
\& (phrap only). Controls stringency of match required for joins.  Must
\&be less than 1 (highest stringency), and greater than 0 (lowest
\&stringency).
\&
\& \-revise_greedy *
\& (phrap only). Splits initial greedy assembly into pieces at "weak
\&joins", and then tries to reattach them to give higher overall score.
\&Use of this option should correct some types of missassembly.
\&
\& \-shatter_greedy *
\& (phrap only). Breaks assembly at weak joins (as with \-revise_greedy)
\&but does not try to reattach pieces.
\&
\& \-preassemble *
\& (phrap only). Preassemble reads within groups, prior to merging with
\&other groups. This is useful for example when the input data set
\&consists of reads from two distinct but overlapping clones, and it is
\&desired to assemble the reads from each clone separately before
\&merging in order to reduce the risk of incorrect joins due to
\&repeats. The preassemble merging pass is relatively stringent and not
\&guaranteed to merge all of the reads from a group.
\& Groups are indicated by the first part of the read name, up to the
\&character specified by \-group_delim.
\&
\& \-force_high *
\& (phrap only). Causes edited high\-quality discrepancies to be ignored
\&during final contig merge pass.  This option may be useful when it is
\&suspected that incorrect edits are causing a misassembly.
.Ve
.PP
6. Consensus sequence construction
.PP
.Vb 3
\& \-node_seg 8
\& (phrap only). Minimum segment size (for purposes of traversing
\&weighted directed graph).
\&
\& \-node_space 4
\& (phrap only). Spacing between nodes (in weighted directed graph).
.Ve
.PP
7. Output
.PP
.Vb 1
\& Not implemented in this Perl module.
.Ve
.PP
8. Miscellaneous
.PP
.Vb 3
\& \-retain_duplicates *
\& (phrap only). Retain exact duplicate reads, rather than eliminating
\&them.
\&
\& \-max_subclone_size 5000
\& (phrap only). Maximum subclone size \-\- for forward\-reverse read pair
\&consistency checks.
\&
\& \-trim_penalty \-2
\& (phrap only). Penalty used for identifying degenerate sequence at
\&beginning & end of read.
\&
\& \-trim_score 20
\& (phrap only). Minimum score for identifying degenerate sequence at
\&beginning & end of read.
\&
\& \-trim_qual 13
\& (phrap only). Quality value used in to define the "high\-quality" part
\&of a read, (the part which should overlap; this is used to adjust
\&qualities at ends of reads.
\&
\& \-confirm_length 8
\& (phrap only). Minimum size of confirming segment (segment starts at
\&3d distinct nuc following discrepancy).
\&
\& \-confirm_trim 1
\& (phrap only). Amount by which confirming segments are trimmed at
\&edges.
\&
\& \-confirm_penalty \-5
\& (phrap only). Penalty used in aligning against "confirming" reads.
\&
\& \-confirm_score 30
\& (phrap only). Minimum alignment score for a read to be allowed to
\&"confirm" part of another read.
\&
\& \-indexwordsize 10
\& Size of indexing (hashing) words, used in finding word matches
\&between sequences.  The value of this parameter has a generally minor
\&effect on run time and memory usage.
.Ve
.SS "out_type"
.IX Subsection "out_type"
.Vb 8
\& Title   : out_type
\& Usage   : $assembler\->out_type(\*(AqBio::Assembly::ScaffoldI\*(Aq)
\& Function: Get/set the desired type of output
\& Returns : The type of results to return
\& Args    : Desired type of results to return (optional):
\&                 \*(AqBio::Assembly::IO\*(Aq object
\&                 \*(AqBio::Assembly::ScaffoldI\*(Aq object (default)
\&                 The name of a file to save the results in
.Ve
.SS "run"
.IX Subsection "run"
.Vb 7
\& Title   :   run
\& Usage   :   $asm = $factory\->run($fasta_file)
\& Function:   Run Phrap
\& Returns :   Assembly results (file, IO object or assembly object)
\& Args    :   \- sequence input (FASTA file or sequence object arrayref)
\&             \- optional quality score input (QUAL file or quality score object
\&               arrayref)
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 6
\& Title   :   _run
\& Usage   :   $factory\->_run()
\& Function:   Make a system call and run Phrap
\& Returns :   An assembly file
\& Args    :   \- FASTA file
\&             \- optional QUAL file
.Ve
