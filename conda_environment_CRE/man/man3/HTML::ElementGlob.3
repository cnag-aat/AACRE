.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "HTML::ElementGlob 3"
.TH HTML::ElementGlob 3 "2010-06-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::ElementGlob \- Perl extension for managing HTML::Element based objects as a single object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use HTML::ElementGlob;
\&  $element_a = new HTML::Element \*(Aqfont\*(Aq, color => \*(Aqred\*(Aq;
\&  $element_b = new HTML::Element \*(Aqfont\*(Aq, color => \*(Aqblue\*(Aq;
\&  $element_a\->push_content(\*(Aqred\*(Aq);
\&  $element_b\->push_content(\*(Aqblue\*(Aq);
\&
\&  $p = new HTML::Element \*(Aqp\*(Aq;
\&  $p\->push_content($element_a, \*(Aq and \*(Aq, $element_b, \*(Aq boo hoo hoo\*(Aq);
\&
\&  # Tag type of the glob is not really relevant unless
\&  # you plan on seeing the glob as_HTML()
\&  $eglob = new HTML::ElementGlob \*(Aqp\*(Aq;
\&  $eglob\->glob_push_content($element_a, $element_b);
\&  # Alter both elements at once
\&  $eglob\->attr(size => 5);
\&
\&  # They still belong to their original parent
\&  print $p\->as_HTML;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTML::ElementGlob is a managing object for multiple
\&\fIHTML::Element\fR\|(3) style elements.  The children of the glob
element retain their original parental elements and have
no knowledge of the glob that manipulates them.  All methods
that do not start with 'glob_' will be passed, sequentially, to
all elements contained within the glob element.  Methods
starting with 'glob_' will operate on the glob itself, rather
than being passed to its foster children.
.PP
For example, \f(CW$eglob\fR\->attr(size => 3) will invoke attr(size => 3) on
all children contained by \f(CW$eglob\fR.  \f(CW$eglob\fR\->glob_attr(size => 3), on
the other hand, will set the attr attribute on the glob itself.
.PP
The tag type passed to HTML::Element::Glob is largely
irrrelevant as far as how methods are passed to children.  However,
if you choose to invoke \f(CW$eglob\fR\->\fIas_HTML()\fR, you might want to pick
a tag that would sensibly contain the globbed children for debugging
or display purposes.
.PP
The 'glob_*' methods that operate on the glob itself are limited
to those available in an \fIHTML::Element\fR\|(3).  All other methods get
passed blindly to the globbed children, which can be enhanced elements
with arbitrary methods, such as \fIHTML::ElementSuper\fR\|(3).
.PP
Element globs can contain other element globs.  In such cases, the
plain methods will cascade down to the leaf children.  'glob_*' methods,
of course, will not be propogated to children globs.  You will
have to rely on \fIglob_content()\fR to access those glob children and
access their 'glob_*' methods directly.
.SH "REQUIRES"
.IX Header "REQUIRES"
\&\fIHTML::ElementSuper\fR\|(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthew P. Sisk, <\fIsisk@mojotoad.com\fR>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998\-2010 Matthew P. Sisk.
All rights reserved. All wrongs revenged. This program is free
software; you can redistribute it and/or modify it under the
same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIHTML::Element\fR\|(3), HTML::ElementSuper, HTML::ElementRaw, \fIHTML::Element::Table\fR\|(3), \fIperl\fR\|(1).
