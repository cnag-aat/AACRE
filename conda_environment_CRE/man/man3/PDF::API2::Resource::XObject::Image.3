.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Resource::XObject::Image 3"
.TH PDF::API2::Resource::XObject::Image 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Resource::XObject::Image \- Base class for external raster image objects
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$image = PDF::API2::Resource::XObject::Image\->new($pdf, $name)" 4
.el .IP "\f(CW$image\fR = PDF::API2::Resource::XObject::Image\->new($pdf, \f(CW$name\fR)" 4
.IX Item "$image = PDF::API2::Resource::XObject::Image->new($pdf, $name)"
Returns an image resource object.
.ie n .IP "$width = $image\->width($width)" 4
.el .IP "\f(CW$width\fR = \f(CW$image\fR\->width($width)" 4
.IX Item "$width = $image->width($width)"
Get or set the width value for the image object.
.ie n .IP "$height = $image\->height($height)" 4
.el .IP "\f(CW$height\fR = \f(CW$image\fR\->height($height)" 4
.IX Item "$height = $image->height($height)"
Get or set the height value for the image object.
.ie n .IP "$image\->smask($xobject)" 4
.el .IP "\f(CW$image\fR\->smask($xobject)" 4
.IX Item "$image->smask($xobject)"
Set the soft-mask image object.
.ie n .IP "$image\->mask(@color_range)" 4
.el .IP "\f(CW$image\fR\->mask(@color_range)" 4
.IX Item "$image->mask(@color_range)"
.PD 0
.ie n .IP "$image\->mask($xobject)" 4
.el .IP "\f(CW$image\fR\->mask($xobject)" 4
.IX Item "$image->mask($xobject)"
.PD
Set the mask to an image mask XObject or an array containing a range
of colors to be applied as a color key mask.
.ie n .IP "$image\->colorspace($name)" 4
.el .IP "\f(CW$image\fR\->colorspace($name)" 4
.IX Item "$image->colorspace($name)"
.PD 0
.ie n .IP "$image\->colorspace($array)" 4
.el .IP "\f(CW$image\fR\->colorspace($array)" 4
.IX Item "$image->colorspace($array)"
.PD
Set the color space used by the image.  Depending on the color space,
this will either be just the name of the color space, or it will be an
array containing the color space and any required parameters.
.Sp
If passing an array, parameters must already be encoded as \s-1PDF\s0
objects.  The array itself may also be a \s-1PDF\s0 object.  If not, one will
be created.
.ie n .IP "$image\->bits_per_component($integer)" 4
.el .IP "\f(CW$image\fR\->bits_per_component($integer)" 4
.IX Item "$image->bits_per_component($integer)"
Set the number of bits used to represent each color component.
