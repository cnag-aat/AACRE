.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Forest::DrawNodeRole 3"
.TH Bio::Phylo::Forest::DrawNodeRole 3 "2014-03-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Forest::DrawNode \- Tree node with extra methods for tree drawing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # see Bio::Phylo::Forest::Node
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module defines a node object and its methods. The node is fairly
syntactically rich in terms of navigation, and additional getters are provided to
further ease navigation from node to node. Typical first daughter \-> next sister
traversal and recursion is possible, but there are also shrinkwrapped methods
that return for example all terminal descendants of the focal node, or all
internals, etc.
.PP
Node objects are inserted into tree objects, although technically the tree
object is only a container holding all the nodes together. Unless there are
orphans all nodes can be reached without recourse to the tree object.
.PP
In addition, this subclass of the default node object Bio::Phylo::Forest::Node
has getters and setters for drawing trees and nodes, e.g. X/Y coordinates, font
and text attributes, etc.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_collapsed()\fR" 4
.IX Item "set_collapsed()"
.Vb 6
\& Type    : Mutator
\& Title   : set_collapsed
\& Usage   : $node\->set_collapsed(1);
\& Function: Sets whether the node\*(Aqs descendants are shown as collapsed into a triangle
\& Returns : $self
\& Args    : true or false value
.Ve
.IP "\fIset_collapsed_clade_width()\fR" 4
.IX Item "set_collapsed_clade_width()"
Sets collapsed clade width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_collapsed_clade_width
\& Usage   : $tree\->set_collapsed_clade_width(6);
\& Function: sets the width of collapsed clade triangles relative to uncollapsed tips
\& Returns :
\& Args    : Positive number
.Ve
.IP "\fIset_x()\fR" 4
.IX Item "set_x()"
.Vb 6
\& Type    : Mutator
\& Title   : set_x
\& Usage   : $node\->set_x($x);
\& Function: Sets x
\& Returns : $self
\& Args    : x
.Ve
.IP "\fIset_y()\fR" 4
.IX Item "set_y()"
.Vb 6
\& Type    : Mutator
\& Title   : set_y
\& Usage   : $node\->set_y($y);
\& Function: Sets y
\& Returns : $self
\& Args    : y
.Ve
.IP "\fIset_radius()\fR" 4
.IX Item "set_radius()"
.Vb 6
\& Type    : Mutator
\& Title   : set_radius
\& Usage   : $node\->set_radius($radius);
\& Function: Sets radius
\& Returns : $self
\& Args    : radius
.Ve
.IP "\fIset_tip_radius()\fR" 4
.IX Item "set_tip_radius()"
.Vb 6
\& Type    : Mutator
\& Title   : set_tip_node_radius
\& Usage   : $tree\->set_tip_radius($node_radius);
\& Function: Sets tip radius
\& Returns : $self
\& Args    : tip radius
.Ve
.IP "\fIset_node_color()\fR" 4
.IX Item "set_node_color()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_color
\& Usage   : $node\->set_node_color($node_color);
\& Function: Sets node_color
\& Returns : $self
\& Args    : node_color
.Ve
.IP "\fIset_node_outline_color()\fR" 4
.IX Item "set_node_outline_color()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_outline_color
\& Usage   : $node\->set_node_outline_color($node_outline_color);
\& Function: Sets node outline color
\& Returns : $self
\& Args    : node_color
.Ve
.IP "\fIset_node_shape()\fR" 4
.IX Item "set_node_shape()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_shape
\& Usage   : $node\->set_node_shape($node_shape);
\& Function: Sets node_shape
\& Returns : $self
\& Args    : node_shape
.Ve
.IP "\fIset_node_image()\fR" 4
.IX Item "set_node_image()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_image
\& Usage   : $node\->set_node_image($node_image);
\& Function: Sets node_image
\& Returns : $self
\& Args    : node_image
.Ve
.IP "\fIset_branch_color()\fR" 4
.IX Item "set_branch_color()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_color
\& Usage   : $node\->set_branch_color($branch_color);
\& Function: Sets branch_color
\& Returns : $self
\& Args    : branch_color
.Ve
.IP "\fIset_branch_shape()\fR" 4
.IX Item "set_branch_shape()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_shape
\& Usage   : $node\->set_branch_shape($branch_shape);
\& Function: Sets branch_shape
\& Returns : $self
\& Args    : branch_shape
.Ve
.IP "\fIset_branch_width()\fR" 4
.IX Item "set_branch_width()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_width
\& Usage   : $node\->set_branch_width($branch_width);
\& Function: Sets branch width
\& Returns : $self
\& Args    : branch_width
.Ve
.IP "\fIset_branch_style()\fR" 4
.IX Item "set_branch_style()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_style
\& Usage   : $node\->set_branch_style($branch_style);
\& Function: Sets branch style
\& Returns : $self
\& Args    : branch_style
.Ve
.IP "\fIset_font_face()\fR" 4
.IX Item "set_font_face()"
.Vb 6
\& Type    : Mutator
\& Title   : set_font_face
\& Usage   : $node\->set_font_face($font_face);
\& Function: Sets font_face
\& Returns : $self
\& Args    : font_face
.Ve
.IP "\fIset_font_size()\fR" 4
.IX Item "set_font_size()"
.Vb 6
\& Type    : Mutator
\& Title   : set_font_size
\& Usage   : $node\->set_font_size($font_size);
\& Function: Sets font_size
\& Returns : $self
\& Args    : font_size
.Ve
.IP "\fIset_font_style()\fR" 4
.IX Item "set_font_style()"
.Vb 6
\& Type    : Mutator
\& Title   : set_font_style
\& Usage   : $node\->set_font_style($font_style);
\& Function: Sets font_style
\& Returns : $self
\& Args    : font_style
.Ve
.IP "\fIset_font_color()\fR" 4
.IX Item "set_font_color()"
.Vb 8
\& Type    : Mutator
\& Title   : set_font_color
\& Usage   : $node\->set_font_color($color);
\& Function: Sets font_color
\& Returns : font_color
\& Args    : A color, which, depending on the underlying tree drawer, can either
\&           be expressed as a word (\*(Aqred\*(Aq), a hex code (\*(Aq#00CC00\*(Aq) or an rgb
\&           statement (\*(Aqrgb(0,255,0)\*(Aq)
.Ve
.IP "\fIset_text_horiz_offset()\fR" 4
.IX Item "set_text_horiz_offset()"
.Vb 6
\& Type    : Mutator
\& Title   : set_text_horiz_offset
\& Usage   : $node\->set_text_horiz_offset($text_horiz_offset);
\& Function: Sets text_horiz_offset
\& Returns : $self
\& Args    : text_horiz_offset
.Ve
.IP "\fIset_text_vert_offset()\fR" 4
.IX Item "set_text_vert_offset()"
.Vb 6
\& Type    : Mutator
\& Title   : set_text_vert_offset
\& Usage   : $node\->set_text_vert_offset($text_vert_offset);
\& Function: Sets text_vert_offset
\& Returns : $self
\& Args    : text_vert_offset
.Ve
.IP "\fIset_rotation()\fR" 4
.IX Item "set_rotation()"
.Vb 6
\& Type    : Mutator
\& Title   : set_rotation
\& Usage   : $node\->set_rotation($rotation);
\& Function: Sets rotation
\& Returns : $self
\& Args    : rotation
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_collapsed()\fR" 4
.IX Item "get_collapsed()"
.Vb 6
\& Type    : Mutator
\& Title   : get_collapsed
\& Usage   : something() if $node\->get_collapsed();
\& Function: Gets whether the node\*(Aqs descendants are shown as collapsed into a triangle
\& Returns : true or false value
\& Args    : NONE
.Ve
.IP "\fIget_first_daughter()\fR" 4
.IX Item "get_first_daughter()"
Gets invocant's first daughter.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_first_daughter
\& Usage   : my $f_daughter = $node\->get_first_daughter;
\& Function: Retrieves a node\*(Aqs leftmost daughter.
\& Returns : Bio::Phylo::Forest::Node
\& Args    : NONE
.Ve
.IP "\fIget_last_daughter()\fR" 4
.IX Item "get_last_daughter()"
Gets invocant's last daughter.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_last_daughter
\& Usage   : my $l_daughter = $node\->get_last_daughter;
\& Function: Retrieves a node\*(Aqs rightmost daughter.
\& Returns : Bio::Phylo::Forest::Node
\& Args    : NONE
.Ve
.IP "\fIget_children()\fR" 4
.IX Item "get_children()"
Gets invocant's immediate children.
.Sp
.Vb 8
\& Type    : Query
\& Title   : get_children
\& Usage   : my @children = @{ $node\->get_children };
\& Function: Returns an array reference of immediate
\&           descendants, ordered from left to right.
\& Returns : Array reference of
\&           Bio::Phylo::Forest::Node objects.
\& Args    : NONE
.Ve
.IP "\fIget_x()\fR" 4
.IX Item "get_x()"
.Vb 6
\& Type    : Accessor
\& Title   : get_x
\& Usage   : my $x = $node\->get_x();
\& Function: Gets x
\& Returns : x
\& Args    : NONE
.Ve
.IP "\fIget_y()\fR" 4
.IX Item "get_y()"
.Vb 6
\& Type    : Accessor
\& Title   : get_y
\& Usage   : my $y = $node\->get_y();
\& Function: Gets y
\& Returns : y
\& Args    : NONE
.Ve
.IP "\fIget_radius()\fR" 4
.IX Item "get_radius()"
.Vb 6
\& Type    : Accessor
\& Title   : get_radius
\& Usage   : my $radius = $node\->get_radius();
\& Function: Gets radius
\& Returns : radius
\& Args    : NONE
.Ve
.IP "\fIget_node_color()\fR" 4
.IX Item "get_node_color()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_color
\& Usage   : my $node_color = $node\->get_node_color();
\& Function: Gets node_color
\& Returns : node_color
\& Args    : NONE
.Ve
.IP "\fIget_node_outline_color()\fR" 4
.IX Item "get_node_outline_color()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_outline_color
\& Usage   : my $node_outline_color = $node\->get_node_outline_color();
\& Function: Gets node outline color
\& Returns : node_color
\& Args    : NONE
.Ve
.IP "\fIget_node_shape()\fR" 4
.IX Item "get_node_shape()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_shape
\& Usage   : my $node_shape = $node\->get_node_shape();
\& Function: Gets node_shape
\& Returns : node_shape
\& Args    : NONE
.Ve
.IP "\fIget_node_image()\fR" 4
.IX Item "get_node_image()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_image
\& Usage   : my $node_image = $node\->get_node_image();
\& Function: Gets node_image
\& Returns : node_image
\& Args    : NONE
.Ve
.IP "\fIget_collapsed_clade_width()\fR" 4
.IX Item "get_collapsed_clade_width()"
Gets collapsed clade width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : get_collapsed_clade_width
\& Usage   : $w = $tree\->get_collapsed_clade_width();
\& Function: gets the width of collapsed clade triangles relative to uncollapsed tips
\& Returns : Positive number
\& Args    : None
.Ve
.IP "\fIget_branch_color()\fR" 4
.IX Item "get_branch_color()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_color
\& Usage   : my $branch_color = $node\->get_branch_color();
\& Function: Gets branch_color
\& Returns : branch_color
\& Args    : NONE
.Ve
.IP "\fIget_branch_shape()\fR" 4
.IX Item "get_branch_shape()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_shape
\& Usage   : my $branch_shape = $node\->get_branch_shape();
\& Function: Gets branch_shape
\& Returns : branch_shape
\& Args    : NONE
.Ve
.IP "\fIget_branch_width()\fR" 4
.IX Item "get_branch_width()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_width
\& Usage   : my $branch_width = $node\->get_branch_width();
\& Function: Gets branch_width
\& Returns : branch_width
\& Args    : NONE
.Ve
.IP "\fIget_branch_style()\fR" 4
.IX Item "get_branch_style()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_style
\& Usage   : my $branch_style = $node\->get_branch_style();
\& Function: Gets branch_style
\& Returns : branch_style
\& Args    : NONE
.Ve
.IP "\fIget_font_face()\fR" 4
.IX Item "get_font_face()"
.Vb 6
\& Type    : Accessor
\& Title   : get_font_face
\& Usage   : my $font_face = $node\->get_font_face();
\& Function: Gets font_face
\& Returns : font_face
\& Args    : NONE
.Ve
.IP "\fIget_font_size()\fR" 4
.IX Item "get_font_size()"
.Vb 6
\& Type    : Accessor
\& Title   : get_font_size
\& Usage   : my $font_size = $node\->get_font_size();
\& Function: Gets font_size
\& Returns : font_size
\& Args    : NONE
.Ve
.IP "\fIget_font_style()\fR" 4
.IX Item "get_font_style()"
.Vb 6
\& Type    : Accessor
\& Title   : get_font_style
\& Usage   : my $font_style = $node\->get_font_style();
\& Function: Gets font_style
\& Returns : font_style
\& Args    : NONE
.Ve
.IP "\fIget_font_color()\fR" 4
.IX Item "get_font_color()"
.Vb 6
\& Type    : Accessor
\& Title   : get_font_color
\& Usage   : my $color = $node\->get_font_color();
\& Function: Gets font_color
\& Returns : font_color
\& Args    : NONE
.Ve
.IP "\fIget_text_horiz_offset()\fR" 4
.IX Item "get_text_horiz_offset()"
.Vb 6
\& Type    : Accessor
\& Title   : get_text_horiz_offset
\& Usage   : my $text_horiz_offset = $node\->get_text_horiz_offset();
\& Function: Gets text_horiz_offset
\& Returns : text_horiz_offset
\& Args    : NONE
.Ve
.IP "\fIget_text_vert_offset()\fR" 4
.IX Item "get_text_vert_offset()"
.Vb 6
\& Type    : Accessor
\& Title   : get_text_vert_offset
\& Usage   : my $text_vert_offset = $node\->get_text_vert_offset();
\& Function: Gets text_vert_offset
\& Returns : text_vert_offset
\& Args    : NONE
.Ve
.IP "\fIget_rotation()\fR" 4
.IX Item "get_rotation()"
.Vb 6
\& Type    : Accessor
\& Title   : get_rotation
\& Usage   : my $rotation = $node\->get_rotation();
\& Function: Gets rotation
\& Returns : rotation
\& Args    : NONE
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Forest::Node" 4
.IX Item "Bio::Phylo::Forest::Node"
This object inherits from Bio::Phylo::Forest::Node, so methods
defined there are also applicable here.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
