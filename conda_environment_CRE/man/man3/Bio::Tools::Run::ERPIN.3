.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::ERPIN 3"
.TH Bio::Tools::Run::ERPIN 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::ERPIN \- Wrapper for local execution of the ERPIN suite of
programs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #run 
\&
\&  my @params = (
\&              trset => \*(AqBL.erpin\*(Aq,
\&              region => [1, 10], 
\&              # Set up search strategy this way...
\&              strategy => [ \*(Aqumask\*(Aq   => [1, 2],
\&                            \*(Aqumask\*(Aq   => [1, 2, 3, 4],
\&                            \*(Aqumask\*(Aq   => [1, 2, 3, 4, 5, 6],
\&                            \*(Aqnomask\*(Aq,
\&                            \*(Aqcutoff\*(Aq  => [0, 10, 15, 20]
\&                            ]
\&              # or use a simple string...
\&              #strategy => \*(Aq\*(D-umask 4 \*(D-add 5 \-nomask \-cutoff 0 10 15\*(Aq,
\&              pcw => 100
\&             );
\&
\&  my $factory = Bio::Tools::Run::ERPIN\->new(\-program =>\*(Aqerpin\*(Aq,
\&                                                @params);
\&
\&  # Pass the factory a Bio::Seq object or a file name
\&  # Returns a Bio::SearchIO object
\&
\&  #my $search = $factory\->run("B_sub.fas");
\&  my $search = $factory\->run($seq);
\&  my @feat;
\&  while (my $result = $searchio\->next_result){
\&   while(my $hit = $result\->next_hit){
\&    while (my $hsp = $hit\->next_hsp){
\&            print join("\et", ( $r\->query_name,
\&                               $hit\->name,
\&                               $hsp\->hit\->start,
\&                               $hsp\->hit\->end,
\&                               $hsp\->meta,
\&                               $hsp\->score,
\&                               )), "\en";
\&    }
\&   }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Chris Fields"
.IX Header "AUTHOR - Chris Fields"
.Vb 1
\& Email: cjfields\-at\-uiuc\-dot\-edu
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.Vb 1
\& cjfields\-at\-uiuc\-dot\-edu
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $wrapper = Bio::Tools::Run::RNAMotif\->new(@params)
\& Function: creates a new RNAMotif factory
\& Returns:  Bio::Tools::Run::RNAMotif
\& Args    : list of parameters
\&           \-tempfile        => set tempfile flag (default 0)
\&           \-outfile_name    => set file to send output to (default none)
.Ve
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory>program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   : $v = $prog\->version();
\& Function: Determine the version number of the program
\& Example :
\& Returns : float or undef
\& Args    : none
.Ve
.SS "run"
.IX Subsection "run"
.Vb 5
\& Title   :  run
\& Usage   :  $obj\->run($seqFile)
\& Function:  Runs ERPIN programs and returns Bio::SearchIO
\& Returns :  
\& Args    :  Must pass Bio::PrimarySeqI\*(Aqs or file names
.Ve
.SS "tempfile"
.IX Subsection "tempfile"
.Vb 6
\& Title   : tempfile
\& Usage   : $obj\->tempfile(1)
\& Function: Set tempfile flag.  When set, writes output to a tempfile; this
\&           is overridden by outfile_name() if set
\& Returns : Boolean setting (or undef if not set)
\& Args    : [OPTIONAL] Boolean
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 5
\& Title   :   _run
\& Usage   :   $obj\->_run()
\& Function:   Internal(not to be used directly)
\& Returns :   
\& Args    :
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 6
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly
\& Function:  creates a string of params to be used in the command string
\& Example :
\& Returns :  string of params
\& Args    :
.Ve
.SS "_writeSeqFile"
.IX Subsection "_writeSeqFile"
.Vb 6
\& Title   : _writeSeqFile
\& Usage   : obj\->_writeSeqFile($seq)
\& Function: Internal(not to be used directly)
\& Returns : writes passed Seq objects to tempfile, to be used as input
\&           for program
\& Args    :
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 34:" 4
.IX Item "Around line 34:"
Non-ASCII character seen before =encoding in ''\*(D-umask'. Assuming \s-1CP1252\s0
