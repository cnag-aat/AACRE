.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Matrices::DatumRole 3"
.TH Bio::Phylo::Matrices::DatumRole 3 "2014-02-24" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Matrices::DatumRole \- Extra behaviours for a character state sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\&
\& # instantiating a datum object...
\& my $datum = $fac\->create_datum(
\&    \-name   => \*(AqTooth comb size,
\&    \-type   => \*(AqSTANDARD\*(Aq,
\&    \-desc   => \*(Aqnumber of teeth in lower jaw comb\*(Aq,
\&    \-pos    => 1,
\&    \-weight => 2,
\&    \-char   => [ 6 ],
\& );
\&
\& # ...and linking it to a taxon object
\& my $taxon = $fac\->create_taxon(
\&     \-name => \*(AqLemur_catta\*(Aq
\& );
\& $datum\->set_taxon( $taxon );
\&
\& # instantiating a matrix...
\& my $matrix = $fac\->create_matrix;
\&
\& # ...and insert datum in matrix
\& $matrix\->insert($datum);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The datum object models a single observation or a sequence of observations,
which can be linked to a taxon object.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Datum object constructor.
.Sp
.Vb 11
\& Type    : Constructor
\& Title   : new
\& Usage   : my $datum = Bio::Phylo::Matrices::Datum\->new;
\& Function: Instantiates a Bio::Phylo::Matrices::Datum
\&           object.
\& Returns : A Bio::Phylo::Matrices::Datum object.
\& Args    : None required. Optional:
\&           \-taxon  => $taxon,
\&           \-weight => 0.234,
\&           \-type   => DNA,           
\&           \-pos    => 2,
.Ve
.IP "\fInew_from_bioperl()\fR" 4
.IX Item "new_from_bioperl()"
Datum constructor from Bio::Seq argument.
.Sp
.Vb 8
\& Type    : Constructor
\& Title   : new_from_bioperl
\& Usage   : my $datum = 
\&           Bio::Phylo::Matrices::Datum\->new_from_bioperl($seq);
\& Function: Instantiates a 
\&           Bio::Phylo::Matrices::Datum object.
\& Returns : A Bio::Phylo::Matrices::Datum object.
\& Args    : A Bio::Seq (or similar) object
.Ve
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_char()\fR" 4
.IX Item "set_char()"
Sets character state(s)
.Sp
.Vb 10
\& Type    : Mutator
\& Title   : set_char
\& Usage   : $datum\->set_char($char);
\& Function: Assigns a datum\*(Aqs character value.
\& Returns : Modified object.
\& Args    : The $char argument is checked against
\&           the allowed ranges for the various
\&           character types: IUPAC nucleotide (for
\&           types of DNA|RNA|NUCLEOTIDE), IUPAC
\&           single letter amino acid codes (for type
\&           PROTEIN), integers (STANDARD) or any of perl\*(Aqs
\&           decimal formats (CONTINUOUS). The $char can be:
\&               * a single character;
\&               * a string of characters;
\&               * an array reference of characters;
\&               * an array of characters;
\& Comments: Note that on assigning characters to a datum,
\&           previously set annotations are removed.
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_matrix()\fR" 4
.IX Item "get_matrix()"
Gets the matrix (if any) this datum belongs to
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_matrix
\& Usage   : my $matrix = $datum\->get_matrix;
\& Function: Retrieves the matrix the datum belongs to
\& Returns : Bio::Phylo::Matrices::Matrix
\& Args    : NONE
.Ve
.IP "\fIget_char()\fR" 4
.IX Item "get_char()"
Gets characters.
.Sp
.Vb 11
\& Type    : Accessor
\& Title   : get_char
\& Usage   : my $char = $datum\->get_char;
\& Function: Retrieves a datum\*(Aqs character value.
\& Returns : In scalar context, returns a single
\&           character, or a string of characters
\&           (e.g. a DNA sequence, or a space
\&           delimited series of continuous characters).
\&           In list context, returns a list of characters
\&           (of zero or more characters).
\& Args    : NONE
.Ve
.IP "\fIget_unaligned_char()\fR" 4
.IX Item "get_unaligned_char()"
Gets unaligned characters, i.e. without gap or missing symbols
.Sp
.Vb 11
\& Type    : Accessor
\& Title   : get_unaligned_char
\& Usage   : my $char = $datum\->get_unaligned_char;
\& Function: Retrieves a datum\*(Aqs unaligned character sequence
\& Returns : In scalar context, returns a single
\&           character, or a string of characters
\&           (e.g. a DNA sequence, or a space
\&           delimited series of continuous characters).
\&           In list context, returns a list of characters
\&           (of zero or more characters).
\& Args    : NONE
.Ve
.IP "\fIget_length()\fR" 4
.IX Item "get_length()"
Gets invocant number of characters.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_length
\& Usage   : my $length = $datum\->get_length;
\& Function: Retrieves a datum\*(Aqs length.
\& Returns : a SCALAR integer.
\& Args    : NONE
.Ve
.IP "\fIget_by_index()\fR" 4
.IX Item "get_by_index()"
Gets state at argument index.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_by_index
\& Usage   : my $val = $datum\->get_by_index($i);
\& Function: Retrieves state at index $i.
\& Returns : a character state.
\& Args    : INT
.Ve
.IP "\fIget_index_of()\fR" 4
.IX Item "get_index_of()"
Returns the index of the first occurrence of the 
state observation in the datum or undef if the datum 
doesn't contain the argument
.Sp
.Vb 8
\& Type    : Generic query
\& Title   : get_index_of
\& Usage   : my $i = $datum\->get_index_of($state)
\& Function: Returns the index of the first occurrence of the 
\&           state observation in the datum or undef if the datum 
\&                   doesn\*(Aqt contain the argument
\& Returns : An index or undef
\& Args    : A contained object
.Ve
.SS "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIcan_contain()\fR" 4
.IX Item "can_contain()"
Tests if invocant can contain argument.
.Sp
.Vb 6
\& Type    : Test
\& Title   : can_contain
\& Usage   : &do_something if $datum\->can_contain( @args );
\& Function: Tests if $datum can contain @args
\& Returns : BOOLEAN
\& Args    : One or more arguments as can be provided to set_char
.Ve
.SS "\s-1CALCULATIONS\s0"
.IX Subsection "CALCULATIONS"
.IP "\fIcalc_state_counts()\fR" 4
.IX Item "calc_state_counts()"
Calculates occurrences of states.
.Sp
.Vb 6
\& Type    : Calculation
\& Title   : calc_state_counts
\& Usage   : my %counts = %{ $datum\->calc_state_counts };
\& Function: Calculates occurrences of states.
\& Returns : Hashref: keys are states, values are counts
\& Args    : Optional \- one or more states to focus on
.Ve
.IP "\fIcalc_distance()\fR" 4
.IX Item "calc_distance()"
Calculates the distance between the invocant and argument
.Sp
.Vb 8
\& Type    : Calculation
\& Title   : calc_distance
\& Usage   : my $dist = $datum1\->calc_distance($datum2);
\& Function: Calculates pairwise distance
\& Returns : A number, the distance per site
\& Args    : Another datum to calculate the distance to
\& Comments: Assumes the sequences are aligned. Calculates
\&           substitutions / total non\-missing sites.
.Ve
.IP "\fIcalc_state_frequencies()\fR" 4
.IX Item "calc_state_frequencies()"
Calculates the frequencies of the states observed in the matrix.
.Sp
.Vb 10
\& Type    : Calculation
\& Title   : calc_state_frequencies
\& Usage   : my %freq = %{ $object\->calc_state_frequencies() };
\& Function: Calculates state frequencies
\& Returns : A hash, keys are state symbols, values are frequencies
\& Args    : Optional:
\&           # if true, counts missing (usually the \*(Aq?\*(Aq symbol) as a state
\&           # in the final tallies. Otherwise, missing states are ignored
\&           \-missing => 1
\&           # if true, counts gaps (usually the \*(Aq\-\*(Aq symbol) as a state
\&           # in the final tallies. Otherwise, gap states are ignored
\&           \-gap => 1
\& Comments: Throws exception if matrix holds continuous values
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fIreverse()\fR" 4
.IX Item "reverse()"
Reverses contents.
.Sp
.Vb 6
\& Type    : Method
\& Title   : reverse
\& Usage   : $datum\->reverse;
\& Function: Reverses a datum\*(Aqs contained characters
\& Returns : Returns modified $datum
\& Args    : NONE
.Ve
.IP "\fIconcat()\fR" 4
.IX Item "concat()"
Appends argument to invocant.
.Sp
.Vb 6
\& Type    : Method
\& Title   : reverse
\& Usage   : $datum\->concat($datum1);
\& Function: Appends $datum1 to $datum
\& Returns : Returns modified $datum
\& Args    : NONE
.Ve
.IP "\fIconsense()\fR" 4
.IX Item "consense()"
Creates consensus sequence out of arguments
.Sp
.Vb 6
\& Type    : Method
\& Title   : consense
\& Usage   : my @chars = $datum\->consense($datum1,...);
\& Function: Creates consensus sequence out of arguments
\& Returns : Returns @chars or $seq
\& Args    : NONE
.Ve
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
Serializes datum to nexml format.
.Sp
.Vb 9
\& Type    : Format convertor
\& Title   : to_xml
\& Usage   : my $xml = $datum\->to_xml;
\& Function: Converts datum object into a nexml element structure.
\& Returns : Nexml block (SCALAR).
\& Args    : \-chars   => [] # optional, an array ref of character IDs
\&           \-states  => {} # optional, a hash ref of state IDs
\&           \-symbols => {} # optional, a hash ref of symbols
\&           \-special => {} # optional, a hash ref of special symbol IDs
.Ve
.IP "\fIto_dom()\fR" 4
.IX Item "to_dom()"
Analog to to_xml.
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_dom
\& Usage   : $datum\->to_dom
\& Function: Generates a DOM subtree from the invocant
\&           and its contained objects
\& Returns : an XML::LibXML::Element object
\& Args    : none
.Ve
.IP "\fIcopy_atts()\fR" 4
.IX Item "copy_atts()"
.Vb 1
\& Not implemented!
.Ve
.IP "\fIcomplement()\fR" 4
.IX Item "complement()"
.Vb 1
\& Not implemented!
.Ve
.IP "\fIslice()\fR" 4
.IX Item "slice()"
.Vb 1
\& Not implemented!
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Taxa::TaxonLinker" 4
.IX Item "Bio::Phylo::Taxa::TaxonLinker"
This object inherits from Bio::Phylo::Taxa::TaxonLinker, so the methods
defined therein are also applicable to Bio::Phylo::Matrices::Datum objects.
.IP "Bio::Phylo::Matrices::TypeSafeData" 4
.IX Item "Bio::Phylo::Matrices::TypeSafeData"
This object inherits from Bio::Phylo::Matrices::TypeSafeData, so the methods
defined therein are also applicable to Bio::Phylo::Matrices::Datum objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
