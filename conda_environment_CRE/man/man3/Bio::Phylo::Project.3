.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Project 3"
.TH Bio::Phylo::Project 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Project \- Container for related data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\& use Bio::Phylo::Factory;
\& my $fac  = Bio::Phylo::Factory\->new;
\& my $proj = $fac\->create_project;
\& my $taxa = $fac\->create_taxa;
\& $proj\->insert($taxa);
\& $proj\->insert($fac\->create_matrix\->set_taxa($taxa));
\& $proj\->insert($fac\->create_forest\->set_taxa($taxa));
\& print $proj\->to_xml;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The project module is used to collect taxa blocks, tree blocks and
matrices.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fImerge()\fR" 4
.IX Item "merge()"
Project constructor.
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : merge
\& Usage   : my $project = Bio::Phylo::Project\->merge( @projects )
\& Function: Populates a Bio::Phylo::Project object from a list of projects
\& Returns : A Bio::Phylo::Project object.
\& Args    : A list of Bio::Phylo::Project objects to be merged
.Ve
.IP "\fIset_datasource()\fR" 4
.IX Item "set_datasource()"
Project constructor.
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : set_datasource
\& Usage   : $project\->set_datasource( \-file => $file, \-format => \*(Aqnexus\*(Aq )
\& Function: Populates a Bio::Phylo::Project object from a data source
\& Returns : A Bio::Phylo::Project object.
\& Args    : Arguments as must be passed to Bio::Phylo::IO::parse
.Ve
.IP "\fIreset_xml_ids()\fR" 4
.IX Item "reset_xml_ids()"
Resets all xml ids to default values
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : reset_xml_ids
\& Usage   : $project\->reset_xml_ids
\& Function: Resets all xml ids to default values
\& Returns : A Bio::Phylo::Project object.
\& Args    : None
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_taxa()\fR" 4
.IX Item "get_taxa()"
Getter for taxa objects
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_taxa
\& Usage   : my $taxa = $proj\->get_taxa;
\& Function: Getter for taxa objects
\& Returns : An array reference of taxa objects
\& Args    : NONE.
.Ve
.IP "\fIget_forests()\fR" 4
.IX Item "get_forests()"
Getter for forest objects
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_forests
\& Usage   : my $forest = $proj\->get_forests;
\& Function: Getter for forest objects
\& Returns : An array reference of forest objects
\& Args    : NONE.
.Ve
.IP "\fIget_matrices()\fR" 4
.IX Item "get_matrices()"
Getter for matrix objects
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_matrices
\& Usage   : my $matrix = $proj\->get_matrices;
\& Function: Getter for matrix objects
\& Returns : An array reference of matrix objects
\& Args    : NONE.
.Ve
.IP "\fIget_items()\fR" 4
.IX Item "get_items()"
Gets all items of the specified type, recursively. This method can be used
to get things like all the trees in all the forest objects as one flat list
(or, indeed, all nodes, all taxon objects, etc.)
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_items
\& Usage   : my @nodes = @{ $proj\->get_items(_NODE_) };
\& Function: Getter for items of specified type
\& Returns : An array reference of objects
\& Args    : A type constant as defined in Bio::Phylo::Util::CONSTANT
.Ve
.IP "\fIget_document()\fR" 4
.IX Item "get_document()"
.Vb 9
\& Type    : Serializer
\& Title   : doc
\& Usage   : $proj\->get_document()
\& Function: Creates a DOM Document object, containing the 
\&           present state of the project by default
\& Returns : a Document object
\& Args    : a DOM factory object
\&           Optional: pass 1 to obtain a document node without 
\&           content
.Ve
.IP "\fIget_attributes()\fR" 4
.IX Item "get_attributes()"
Retrieves attributes for the element.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_attributes
\& Usage   : my %attrs = %{ $obj\->get_attributes };
\& Function: Gets the xml attributes for the object;
\& Returns : A hash reference
\& Args    : None.
\& Comments: throws ObjectMismatch if no linked taxa object 
\&           can be found
.Ve
.IP "\fIis_identifiable()\fR" 4
.IX Item "is_identifiable()"
By default, all XMLWritable objects are identifiable when serialized,
i.e. they have a unique id attribute. However, in some cases a serialized
object may not have an id attribute (governed by the nexml schema). This
method indicates whether that is the case.
.Sp
.Vb 6
\& Type    : Test
\& Title   : is_identifiable
\& Usage   : if ( $obj\->is_identifiable ) { ... }
\& Function: Indicates whether IDs are generated
\& Returns : BOOLEAN
\& Args    : NONE
.Ve
.SS "\s-1SERIALIZERS\s0"
.IX Subsection "SERIALIZERS"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
Serializes invocant to \s-1XML.\s0
.Sp
.Vb 6
\& Type    : XML serializer
\& Title   : to_xml
\& Usage   : my $xml = $obj\->to_xml;
\& Function: Serializes $obj to xml
\& Returns : An xml string
\& Args    : Same arguments as can be passed to individual contained objects
.Ve
.IP "\fIto_nexus()\fR" 4
.IX Item "to_nexus()"
Serializes invocant to \s-1NEXUS.\s0
.Sp
.Vb 6
\& Type    : NEXUS serializer
\& Title   : to_nexus
\& Usage   : my $nexus = $obj\->to_nexus;
\& Function: Serializes $obj to nexus
\& Returns : An nexus string
\& Args    : Same arguments as can be passed to individual contained objects
.Ve
.IP "\fIto_dom()\fR" 4
.IX Item "to_dom()"
.Vb 7
\& Type    : Serializer
\& Title   : to_dom
\& Usage   : $node\->to_dom
\& Function: Generates a DOM subtree from the invocant
\&           and its contained objects
\& Returns : an XML::LibXML::Element object
\& Args    : a DOM factory object
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Listable" 4
.IX Item "Bio::Phylo::Listable"
The Bio::Phylo::Project object inherits from the Bio::Phylo::Listable
object. Look there for more methods applicable to the project object.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
