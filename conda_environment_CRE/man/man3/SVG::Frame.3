.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Frame 3"
.TH Frame 3 "2003-08-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "init"
.IX Subsection "init"
.Vb 6
\& Title   : init
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "add_glyph"
.IX Subsection "add_glyph"
.Vb 6
\& Title   : add_glyph
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "add_group"
.IX Subsection "add_group"
.Vb 6
\& Title   : add_group
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "groups"
.IX Subsection "groups"
.Vb 6
\& Title   : groups
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "add_data"
.IX Subsection "add_data"
.Vb 6
\& Title   : add_data
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "all_data"
.IX Subsection "all_data"
.Vb 6
\& Title   : all_data
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "data"
.IX Subsection "data"
.Vb 6
\& Title   : data
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "glyphs"
.IX Subsection "glyphs"
.Vb 6
\& Title   : glyphs
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "data_chunks"
.IX Subsection "data_chunks"
.Vb 6
\& Title   : data_chunks
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "draw"
.IX Subsection "draw"
.Vb 6
\& Title   : draw
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "_recalculate_stats"
.IX Subsection "_recalculate_stats"
.Vb 6
\& Title   : _recalculate_stats
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SS "_parent_svg"
.IX Subsection "_parent_svg"
.Vb 6
\& Title   : _parent_svg
\& Usage   : $obj\->_parent_svg($newval)
\& Function: 
\& Example : 
\& Returns : value of _parent_svg (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "_parent_group"
.IX Subsection "_parent_group"
.Vb 6
\& Title   : _parent_group
\& Usage   : $obj\->_parent_group($newval)
\& Function: 
\& Example : 
\& Returns : value of _parent_group (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "svg"
.IX Subsection "svg"
.Vb 6
\& Title   : svg
\& Usage   : $obj\->svg($newval)
\& Function: 
\& Example : 
\& Returns : value of svg (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "xsize"
.IX Subsection "xsize"
.Vb 6
\& Title   : xsize
\& Usage   : $obj\->xsize($newval)
\& Function: 
\& Example : 
\& Returns : value of xsize (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "ysize"
.IX Subsection "ysize"
.Vb 6
\& Title   : ysize
\& Usage   : $obj\->ysize($newval)
\& Function: 
\& Example : 
\& Returns : value of ysize (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "xoffset"
.IX Subsection "xoffset"
.Vb 6
\& Title   : xoffset
\& Usage   : $obj\->xoffset($newval)
\& Function: 
\& Example : 
\& Returns : value of xoffset (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "yoffset"
.IX Subsection "yoffset"
.Vb 6
\& Title   : yoffset
\& Usage   : $obj\->yoffset($newval)
\& Function: 
\& Example : 
\& Returns : value of yoffset (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "xmin"
.IX Subsection "xmin"
.Vb 6
\& Title   : xmin
\& Usage   : $obj\->xmin($newval)
\& Function: 
\& Example : 
\& Returns : value of xmin (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "xmax"
.IX Subsection "xmax"
.Vb 6
\& Title   : xmax
\& Usage   : $obj\->xmax($newval)
\& Function: 
\& Example : 
\& Returns : value of xmax (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "ymin"
.IX Subsection "ymin"
.Vb 6
\& Title   : ymin
\& Usage   : $obj\->ymin($newval)
\& Function: 
\& Example : 
\& Returns : value of ymin (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "ymax"
.IX Subsection "ymax"
.Vb 6
\& Title   : ymax
\& Usage   : $obj\->ymax($newval)
\& Function: 
\& Example : 
\& Returns : value of ymax (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "xrange"
.IX Subsection "xrange"
.Vb 5
\& Title   : xrange
\& Usage   : $obj\->xrange($newval)
\& Function: 
\& Example : 
\& Returns : value of xrange (a scalar)
.Ve
.SS "yrange"
.IX Subsection "yrange"
.Vb 5
\& Title   : yrange
\& Usage   : $obj\->yrange($newval)
\& Function: 
\& Example : 
\& Returns : value of yrange (a scalar)
.Ve
.SS "stack"
.IX Subsection "stack"
.Vb 6
\& Title   : stack
\& Usage   : $obj\->stack($newval)
\& Function: 
\& Example : 
\& Returns : value of stack (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
