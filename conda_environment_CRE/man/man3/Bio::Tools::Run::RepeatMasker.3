.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::RepeatMasker 3"
.TH Bio::Tools::Run::RepeatMasker 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::RepeatMasker \- Wrapper for RepeatMasker Program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Run::RepeatMasker;
\&
\&  my @params=("mam" => 1,"noint"=>1);
\&  my $factory = Bio::Tools::Run::RepeatMasker\->new(@params);
\&  $in  = Bio::SeqIO\->new(\-file => "contig1.fa",
\&                         \-format => \*(Aqfasta\*(Aq);
\&  my $seq = $in\->next_seq();
\&
\&  #return an array of Bio::SeqFeature::FeaturePair objects
\&  my @feats = $factory\->run($seq);
\&
\&  # or
\&
\&  $factory\->run($seq);
\&  my @feats = $factory\->repeat_features;
\&
\&  #return the masked sequence, a Bio::SeqI object
\&  my $masked_seq = $factory\->run;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
To use this module, the RepeatMasker program (and probably database) must be
installed. RepeatMasker is a program that screens \s-1DNA\s0 sequences for interspersed
repeats known to exist in mammalian genomes as well as for low
complexity \s-1DNA\s0 sequences. For more information, on the program and its
usage, please refer to http://www.repeatmasker.org/.
.PP
Having installed RepeatMasker, you must let Bioperl know where it is.
This can be done in (at least) three ways:
.PP
.Vb 4
\& 1. Make sure the RepeatMasker executable is in your path.
\& 2. Define an environmental variable REPEATMASKERDIR which is a
\&    directory which contains the RepeatMasker executable:
\&    In bash:
\&
\&    export REPEATMASKERDIR=/home/username/RepeatMasker/
\&
\&    In csh/tcsh:
\&
\&    setenv REPEATMASKERDIR /home/username/RepeatMasker/
\&
\& 3. Include a definition of an environmental variable REPEATMASKERDIR in
\&    every script that will use this RepeatMasker wrapper module, e.g.:
\&
\&    BEGIN { $ENV{REPEATMASKERDIR} = \*(Aq/home/username/RepeatMasker/\*(Aq }
\&    use Bio::Tools::Run::RepeatMasker;
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
Email shawnh@fugu\-sg.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a \*(L"_\*(R".
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory>program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : $rm\->new($seq)
\& Function: creates a new wrapper
\& Returns:  Bio::Tools::Run::RepeatMasker
\& Args    : self
.Ve
.SS "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   :
\& Function: Determine the version number of the program
\& Example :
\& Returns : float or undef
\& Args    : none
.Ve
.SS "run"
.IX Subsection "run"
.Vb 7
\& Title   : run
\& Usage   : $rm\->run($seq);
\& Function: Run Repeatmasker on the sequence set as
\&           the argument
\& Returns : an array of repeat features that are
\&           Bio::SeqFeature::FeaturePairs
\& Args    : Bio::PrimarySeqI compliant object
.Ve
.SS "mask"
.IX Subsection "mask"
.Vb 7
\& Title   : mask
\& Usage   : $rm\->mask($seq)
\& Function: This method is deprecated. Call run() instead
\& Example :
\& Returns : an array of repeat features that are
\&           Bio::SeqFeature::FeaturePairs
\& Args    : Bio::PrimarySeqI compliant object
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 6
\& Title   : _run
\& Usage   : $rm\->_run ($filename,$param_string)
\& Function: internal function that runs the repeat masker
\& Example :
\& Returns : an array of repeat features
\& Args    : the filename to the input sequence and the parameter string
.Ve
.SS "masked_seq"
.IX Subsection "masked_seq"
.Vb 6
\& Title   : masked_seq
\& Usage   : $rm\->masked_seq($seq)
\& Function: get/set for masked sequence
\& Example :
\& Returns : the masked sequence
\& Args    : Bio::Seq object
.Ve
.SS "repeat_features"
.IX Subsection "repeat_features"
.Vb 6
\& Title   : repeat_features
\& Usage   : $rm\->repeat_features(\e@rf)
\& Function: get/set for repeat features array
\& Example :
\& Returns : the array of repeat features
\& Args    :
.Ve
.SS "\fI_setparams()\fP"
.IX Subsection "_setparams()"
.Vb 6
\& Title   : _setparams
\& Usage   : Internal function, not to be called directly
\& Function:  Create parameter inputs for repeatmasker program
\& Example :
\& Returns : parameter string to be passed to repeatmasker
\& Args    : name of calling object
.Ve
.SS "\fI_setinput()\fP"
.IX Subsection "_setinput()"
.Vb 6
\& Title   : _setinput
\& Usage   : Internal function, not to be called directly
\& Function: writes input sequence to file and return the file name
\& Example :
\& Returns : string
\& Args    : a Bio::PrimarySeqI compliant object
.Ve
.SH "Bio::Tools::Run::Wrapper methods"
.IX Header "Bio::Tools::Run::Wrapper methods"
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function:
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $codeml\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $codeml\->cleanup();
\& Function: Will cleanup the tempdir directory
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
