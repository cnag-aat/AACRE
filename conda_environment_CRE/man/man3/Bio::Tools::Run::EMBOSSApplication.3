.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::EMBOSSApplication 3"
.TH Bio::Tools::Run::EMBOSSApplication 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::EMBOSSApplication \- class for EMBOSS Applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # Get an EMBOSS factory
\&  use Bio::Factory::EMBOSS;
\&  $f = Bio::Factory::EMBOSS \-> new();
\&  # Get an EMBOSS application  object from the factory
\&  $water = $f\->program(\*(Aqwater\*(Aq) || die "Program not found!\en";
\&
\&  # Here is an example of running the application \- water can
\&  # compare 1 sequence against 1 or more sequences using Smith\-Waterman.
\&  # Pass a Sequence object and a reference to an array of objects.
\&
\&  my $wateroutfile = \*(Aqout.water\*(Aq;
\&  $water\->run({\-asequence => $seq_object,
\&               \-bsequence => \e@seq_objects,
\&               \-gapopen   => \*(Aq10.0\*(Aq,
\&               \-gapextend => \*(Aq0.5\*(Aq,
\&               \-outfile   => $wateroutfile});
\&
\&  # Now you might want to get the alignment
\&  use Bio::AlignIO;
\&  my $alnin = Bio::AlignIO\->new(\-format => \*(Aqemboss\*(Aq,
\&                                \-file   => $wateroutfile);
\&
\&  while ( my $aln = $alnin\->next_aln ) {
\&      # process the alignment \-\- these will be Bio::SimpleAlign objects
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The EMBOSSApplication class can represent any \s-1EMBOSS\s0 program. It is
created by a Bio::Factory::EMBOSS object.
.PP
If you want to check command line options before sending them to the
program set \f(CW$prog\fR\->verbose to positive integer. The \s-1ADC\s0
description of the available command line options is then parsed in
and compared to input.
.PP
See also Bio::Factory::EMBOSS and Bio::Tools::Run::EMBOSSacd.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email  heikki-at-bioperl-dot-org
.SS "\s-1CONTRIBUTORS\s0"
.IX Subsection "CONTRIBUTORS"
Email: jason\-AT\-bioperl_DOT_org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "run"
.IX Subsection "run"
.Vb 5
\& Title   : run
\& Usage   : $embossapplication\->run($attribute_hash)
\& Function: Runs the EMBOSS program.
\& Returns : string or creates files for now; will return objects!
\& Args    : hash of input to the program
.Ve
.SS "acd"
.IX Subsection "acd"
.Vb 8
\& Title   : acd
\& Usage   : $embossprogram\->acd
\& Function: finds out all the possible qualifiers for this
\&           EMBOSS application. They can be used to debug the
\&           options given.
\& Throws  :
\& Returns : boolean
\& Args    :
.Ve
.SS "name"
.IX Subsection "name"
.Vb 8
\& Title   : name
\& Usage   : $embossprogram\->name
\& Function: sets/gets the name of the EMBOSS program
\&           Setting is done by the EMBOSSFactory object,
\&           you should only get it.
\& Throws  :
\& Returns : name string
\& Args    : None
.Ve
.SS "descr"
.IX Subsection "descr"
.Vb 8
\& Title   : descr
\& Usage   : $embossprogram\->descr
\& Function: sets/gets the descr of the EMBOSS program
\&           Setting is done by the EMBOSSFactory object,
\&           you should only get it.
\& Throws  :
\& Returns : description string
\& Args    : None
.Ve
.SS "group"
.IX Subsection "group"
.Vb 5
\& Title   : group
\& Usage   : $embossprogram\->group
\& Function: sets/gets the group of the EMBOSS program
\&           Setting is done by the EMBOSSFactory object,
\&           you should only get it.
\&
\&           If the application is assigned into a subgroup
\&           use l<subgroup> to get it.
\& Throws  :
\& Returns : string, group name
\& Args    : group string
.Ve
.SS "subgroup"
.IX Subsection "subgroup"
.Vb 8
\& Title   : subgroup
\& Usage   : $embossprogram\->subgroup
\& Function: sets/gets the subgroup of the EMBOSS program
\&           Setting is done by the EMBOSSFactory object,
\&           you should only get it.
\& Throws  :
\& Returns : string, subgroup name; undef if not defined
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 6
\& Title   : program_dir
\& Usage   :
\& Function: Required by WrapperBase
\& Throws  :
\& Returns : Name of directory with EMBOSS programs
\& Args    :
.Ve
.SS "program_path"
.IX Subsection "program_path"
.Vb 6
\& Title   : program_path
\& Usage   :
\& Function: Required by WrapperBase
\& Throws  :
\& Returns : Full path of program
\& Args    :
.Ve
.SS "executable"
.IX Subsection "executable"
.Vb 6
\& Title   : executable
\& Usage   :
\& Function: Required by WrapperBase
\& Throws  :
\& Returns : Name of program
\& Args    :
.Ve
