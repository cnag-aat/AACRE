.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Minimo 3"
.TH Bio::Tools::Run::Minimo 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Bio::Tools::Run::Minimo \- Wrapper for local execution of the Minimo assembler
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use Bio::Tools::Run::Minimo;
\&  # Run Minmo using an input FASTA file
\&  my $factory = Bio::Tools::Run::Minimo\->new( \-minimum_overlap_length => 35 );
\&  my $asm_obj = $factory\->run($fasta_file, $qual_file);
\&  # An assembly object is returned by default
\&  for my $contig ($assembly\->all_contigs) {
\&    ... do something ...
\&  }
\&
\&  # Read some sequences
\&  use Bio::SeqIO;
\&  my $sio = Bio::SeqIO\->new(\-file => $fasta_file, \-format => \*(Aqfasta\*(Aq);
\&  my @seqs;
\&  while (my $seq = $sio\->next_seq()) {
\&    push @seqs,$seq;
\&  }
\&
\&  # Run Minimo using input sequence objects and returning an assembly file
\&  my $asm_file = \*(Aqresults.ace\*(Aq;
\&  $factory\->out_type($asm_file);
\&  $factory\->run(\e@seqs);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 4
\&  Wrapper module for the local execution of the DNA assembly program Minimo.
\&  Minimo is based on AMOS (http://sourceforge.net/apps/mediawiki/amos/) and
\&  implements the same conservative assembly algorithm as Minimus
\&  (http://sourceforge.net/apps/mediawiki/amos/index.php?title=Minimus).
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl
modules. Send your comments and suggestions preferably to one of the Bioperl
mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs
and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Florent E Angly"
.IX Header "AUTHOR - Florent E Angly"
.Vb 1
\& Email: florent\-dot\-angly\-at\-gmail\-dot\-com
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal
methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : $assembler\->new( \-min_len   => 50,
\&                            \-min_ident => 95 );
\& Function: Creates a Minimo factory
\& Returns : A Bio::Tools::Run::Minimo object
\& Args    : Minimo options available in this module:
\&     qual_in      Input quality score file
\&     good_qual    Quality score to set for bases within the clear
\&                    range if no quality file was given (default: 30)
\&     bad_qual     Quality score to set for bases outside clear range
\&                    if no quality file was given (default: 10). If your
\&                    sequences are trimmed, try the same value as GOOD_QUAL.
\&     min_len / minimum_overlap_length
\&                  Minimum contig overlap length (between 20 and 100 bp,
\&                    default: 35)
\&     min_ident / minimum_overlap_similarity
\&                  Minimum contig overlap identity percentage (between 0
\&                    and 100 %, default: 98)
\&     aln_wiggle   Alignment wiggle value when determining the consensus
\&                    sequence (default: 2 bp)
\&     out_prefix   Prefix to use for the output file path and name
.Ve
.SS "out_type"
.IX Subsection "out_type"
.Vb 8
\& Title   : out_type
\& Usage   : $factory\->out_type(\*(AqBio::Assembly::ScaffoldI\*(Aq)
\& Function: Get/set the desired type of output
\& Returns : The type of results to return
\& Args    : Desired type of results to return (optional):
\&                 \*(AqBio::Assembly::IO\*(Aq object
\&                 \*(AqBio::Assembly::ScaffoldI\*(Aq object (default)
\&                 The name of a file to save the results in
.Ve
.SS "run"
.IX Subsection "run"
.Vb 10
\& Title   :   run
\& Usage   :   $factory\->run($fasta_file);
\& Function:   Run TIGR Assembler
\& Returns :   \- a Bio::Assembly::ScaffoldI object, a Bio::Assembly::IO
\&               object, a filename, or undef if all sequences were too small to
\&               be usable
\& Returns :   Assembly results (file, IO object or assembly object)
\& Args    :   \- sequence input (FASTA file or sequence object arrayref)
\&             \- optional quality score input (QUAL file or quality score object
\&               arrayref)
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 6
\& Title   :   _run
\& Usage   :   $factory\->_run()
\& Function:   Make a system call and run TIGR Assembler
\& Returns :   An assembly file
\& Args    :   \- FASTA file
\&             \- optional QUAL file
.Ve
.SS "_clean_file"
.IX Subsection "_clean_file"
.Vb 7
\& Title   :   _clean_file
\& Usage   :   $factory\->_clean_file($file)
\& Function:   Clean file in place by removing NULL characters. NULL characters
\&             can be present in the output files of AMOS 2.0.8 but they do not
\&             validate as proper sequence characters in Bioperl.
\& Returns :   1 for success
\& Args    :   Filename
.Ve
