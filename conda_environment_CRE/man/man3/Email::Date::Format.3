.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Email::Date::Format 3"
.TH Email::Date::Format 3 "2014-10-13" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Date::Format \- produce RFC 2822 date strings
.SH "VERSION"
.IX Header "VERSION"
version 1.005
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Email::Date::Format qw(email_date);
\&  
\&  my $header = email_date($date\->epoch);
\&  
\&  Email::Simple\->create(
\&    header => [
\&      Date => $header,
\&    ],
\&    body => \*(Aq...\*(Aq,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a simple means for generating an \s-1RFC 2822\s0 compliant
datetime string.  (In case you care, they're not \s-1RFC 822\s0 dates, because they
use a four digit year, which is not allowed in \s-1RFC 822.\s0)
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "email_date"
.IX Subsection "email_date"
.Vb 2
\&  my $date = email_date; # now
\&  my $date = email_date( time \- 60*60 ); # one hour ago
.Ve
.PP
\&\f(CW\*(C`email_date\*(C'\fR accepts an epoch value, such as the one returned by \f(CW\*(C`time\*(C'\fR.
It returns a string representing the date and time of the input, as
specified in \s-1RFC 2822.\s0 If no input value is provided, the current value
of \f(CW\*(C`time\*(C'\fR is used.
.PP
\&\f(CW\*(C`email_date\*(C'\fR is exported only if requested.
.SS "email_gmdate"
.IX Subsection "email_gmdate"
.Vb 1
\&  my $date = email_gmdate;
.Ve
.PP
\&\f(CW\*(C`email_gmdate\*(C'\fR is identical to \f(CW\*(C`email_date\*(C'\fR, but it will return a string
indicating the time in Greenwich Mean Time, rather than local time.
.PP
\&\f(CW\*(C`email_gmdate\*(C'\fR is exported only if requested.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Casey West
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Casey West.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
