.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Matrices::Datum 3"
.TH Bio::Phylo::Matrices::Datum 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Matrices::Datum \- Character state sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\&
\& # instantiating a datum object...
\& my $datum = $fac\->create_datum(
\&    \-name   => \*(AqTooth comb size,
\&    \-type   => \*(AqSTANDARD\*(Aq,
\&    \-desc   => \*(Aqnumber of teeth in lower jaw comb\*(Aq,
\&    \-pos    => 1,
\&    \-weight => 2,
\&    \-char   => [ 6 ],
\& );
\&
\& # ...and linking it to a taxon object
\& my $taxon = $fac\->create_taxon(
\&     \-name => \*(AqLemur_catta\*(Aq
\& );
\& $datum\->set_taxon( $taxon );
\&
\& # instantiating a matrix...
\& my $matrix = $fac\->create_matrix;
\&
\& # ...and insert datum in matrix
\& $matrix\->insert($datum);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The datum object models a single observation or a sequence of observations,
which can be linked to a taxon object. This package contains the getters
and setters that alter the internal state of the datum object. Additional 
(stateless) behaviours are defined in the Bio::Phylo::Matrices::DatumRole
package.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_weight()\fR" 4
.IX Item "set_weight()"
Sets invocant weight.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_weight
\& Usage   : $datum\->set_weight($weight);
\& Function: Assigns a datum\*(Aqs weight.
\& Returns : Modified object.
\& Args    : The $weight argument must be a
\&           number in any of Perl\*(Aqs number
\&           formats.
.Ve
.IP "\fIset_position()\fR" 4
.IX Item "set_position()"
Set invocant starting position.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_position
\& Usage   : $datum\->set_position($pos);
\& Function: Assigns a datum\*(Aqs position.
\& Returns : Modified object.
\& Args    : $pos must be an integer.
.Ve
.IP "\fIset_annotation()\fR" 4
.IX Item "set_annotation()"
Sets single annotation.
.Sp
.Vb 10
\& Type    : Mutator
\& Title   : set_annotation
\& Usage   : $datum\->set_annotation(
\&               \-char       => 1,
\&               \-annotation => { \-codonpos => 1 }
\&           );
\& Function: Assigns an annotation to a
\&           character in the datum.
\& Returns : Modified object.
\& Args    : Required: \-char       => $int
\&           Optional: \-annotation => $hashref
\& Comments: Use this method to annotate
\&           a single character. To annotate
\&           multiple characters, use
\&           \*(Aqset_annotations\*(Aq (see below).
.Ve
.IP "\fIset_annotations()\fR" 4
.IX Item "set_annotations()"
Sets list of annotations.
.Sp
.Vb 10
\& Type    : Mutator
\& Title   : set_annotations
\& Usage   : $datum\->set_annotations(
\&               { \*(Aq\-codonpos\*(Aq => 1 },
\&               { \*(Aq\-codonpos\*(Aq => 2 },
\&               { \*(Aq\-codonpos\*(Aq => 3 },
\&           );
\& Function: Assign annotations to
\&           characters in the datum.
\& Returns : Modified object.
\& Args    : Hash references, where
\&           position in the argument
\&           list matches that of the
\&           specified characters in
\&           the character list. If no
\&           argument given, annotations
\&           are reset.
\& Comments: Use this method to annotate
\&           multiple characters. To
\&           annotate a single character,
\&           use \*(Aqset_annotation\*(Aq (see
\&           above).
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_weight()\fR" 4
.IX Item "get_weight()"
Gets invocant weight.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_weight
\& Usage   : my $weight = $datum\->get_weight;
\& Function: Retrieves a datum\*(Aqs weight.
\& Returns : FLOAT
\& Args    : NONE
.Ve
.IP "\fIget_position()\fR" 4
.IX Item "get_position()"
Gets invocant starting position.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_position
\& Usage   : my $pos = $datum\->get_position;
\& Function: Retrieves a datum\*(Aqs position.
\& Returns : a SCALAR integer.
\& Args    : NONE
.Ve
.IP "\fIget_annotation()\fR" 4
.IX Item "get_annotation()"
Retrieves character annotation (hashref).
.Sp
.Vb 11
\& Type    : Accessor
\& Title   : get_annotation
\& Usage   : $datum\->get_annotation(
\&               \*(Aq\-char\*(Aq => 1,
\&               \*(Aq\-key\*(Aq  => \*(Aq\-codonpos\*(Aq,
\&           );
\& Function: Retrieves an annotation to
\&           a character in the datum.
\& Returns : SCALAR or HASH
\& Args    : Optional: \-char => $int
\&           Optional: \-key => $key
.Ve
.IP "\fIget_annotations()\fR" 4
.IX Item "get_annotations()"
Retrieves character annotations (array ref).
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_annotations
\& Usage   : my @anno = @{ $datum\->get_annotation() };
\& Function: Retrieves annotations
\& Returns : ARRAY
\& Args    : NONE
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Matrices::DatumRole" 4
.IX Item "Bio::Phylo::Matrices::DatumRole"
This object inherits from Bio::Phylo::Matrices::DatumRole, so the methods
defined therein are also applicable to Bio::Phylo::Matrices::Datum objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
