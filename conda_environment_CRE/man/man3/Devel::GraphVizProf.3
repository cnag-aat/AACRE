.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Devel::GraphVizProf 3"
.TH Devel::GraphVizProf 3 "2016-12-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::GraphVizProf \- per\-line Perl profiler (with graph output)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        perl \-d:GraphVizProf test.pl > test.dot
\&        dot \-Tpng test.dot > test.png
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1NOTE:\s0 This module is a hack of Devel::SmallProf by Ted Ashton. It has
been modified by Leon Brocard to produce output for GraphViz, but
otherwise the only thing I have done is change the name. I hope to get
my patches put into the main Devel::SmallProf code eventually, or
alternatively read the output of Devel::SmallProf. Anyway, the normal
documentation, which you can probably ignore, follows.
.PP
The Devel::GraphVizProf profiler is focused on the time taken for a program run on
a line-by-line basis.  It is intended to be as \*(L"small\*(R" in terms of impact on
the speed and memory usage of the profiled program as possible and also in
terms of being simple to use.  Those statistics are placed in the file
\&\fIsmallprof.out\fR in the following format:
.PP
.Vb 1
\&        <num> <time> <ctime> <line>:<text>
.Ve
.PP
where <num> is the number of times that the line was executed, <time> is the
amount of \*(L"wall time\*(R" (time according the the clock on the wall vs. cpu time)
spent executing it, <ctime> is the amount of cpu time expended on it and <line>
and <text> are the line number and the actual text of the executed line (read
from the file).
.PP
The package uses the debugging hooks in Perl and thus needs the \fB\-d\fR switch,
so to profile \fItest.pl\fR, use the command:
.PP
.Vb 1
\&        perl5 \-d:GraphVizProf test.pl
.Ve
.PP
Once the script is done, the statistics in \fIsmallprof.out\fR can be sorted to
show which lines took the most time.  The output can be sorted to find which
lines take the longest, either with the sort command:
.PP
.Vb 1
\&        sort \-k 2nr,2 smallprof.out | less
.Ve
.PP
or a perl script:
.PP
.Vb 5
\&        open(PROF,"smallprof.out");
\&        @sorted = sort {(split(/\es+/,$b))[2] <=>
\&                        (split(/\es+/,$a))[2]} <PROF>;
\&        close PROF;
\&        print join(\*(Aq\*(Aq,@sorted);
.Ve
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
The \*(L"wall time\*(R" readings come from Time::HiRes and are reasonably useful, at
least on my system.  The cpu times come from the 'times' built-in and the
granularity is not necessarily as small as with the wall time.  On some systems
this column may be useful.  On others it may not.
.IP "\(bu" 4
GraphVizProf does attempt to make up for its shortcomings by subtracting a small
amount from each timing (null time compensation).  This should help somewhat
with the accuracy.
.IP "\(bu" 4
GraphVizProf depends on the Time::HiRes package to do its timings.  It claims to
require version 1.20, but may work with earlier versions, depending on your
platform.
.SH "OPTIONS"
.IX Header "OPTIONS"
GraphVizProf has 3 variables which can be used during your script to affect what
gets profiled.
.IP "\(bu" 4
If you do not wish to see lines which were never called, set the variable
\&\f(CW\*(C`$DB::drop_zeros = 1\*(C'\fR.  With \f(CW\*(C`drop_zeros\*(C'\fR set, GraphVizProf can be used for
basic coverage analysis.
.IP "\(bu" 4
To turn off profiling for a time, insert a \f(CW\*(C`$DB::profile = 0\*(C'\fR into your code
(profiling may be turned back on with \f(CW\*(C`$DB::profile = 1\*(C'\fR).  All of the time
between profiling being turned off and back on again will be lumped together
and reported on the \f(CW\*(C`$DB::profile = 0\*(C'\fR line.  This can be used to summarize a
subroutine call or a chunk of code.
.IP "\(bu" 4
To only profile code in a certain package, set the \f(CW%DB::packages\fR array.  For
example, to see only the code in packages \f(CW\*(C`main\*(C'\fR and \f(CW\*(C`Test1\*(C'\fR, do this:
.Sp
.Vb 1
\&        %DB::packages = ( \*(Aqmain\*(Aq => 1, \*(AqTest1\*(Aq => 1 );
.Ve
.IP "\(bu" 4
These variables can be put in a file called \fI.smallprof\fR in the current
directory.  For example, a \fI.smallprof\fR containing
.Sp
.Vb 2
\&        $DB::drop_zeros = 1;
\&        $DB::profile = 0;
.Ve
.Sp
will set GraphVizProf to not report lines which are never touched for any file
profiled in that directory and will set profiling off initially (presumably to
be turned on only for a small portion of code).
.SH "INSTALLATION"
.IX Header "INSTALLATION"
Just the usual
.PP
.Vb 4
\&        perl Makefile.PL
\&        make
\&        make test
\&        make install
.Ve
.PP
and should install fine via the \s-1CPAN\s0 module.
.SH "BUGS"
.IX Header "BUGS"
Subroutine calls are currently not under the control of \f(CW%DB::packages\fR.  This
should not be a great inconvenience in general.
.PP
The handling of evals is bad news.  This is due to Perl's handling of evals
under the \fB\-d\fR flag.  For certain evals, \fIcaller()\fR returns '(eval n)' for the
filename and for others it doesn't.  For some of those which it does, the array
\&\f(CW\*(C`@{\*(Aq_<filename\*(Aq}\*(C'\fR contains the code of the eval.  For others it doesn't.
Sometime, when I've an extra tuit or two, I'll figure out why and how I can
compensate for this.
.PP
Comments, advice and questions are welcome.  If you see
inefficent stuff in this module and have a better way, please let me know.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ted Ashton <ashted@southern.edu>
.PP
GraphVizProf was developed from code originally posted to usenet by Philippe
Verdret <philippe.verdret@sonovision\-itep.fr>.  Special thanks to
Geoffrey Broadwell <habusan2@sprynet.com> for his assistance on the
Win32 platform and to Philippe for his patient assistance in testing and
debugging.
.PP
Copyright (c) 1997 Ted Ashton
.PP
This module is free software; you can redistribute it or modify it under the Perl License,
a copy of which is available at <http://dev.perl.org/licenses/>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Devel::DProf, Time::HiRes.
