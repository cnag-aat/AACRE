.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MojoX::MIME::Types 3"
.TH MojoX::MIME::Types 3 "2018-01-26" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MojoX::MIME::Types \- MIME Types for Mojolicious
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& MojoX::MIME::Types
\&   is a Mojo::Base
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use MojoX::MIME::Types;
\&
\&  # set in Mojolicious as default
\&  $app\->types(MojoX::MIME::Types\->new);
\&  app\->types(MojoX::MIME::Types\->new);   # ::Lite
\&
\&  # basic interface translated into pure MIME::Types
\&  $types\->type(foo => \*(Aqtext/foo\*(Aq);
\&  say $types\->type(\*(Aqfoo\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
[Added to MIME::Types 2.07]
This module is a drop-in replacement for Mojolicious::Types, but
with a more correct handling plus a complete list of types... a huge
list of types.
.PP
Some methods ignore information they receive: those parameters are
accepted for compatibility with the Mojolicious::Types interface,
but should not contain useful information.
.PP
Read the \*(L"\s-1DETAILS\*(R"\s0 below, about how to connect this module into
Mojolicious and the differences you get.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.IP "MojoX::MIME::Types\->\fBnew\fR(%options)" 4
.IX Item "MojoX::MIME::Types->new(%options)"
Create the 'type' handler for Mojolicious.  When you do not specify your
own MIME::Type object ($mime_type), it will be instantanted for you.
You create one yourself when you would like to pass some parameter to
the object constructor.
.Sp
.Vb 3
\& \-Option    \-\-Default
\&  mime_types  <created internally>
\&  types       undef
.Ve
.RS 4
.IP "mime_types => MIME::Types\-object" 2
.IX Item "mime_types => MIME::Types-object"
Pass your own prepared MIME::Types object, when you need some
instantiation parameters different from the defaults.
.IP "types => \s-1HASH\s0" 2
.IX Item "types => HASH"
Ignored.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 1
\&  $app\->types(MojoX::MIME::Types\->new);
\&
\&  # when you need to pass options to MIME::Types\->new
\&  my $mt    = MIME::Types\->new(%opts);
\&  my $types = MojoX::MIME::Types\->new(mime_types => $mt);
\&  $app\->types($types);
.Ve
.RE
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBmimeTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmimeTypes\fR()" 4
.IX Item "$obj->mimeTypes()"
Returns the internal mime types object.
.ie n .IP "$obj\->\fBtypes\fR( [\e%table] )" 4
.el .IP "\f(CW$obj\fR\->\fBtypes\fR( [\e%table] )" 4
.IX Item "$obj->types( [%table] )"
In Mojolicious::Types, this attribute exposes the internal
administration of types, offering to change it with using a clean
abstract interface.  That interface mistake bites now we have more
complex internals.
.Sp
\&\fBAvoid this method!\fR  The returned \s-1HASH\s0 is expensive to construct,
changes passed via \f(CW%table\fR are ignored: MIME::Types is very complete!
.SS "Actions"
.IX Subsection "Actions"
.ie n .IP "$obj\->\fBdetect\fR( $accept, [$prio] )" 4
.el .IP "\f(CW$obj\fR\->\fBdetect\fR( \f(CW$accept\fR, [$prio] )" 4
.IX Item "$obj->detect( $accept, [$prio] )"
Returns a list of filename extensions.  The \f(CW$accept\fR header in \s-1HTTP\s0 can
contain multiple types, with a priority indication ('q' attributes).
The returned list contains a list with extensions, the extensions related
to the highest priority type first.  The \f(CW$prio\fR\-flag is ignored.
See \fIMIME::Types::httpAccept()\fR.
.Sp
This \fIdetect()\fR function is not the correct approach for the Accept header:
the \*(L"Accept\*(R" may contain wildcards ('*') in types for globbing, which
does not produce extensions.  Better use \fIMIME::Types::httpAcceptBest()\fR
or \fIMIME::Types::httpAcceptSelect()\fR.
.Sp
example:
.Sp
.Vb 2
\&  my $exts = $types\->detect(\*(Aqapplication/json;q=9\*(Aq);
\&  my $exts = $types\->detect(\*(Aqtext/html, application/json;q=9\*(Aq);
.Ve
.ie n .IP "$obj\->\fBtype\fR( $ext, [$type|\e@types] )" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR( \f(CW$ext\fR, [$type|\e@types] )" 4
.IX Item "$obj->type( $ext, [$type|@types] )"
Returns the first type name for an extension \f(CW$ext\fR, unless you specify
type names.
.Sp
When a single \f(CW$type\fR or an \s-1ARRAY\s0 of \f(CW@types\fR are specified, the \f(CW$self\fR
object is returned.  Nothing is done with the provided info.
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Why?"
.IX Subsection "Why?"
The Mojolicious::Types module has only very little knowledge about
what is really needed to treat types correctly, and only contains a tiny
list of extensions.  MIME::Types tries to follow the standards
very closely and contains all types found in various lists on internet.
.SS "How to use with Mojolicious"
.IX Subsection "How to use with Mojolicious"
Start your Mojo application like this:
.PP
.Vb 2
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  sub startup {
\&     my $self = shift;
\&     ...
\&     $self\->types(MojoX::MIME::Types\->new);
\&  }
.Ve
.PP
If you have special options for \fIMIME::Types::new()\fR, then create
your own MIME::Types object first:
.PP
.Vb 3
\&  my $mt    = MIME::Types\->new(%opts);
\&  my $types = MojoX::MIME::Types\->new(mime_types => $mt);
\&  $self\->types($types);
.Ve
.PP
In any case, you can reach the smart MIME::Types object later as
.PP
.Vb 2
\&  my $mt    = $app\->types\->mimeTypes;
\&  my $mime  = $mt\->mimeTypeOf($filename);
.Ve
.SS "How to use with Mojolicious::Lite"
.IX Subsection "How to use with Mojolicious::Lite"
The use in Mojolicious::Lite applications is only slightly different
from above:
.PP
.Vb 2
\&  app\->types(MojoX::MIME::Types\->new);
\&  my $types = app\->types;
.Ve
.SS "Differences with Mojolicious::Types"
.IX Subsection "Differences with Mojolicious::Types"
There are a few major difference with Mojolicious::Types:
.IP "\(bu" 4
the tables maintained by MIME::Types are complete.  So: there shouldn't
be a need to add your own types, not via \fItypes()\fR, not via \fItype()\fR.
All attempts to add types are ignored; better remove them from your code.
.IP "\(bu" 4
This plugin understands the experimental flag 'x\-' in types and handles
casing issues.
.IP "\(bu" 4
Updates to the internal hash via \fItypes()\fR are simply ignored, because it
is expensive to implement (and won't add something new).
.IP "\(bu" 4
The \fIdetect()\fR is implemented in a compatible way, but does not understand
wildcards ('*').  You should use \fIMIME::Types::httpAcceptBest()\fR or
\&\fIMIME::Types::httpAcceptSelect()\fR to replace this broken function.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of MIME-Types distribution version 2.17,
built on January 26, 2018. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1999\-2018 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
