.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Matrices::Matrix 3"
.TH Bio::Phylo::Matrices::Matrix 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Matrices::Matrix \- Character state matrix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\&
\& # instantiate taxa object
\& my $taxa = $fac\->create_taxa;
\& for ( \*(AqHomo sapiens\*(Aq, \*(AqPan paniscus\*(Aq, \*(AqPan troglodytes\*(Aq ) {
\&     $taxa\->insert( $fac\->create_taxon( \*(Aq\-name\*(Aq => $_ ) );
\& }
\&
\& # instantiate matrix object, \*(Aqstandard\*(Aq data type. All categorical
\& # data types follow semantics like this, though with different
\& # symbols in lookup table and matrix
\& my $standard_matrix = $fac\->create_matrix(
\&     \*(Aq\-type\*(Aq   => \*(AqSTANDARD\*(Aq,
\&     \*(Aq\-taxa\*(Aq   => $taxa,
\&     \*(Aq\-lookup\*(Aq => { 
\&         \*(Aq\-\*(Aq => [],
\&         \*(Aq0\*(Aq => [ \*(Aq0\*(Aq ],
\&         \*(Aq1\*(Aq => [ \*(Aq1\*(Aq ],
\&         \*(Aq?\*(Aq => [ \*(Aq0\*(Aq, \*(Aq1\*(Aq ],
\&     },
\&     \*(Aq\-labels\*(Aq => [ \*(AqOpposable big toes\*(Aq, \*(AqOpposable thumbs\*(Aq, \*(AqNot a pygmy\*(Aq ],
\&     \*(Aq\-matrix\*(Aq => [
\&         [ \*(AqHomo sapiens\*(Aq    => \*(Aq0\*(Aq, \*(Aq1\*(Aq, \*(Aq1\*(Aq ],
\&         [ \*(AqPan paniscus\*(Aq    => \*(Aq1\*(Aq, \*(Aq1\*(Aq, \*(Aq0\*(Aq ],
\&         [ \*(AqPan troglodytes\*(Aq => \*(Aq1\*(Aq, \*(Aq1\*(Aq, \*(Aq1\*(Aq ],
\&     ],
\& );
\& 
\& # note: complicated constructor for mixed data!
\& my $mixed_matrix = Bio::Phylo::Matrices::Matrix\->new( 
\&    
\&    # if you want to create \*(Aqmixed\*(Aq, value for \*(Aq\-type\*(Aq is array ref...
\&    \*(Aq\-type\*(Aq =>  [ 
\&    
\&        # ...with first field \*(Aqmixed\*(Aq...                
\&        \*(Aqmixed\*(Aq,
\&        
\&        # ...second field is an array ref...
\&        [
\&            
\&            # ...with _ordered_ key/value pairs...
\&            \*(Aqdna\*(Aq      => 10, # value is length of type range
\&            \*(Aqstandard\*(Aq => 10, # value is length of type range
\&            
\&            # ... or, more complicated, value is a hash ref...
\&            \*(Aqrna\*(Aq      => {
\&                \*(Aq\-length\*(Aq => 10, # value is length of type range
\&                
\&                # ...value for \*(Aq\-args\*(Aq is an array ref with args 
\&                # as can be passed to \*(Aqunmixed\*(Aq datatype constructors,
\&                # for example, here we modify the lookup table for
\&                # rna to allow both \*(AqU\*(Aq (default) and \*(AqT\*(Aq
\&                \*(Aq\-args\*(Aq   => [
\&                    \*(Aq\-lookup\*(Aq => {
\&                        \*(AqA\*(Aq => [ \*(AqA\*(Aq                     ],
\&                        \*(AqC\*(Aq => [ \*(AqC\*(Aq                     ],
\&                        \*(AqG\*(Aq => [ \*(AqG\*(Aq                     ],
\&                        \*(AqU\*(Aq => [ \*(AqU\*(Aq                     ],
\&                        \*(AqT\*(Aq => [ \*(AqT\*(Aq                     ],
\&                        \*(AqM\*(Aq => [ \*(AqA\*(Aq, \*(AqC\*(Aq                ],
\&                        \*(AqR\*(Aq => [ \*(AqA\*(Aq, \*(AqG\*(Aq                ],
\&                        \*(AqS\*(Aq => [ \*(AqC\*(Aq, \*(AqG\*(Aq                ],
\&                        \*(AqW\*(Aq => [ \*(AqA\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq           ],
\&                        \*(AqY\*(Aq => [ \*(AqC\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq           ],
\&                        \*(AqK\*(Aq => [ \*(AqG\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq           ],
\&                        \*(AqV\*(Aq => [ \*(AqA\*(Aq, \*(AqC\*(Aq, \*(AqG\*(Aq           ],
\&                        \*(AqH\*(Aq => [ \*(AqA\*(Aq, \*(AqC\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq      ],
\&                        \*(AqD\*(Aq => [ \*(AqA\*(Aq, \*(AqG\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq      ],
\&                        \*(AqB\*(Aq => [ \*(AqC\*(Aq, \*(AqG\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq      ],
\&                        \*(AqX\*(Aq => [ \*(AqG\*(Aq, \*(AqA\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq, \*(AqC\*(Aq ],
\&                        \*(AqN\*(Aq => [ \*(AqG\*(Aq, \*(AqA\*(Aq, \*(AqU\*(Aq, \*(AqT\*(Aq, \*(AqC\*(Aq ],
\&                    },
\&                ],
\&            },
\&        ],
\&    ],
\& );
\& 
\& # prints \*(Aqmixed(Dna:1\-10, Standard:11\-20, Rna:21\-30)\*(Aq
\& print $mixed_matrix\->get_type;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module defines a container object that holds
Bio::Phylo::Matrices::Datum objects. The matrix
object inherits from Bio::Phylo::MatrixRole, so the
methods defined there apply here.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_statelabels()\fR" 4
.IX Item "set_statelabels()"
Sets argument state labels.
.Sp
.Vb 12
\& Type    : Mutator
\& Title   : set_statelabels
\& Usage   : $matrix\->set_statelabels( [ [ \*(Aqstate1\*(Aq, \*(Aqstate2\*(Aq ] ] );
\& Function: Assigns state labels.
\& Returns : $self
\& Args    : ARRAY, or nothing (to reset);
\&           The array is two\-dimensional, 
\&           the first index is to indicate
\&           the column the labels apply to,
\&           the second dimension the states
\&           (sorted numerically or alphabetically,
\&           depending on what\*(Aqs appropriate)
.Ve
.IP "\fIset_characters()\fR" 4
.IX Item "set_characters()"
Sets the character set manager object Bio::Phylo::Matrices::Characters.
Normally you never have to use this.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_characters
\& Usage   : $matrix\->set_characters( $characters );
\& Function: Assigns Bio::Phylo::Matrices::Characters object
\& Returns : $self
\& Args    : Bio::Phylo::Matrices::Characters
.Ve
.IP "\fIset_gapmode()\fR" 4
.IX Item "set_gapmode()"
Defines matrix gapmode.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_gapmode
\& Usage   : $matrix\->set_gapmode( 1 );
\& Function: Defines matrix gapmode ( false = missing, true = fifth state )
\& Returns : $self
\& Args    : boolean
.Ve
.IP "\fIset_matchchar()\fR" 4
.IX Item "set_matchchar()"
Assigns match symbol.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_matchchar
\& Usage   : $matrix\->set_matchchar( $match );
\& Function: Assigns match symbol (default is \*(Aq.\*(Aq).
\& Returns : $self
\& Args    : ARRAY
.Ve
.IP "\fIset_polymorphism()\fR" 4
.IX Item "set_polymorphism()"
Defines matrix 'polymorphism' interpretation.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_polymorphism
\& Usage   : $matrix\->set_polymorphism( 1 );
\& Function: Defines matrix \*(Aqpolymorphism\*(Aq interpretation
\&           ( false = uncertainty, true = polymorphism )
\& Returns : $self
\& Args    : boolean
.Ve
.IP "\fIset_respectcase()\fR" 4
.IX Item "set_respectcase()"
Defines matrix case sensitivity interpretation.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_respectcase
\& Usage   : $matrix\->set_respectcase( 1 );
\& Function: Defines matrix case sensitivity interpretation
\&           ( false = disregarded, true = "respectcase" )
\& Returns : $self
\& Args    : boolean
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_characters()\fR" 4
.IX Item "get_characters()"
Retrieves characters object.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_characters
\& Usage   : my $characters = $matrix\->get_characters
\& Function: Retrieves characters object.
\& Returns : Bio::Phylo::Matrices::Characters
\& Args    : None.
.Ve
.IP "\fIget_statelabels()\fR" 4
.IX Item "get_statelabels()"
Retrieves state labels.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_statelabels
\& Usage   : my @statelabels = @{ $matrix\->get_statelabels };
\& Function: Retrieves state labels.
\& Returns : ARRAY
\& Args    : None.
.Ve
.IP "\fIget_gapmode()\fR" 4
.IX Item "get_gapmode()"
Returns matrix gapmode.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_gapmode
\& Usage   : do_something() if $matrix\->get_gapmode;
\& Function: Returns matrix gapmode ( false = missing, true = fifth state )
\& Returns : boolean
\& Args    : none
.Ve
.IP "\fIget_matchchar()\fR" 4
.IX Item "get_matchchar()"
Returns matrix match character.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_matchchar
\& Usage   : my $char = $matrix\->get_matchchar;
\& Function: Returns matrix match character (default is \*(Aq.\*(Aq)
\& Returns : SCALAR
\& Args    : none
.Ve
.IP "\fIget_polymorphism()\fR" 4
.IX Item "get_polymorphism()"
Returns matrix 'polymorphism' interpretation.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_polymorphism
\& Usage   : do_something() if $matrix\->get_polymorphism;
\& Function: Returns matrix \*(Aqpolymorphism\*(Aq interpretation
\&           ( false = uncertainty, true = polymorphism )
\& Returns : boolean
\& Args    : none
.Ve
.IP "\fIget_respectcase()\fR" 4
.IX Item "get_respectcase()"
Returns matrix case sensitivity interpretation.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_respectcase
\& Usage   : do_something() if $matrix\->get_respectcase;
\& Function: Returns matrix case sensitivity interpretation
\&           ( false = disregarded, true = "respectcase" )
\& Returns : boolean
\& Args    : none
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Taxa::TaxaLinker" 4
.IX Item "Bio::Phylo::Taxa::TaxaLinker"
This object inherits from Bio::Phylo::Taxa::TaxaLinker, so the
methods defined therein are also applicable to Bio::Phylo::Matrices::Matrix
objects.
.IP "Bio::Phylo::Matrices::TypeSafeData" 4
.IX Item "Bio::Phylo::Matrices::TypeSafeData"
This object inherits from Bio::Phylo::Matrices::TypeSafeData, so the
methods defined therein are also applicable to Bio::Phylo::Matrices::Matrix
objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
