.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::Molphy::ProtML 3"
.TH Bio::Tools::Run::Phylo::Molphy::ProtML 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::Molphy::ProtML \- A wrapper for the Molphy pkg app ProtML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Bio::AlignIO;
\&  use Bio::TreeIO;
\&  use Bio::Tools::Run::Phylo::Molphy::ProtML;
\&
\&  my %args = ( \*(Aqmodels\*(Aq => \*(Aqjtt\*(Aq,
\&               \*(Aqsearch\*(Aq => \*(Aqquick\*(Aq,
\&               \*(Aqother\*(Aq  => [ \*(Aq\-information\*(Aq, \*(Aq\-w\*(Aq] );
\&  my $verbose = 0; # change to 1 if you want some debugging output
\&  my $protml = Bio::Tools::Run::Phylo::Molphy::ProtML\->new(\-verbose => $verbose,
\&                                                          \-flags   => \e%args);
\&
\&  die("cannot find the protml executable") unless $protml\->executable;
\&
\&  # read in a previously built protein alignment
\&  my $in = Bio::AlignIO\->new(\-format => \*(Aqclustalw\*(Aq,
\&                            \-file   => \*(Aqt/data/cel\-cbr\-fam.aln\*(Aq);
\&  my $aln = $in\->next_aln;
\&  $protml\->alignment($aln);
\&
\&  my ($rc,$results) = $protml\->run();
\&
\&  # This may be a bit of overkill, but it is possible we could
\&  # have a bunch of results and $results is a
\&  # Bio::Tools::Phylo::Molphy object
\&
\&  my $r = $results\->next_result;
\&  # $r is a Bio::Tools::Phylo::Molphy::Result object
\&
\&  my @trees;
\&  while( my $t = $r\->next_tree ) {
\&      push @trees, $t;
\&  }
\&
\&  print "search space is ", $r\->search_space, "\en";
\&        "1st tree score is ", $tree[0]\->score, "\en";
\&
\&  my $out = Bio::TreeIO\->new(\-file => ">saved_MLtrees.tre",
\&                            \-format => "newick");
\&  $out\->write_tree($tree[0]);
\&  $out = undef;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper for the exe from the Molphy (MOLecular
PHYlogenetics) package by Jun Adachi & Masami Hasegawa.  The software
can be downloaded from <http://www.ism.ac.jp/ismlib/softother.e.html>.
Note that \s-1PHYLIP\s0 (Joe Felsenstein) also provides a version of protml
which this module is currently \s-1NOT\s0 prepared to handle.  Use the package
available directly from \s-1MOLPHY\s0 authors if you want to use the module
in its present implementation (extensions are welcomed!).
.PP
The main components are the protml and nucml executables which are
used to build maximum likelihood (\s-1ML\s0) phylogenetic trees based on
either protein or nucleotide sequences.
.PP
Here are the valid input parameters, we have added a longhand version
of the parameters to help you understand what each one does.  Either
the longhand or the original Molphy parameter will work.
.PP
.Vb 10
\&  Bioperl      Molphy           Description
\&  Longhand     parameter
\&  Model (one of these):
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  jtt              j            Jones, Taylor & Thornton (1992)
\&  jtt\-f            jf           JTT w/ frequencies
\&  dayhoff          d            Dahoff et al. (1978)
\&  dayhoff\-f        d            dayhoff w/ frequencies
\&  mtrev24          m            mtREV24 Adachi & Hasegwa (1995)
\&  mtrev24\-f        mf           mtREV24 w/ frequencies
\&  poisson          p            Poisson
\&  proportional     pf           Proportional
\&  rsr              r            Relative Substitution Rate
\&  rsr\-f            rf           RSR w/ frequencies
\&  frequencies      f            data frequencies
\&
\&  Search Strategy (one of these):
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  usertrees        u            User trees (must also supply a tree)
\&  rearrangement    R            Local rearrangement
\&  lbp              RX           Local boostrap prob
\&  exhaustive       e            Exhaustive search
\&  star             s            Star decomposition search (may not be ML)
\&  quick            q            Quick Add OTU search (may not be ML)
\&  distance         D            ML Distance matrix \-\-> NJDIST (need to supply
\&                                                               NJDIST tree)
\&
\&  Others (can be some or all of these):
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  norell\-bp        b            No RELL\-BP
\&  minimumevolution M            Minimum evolution
\&
\&  sequential       S            Sequence is in Sequential format
\&                     _OR_
\&  interleaved      I            Sequence is in Interleaved format
\&
\&  verbose          v            Verbose messages directed to STDERR
\&  information      i            Output some information (tree vals)
\&                   w            More some extra information (transition
\&                                                             matricies, etc)
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-AT\-bioperl_DOT_org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : >program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Run::Phylo::Molphy::ProtML\->new();
\& Function: Builds a new Bio::Tools::Run::Phylo::Molphy::ProtML object
\& Returns : Bio::Tools::Run::Phylo::Molphy::ProtML
\& Args    : \-alignment => the Bio::Align::AlignI object
\&           \-save_tempfiles => boolean to save the generated tempfiles and
\&                              NOT cleanup after onesself (default FALSE)
\&           \-tree => the Bio::Tree::TreeI object
\&           \-params => a hashref of PAML parameters (all passed to
\&                                                    set_parameter)
\&           \-executable => where the protml executable resides
.Ve
.PP
See also: Bio::Tree::TreeI, Bio::Align::AlignI
.SS "run"
.IX Subsection "run"
.Vb 6
\& Title   : run
\& Usage   : $protml\->run();
\& Function: run the protml analysis using the default or updated parameters
\&           the alignment parameter must have been set
\& Returns : Bio::Tools::Phylo::Molphy
\& Args    :
.Ve
.SS "alignment"
.IX Subsection "alignment"
.Vb 8
\& Title   : alignment
\& Usage   : $protml\->align($aln);
\& Function: Get/Set the Bio::Align::AlignI object
\& Returns : Bio::Align::AlignI object
\& Args    : [optional] Bio::Align::AlignI
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\&See also : L<Bio::SimpleAlign>, L<Bio::Align::AlignI>
.Ve
.SS "tree"
.IX Subsection "tree"
.Vb 5
\& Title   : tree
\& Usage   : $protml\->tree($tree, %params);
\& Function: Get/Set the Bio::Tree::TreeI object
\& Returns : Bio::Tree::TreeI
\& Args    : [optional] $tree => Bio::Tree::TreeI,
\&
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\&See also : L<Bio::Tree::Tree>
.Ve
.SS "get_flags"
.IX Subsection "get_flags"
.Vb 5
\& Title   : get_flags
\& Usage   : my @params = $protml\->get_flags();
\& Function: returns the list of flags
\& Returns : array of flag names coded in the way that
\& Args    : none
.Ve
.SS "set_flag"
.IX Subsection "set_flag"
.Vb 12
\& Title   : set_flag
\& Usage   : $protml\->set_parameter($type,$val);
\& Function: Sets a protml parameter, will be validated against
\&           the valid values as set in the %VALIDVALUES class variable.
\&           The checks can be ignored if one turns off param checks like this:
\&             $protml\->no_param_checks(1)
\& Returns : boolean if set was success, if verbose is set to \-1
\&           then no warning will be reported
\& Args    : $type => name of the parameter
\&           This can be one of \*(Aqsearch\*(Aq, \*(Aqmodel\*(Aq, \*(Aqother\*(Aq
\&           $value => flag value
\& See also: L<no_param_checks()>
.Ve
.SS "get_parameters"
.IX Subsection "get_parameters"
.Vb 5
\& Title   : get_parameters
\& Usage   : my %params = $protml\->get_parameters();
\& Function: returns the list of parameters as a hash
\& Returns : associative array keyed on parameter names
\& Args    : none
.Ve
.SS "set_parameter"
.IX Subsection "set_parameter"
.Vb 11
\& Title   : set_parameter
\& Usage   : $protml\->set_parameter($param,$val);
\& Function: Sets a protml parameter, will be validated against
\&           the valid values as set in the %VALIDVALUES class variable.
\&           The checks can be ignored if one turns off param checks like this:
\&             $protml\->no_param_checks(1)
\& Returns : boolean if set was success, if verbose is set to \-1
\&           then no warning will be reported
\& Args    : $param => name of the parameter
\&           $value => value to set the parameter to
\& See also: L<no_param_checks()>
.Ve
.SH "Bio::Tools::Run::WrapperBase methods"
.IX Header "Bio::Tools::Run::WrapperBase methods"
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function:
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $protml\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $protml\->cleanup();
\& Function: Will cleanup the tempdir directory after a PAML run
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
