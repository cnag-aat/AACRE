.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "BufferText 3"
.TH BufferText 3 "2003-07-04" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Filter::BufferText \- Filter to put all characters() in one event
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  my $h = SomeHandler\->new;
\&  my $f = XML::Filter::BufferText\->new( Handler => $h );
\&  my $p = SomeParser\->new( Handler => $f );
\&  $p\->parse;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a very simple filter. One common cause of grief (and programmer
error) is that \s-1XML\s0 parsers aren't required to provide character events in one
chunk. They can, but are not forced to, and most don't. This filter does the
trivial but oft-repeated task of putting all characters into a single event.
.PP
Note that this won't help you cases such as:
.PP
.Vb 1
\&  <foo> blah <!\-\- comment \-\-> phubar </foo>
.Ve
.PP
In the above case, given the interleaving comment, there will be two
\&\f(CW\*(C`character()\*(C'\fR events. This may be worked around in the future if there is
demand for it.
.PP
An interesting way to use this filter, instead of telling users to use it,
is to return it from your handler's constructor, already configured and all.
That'll make the buffering totally transparent to them (\f(CW\*(C`XML::SAX::Writer\*(C'\fR
does that).
.SH "AUTHOR"
.IX Header "AUTHOR"
Robin Berjon, robin@knowscape.com
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2002 Robin Berjon. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::SAX::*, XML::Generator::*, XML::Handler::*, XML::Filter::*
