.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::PhyloRole 3"
.TH Bio::PhyloRole 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::PhyloRole \- Extra behaviours for the base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # Actually, you would almost never use this module directly. This is 
\& # the base class for other modules.
\& use Bio::Phylo;
\& 
\& # sets global verbosity to \*(Aqerror\*(Aq
\& Bio::Phylo\->VERBOSE( \-level => Bio::Phylo::Util::Logger::ERROR );
\& 
\& # sets verbosity for forest ojects to \*(Aqdebug\*(Aq
\& Bio::Phylo\->VERBOSE( 
\&        \-level => Bio::Phylo::Util::Logger::DEBUG, 
\&        \-class => \*(AqBio::Phylo::Forest\*(Aq 
\& );
\& 
\& # prints version, including SVN revision number
\& print Bio::Phylo\->VERSION;
\& 
\& # prints suggested citation
\& print Bio::Phylo\->CITATION;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for the Bio::Phylo package for phylogenetic analysis using 
object-oriented perl5. In this file, methods are defined that are performed by other 
objects in the Bio::Phylo release that inherit from this base class (which you normally
wouldn't use directly).
.PP
For general information on how to use Bio::Phylo, consult the manual
(Bio::Phylo::Manual).
.PP
If you come here because you are trying to debug a problem you run into in
using Bio::Phylo, you may be interested in the \*(L"exceptions\*(R" system as discussed
in Bio::Phylo::Util::Exceptions. In addition, you may find the logging system
in Bio::Phylo::Util::Logger of use to localize problems.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_nexus_name()\fR" 4
.IX Item "get_nexus_name()"
Gets invocant's name, modified to be safely used in nexus files. This means that:
.IP "names with spaces in them that aren't 'single quoted' have their spaces replaced with underscores" 4
.IX Item "names with spaces in them that aren't 'single quoted' have their spaces replaced with underscores"
.PD 0
.IP "names with any of the following characters in them are single quoted: \-^*(){}[]+=;:""\e<>/," 4
.IX Item "names with any of the following characters in them are single quoted: -^*(){}[]+=;:""<>/,"
.ie n .IP "names with single quotes inside them (i.e. not around them) are ""double quoted""" 4
.el .IP "names with single quotes inside them (i.e. not around them) are ``double quoted''" 4
.IX Item "names with single quotes inside them (i.e. not around them) are double quoted"
.PD
.Vb 6
\& Type    : Accessor
\& Title   : get_nexus_name
\& Usage   : my $name = $obj\->get_nexus_name;
\& Function: Returns the object\*(Aqs name.
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_internal_name()\fR" 4
.IX Item "get_internal_name()"
Gets invocant's 'fallback' name (possibly autogenerated).
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_internal_name
\& Usage   : my $name = $obj\->get_internal_name;
\& Function: Returns the object\*(Aqs name (if none was set, the name
\&           is a combination of the $obj\*(Aqs class and its UID).
\& Returns : A string
\& Args    : None
.Ve
.SS "\s-1PACKAGE METHODS\s0"
.IX Subsection "PACKAGE METHODS"
.IP "\fIget()\fR" 4
.IX Item "get()"
Attempts to execute argument string as method on invocant.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get
\& Usage   : my $treename = $tree\->get(\*(Aqget_name\*(Aq);
\& Function: Alternative syntax for safely accessing
\&           any of the object data; useful for
\&           interpolating runtime $vars.
\& Returns : (context dependent)
\& Args    : a SCALAR variable, e.g. $var = \*(Aqget_name\*(Aq;
.Ve
.IP "\fIto_string()\fR" 4
.IX Item "to_string()"
Serializes object to general purpose string
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_string()
\& Usage   : print $obj\->to_string();
\& Function: Serializes object to general purpose string
\& Returns : String 
\& Args    : None
\& Comments: This is YAML
.Ve
.IP "\s-1\fIVERBOSE\s0()\fR" 4
.IX Item "VERBOSE()"
Getter and setter for the verbosity level. Refer to Bio::Phylo::Util::Logger for more
info on available verbosity levels.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : VERBOSE()
\& Usage   : Bio::Phylo\->VERBOSE( \-level => $level )
\& Function: Sets/gets verbose level
\& Returns : Verbose level
\& Args    : \-level => $level
\& Comments:
.Ve
.IP "\s-1\fICITATION\s0()\fR" 4
.IX Item "CITATION()"
Returns suggested citation.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : CITATION
\& Usage   : $phylo\->CITATION;
\& Function: Returns suggested citation.
\& Returns : Returns suggested citation.
\& Args    : None
\& Comments:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.PP
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
