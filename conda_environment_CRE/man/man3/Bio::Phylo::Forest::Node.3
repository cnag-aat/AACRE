.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Forest::Node 3"
.TH Bio::Phylo::Forest::Node 3 "2014-03-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Forest::Node \- Node in a phylogenetic tree
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& # some way to get nodes:
\& use Bio::Phylo::IO;
\& my $string = \*(Aq((A,B),C);\*(Aq;
\& my $forest = Bio::Phylo::IO\->parse(
\&    \-format => \*(Aqnewick\*(Aq,
\&    \-string => $string
\& );
\&
\& # prints \*(AqBio::Phylo::Forest\*(Aq
\& print ref $forest;
\&
\& foreach my $tree ( @{ $forest\->get_entities } ) {
\&
\&    # prints \*(AqBio::Phylo::Forest::Tree\*(Aq
\&    print ref $tree;
\&
\&    foreach my $node ( @{ $tree\->get_entities } ) {
\&
\&       # prints \*(AqBio::Phylo::Forest::Node\*(Aq
\&       print ref $node;
\&
\&       # node has a parent, i.e. is not root
\&       if ( $node\->get_parent ) {
\&          $node\->set_branch_length(1);
\&       }
\&
\&       # node is root
\&       else {
\&          $node\->set_branch_length(0);
\&       }
\&    }
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module has the getters and setters that alter the state of a 
node object. Useful behaviours (which are also available) are defined
in the Bio::Phylo::Forest::NodeRole package.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIset_parent()\fR" 4
.IX Item "set_parent()"
Sets argument as invocant's parent.
.Sp
.Vb 9
\& Type    : Mutator
\& Title   : set_parent
\& Usage   : $node\->set_parent($parent);
\& Function: Assigns a node\*(Aqs parent.
\& Returns : Modified object.
\& Args    : If no argument is given, the current
\&           parent is set to undefined. A valid
\&           argument is Bio::Phylo::Forest::Node
\&           object.
.Ve
.IP "\fIset_child()\fR" 4
.IX Item "set_child()"
Sets argument as invocant's child.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_child
\& Usage   : $node\->set_child($child);
\& Function: Assigns a new child to $node
\& Returns : Modified object.
\& Args    : A valid argument consists of a
\&           Bio::Phylo::Forest::Node object.
.Ve
.IP "\fIset_branch_length()\fR" 4
.IX Item "set_branch_length()"
Sets argument as invocant's branch length.
.Sp
.Vb 9
\& Type    : Mutator
\& Title   : set_branch_length
\& Usage   : $node\->set_branch_length(0.423e+2);
\& Function: Assigns a node\*(Aqs branch length.
\& Returns : Modified object.
\& Args    : If no argument is given, the
\&           current branch length is set
\&           to undefined. A valid argument
\&           is a number in any of Perl\*(Aqs formats.
.Ve
.IP "\fIset_tree()\fR" 4
.IX Item "set_tree()"
Sets what tree invocant belongs to
.Sp
.Vb 9
\& Type    : Mutator
\& Title   : set_tree
\& Usage   : $node\->set_tree($tree);
\& Function: Sets what tree invocant belongs to
\& Returns : Invocant
\& Args    : Bio::Phylo::Forest::Tree
\& Comments: This method is called automatically 
\&           when inserting or deleting nodes in
\&           trees.
.Ve
.IP "\fIget_parent()\fR" 4
.IX Item "get_parent()"
Gets invocant's parent.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_parent
\& Usage   : my $parent = $node\->get_parent;
\& Function: Retrieves a node\*(Aqs parent.
\& Returns : Bio::Phylo::Forest::Node
\& Args    : NONE
.Ve
.IP "\fIget_branch_length()\fR" 4
.IX Item "get_branch_length()"
Gets invocant's branch length.
.Sp
.Vb 10
\& Type    : Accessor
\& Title   : get_branch_length
\& Usage   : my $branch_length = $node\->get_branch_length;
\& Function: Retrieves a node\*(Aqs branch length.
\& Returns : FLOAT
\& Args    : NONE
\& Comments: Test for "defined($node\->get_branch_length)"
\&           for zero\-length (but defined) branches. Testing
\&           "if ( $node\->get_branch_length ) { ... }"
\&           yields false for zero\-but\-defined branches!
.Ve
.IP "\fIget_children()\fR" 4
.IX Item "get_children()"
Gets invocant's immediate children.
.Sp
.Vb 8
\& Type    : Query
\& Title   : get_children
\& Usage   : my @children = @{ $node\->get_children };
\& Function: Returns an array reference of immediate
\&           descendants, ordered from left to right.
\& Returns : Array reference of
\&           Bio::Phylo::Forest::Node objects.
\& Args    : NONE
.Ve
.IP "\fIget_tree()\fR" 4
.IX Item "get_tree()"
Returns the tree invocant belongs to
.Sp
.Vb 6
\& Type    : Query
\& Title   : get_tree
\& Usage   : my $tree = $node\->get_tree;
\& Function: Returns the tree $node belongs to
\& Returns : Bio::Phylo::Forest::Tree
\& Args    : NONE
.Ve
.PP
.Vb 1
\&    # podinherit_insert_token
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Forest::NodeRole" 4
.IX Item "Bio::Phylo::Forest::NodeRole"
This object inherits from Bio::Phylo::Forest::NodeRole, so methods
defined there are also applicable here.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
