.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::ESoap 3"
.TH Bio::DB::ESoap 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::ESoap \- Client for the NCBI Entrez EUtilities SOAP server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& $fac = Bio::DB::ESoap\->new( \-util => \*(Aqesearch\*(Aq );
\& $som = $fac\->run( \-db => \*(Aqprot\*(Aq, \-term => \*(AqHIV and gp120\*(Aq );
\& $fac\->set_parameters( \-term => \*(AqHIV2 and gp160\*(Aq );
\& # accessors corresponding to valid parameters are also created:
\& $fac\->db(\*(Aqnuccore\*(Aq);
\& $som = $fac\->run;
\&
\& # more later.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`ESoap\*(C'\fR provides a basic \s-1SOAP\s0 interface to the \s-1NCBI\s0 Entrez Utilities
Web Service
(<http://eutils.ncbi.nlm.nih.gov/entrez/eutils/soap/v2.0/DOC/esoap_help.html>).
SOAP::Lite handles the \s-1SOAP\s0 calls. Higher level access, pipelines,
BioPerl object I/O and such are provided by
Bio::DB::SoapEUtilities.
.PP
\&\f(CW\*(C`ESoap\*(C'\fR complies with Bio::ParameterBaseI. It depends explicitly
on \s-1NCBI\s0 web service description language files to inform the
\&\f(CW\*(C`available_parameters()\*(C'\fR method. WSDLs are parsed by a relative
lightweight, Entrez-specific module Bio::DB::ESoap::WSDL.
.PP
The \f(CW\*(C`run()\*(C'\fR method returns \s-1SOAP::SOM\s0 (\s-1SOAP\s0 Message) objects. No
fault checking or other parsing is performed in this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::DB::EUtilities, Bio::DB::SoapEUtilities,
Bio::DB::ESoap::WSDL
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
bioperl\-l@bioperl.org
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Mark A. Jensen"
.IX Header "AUTHOR - Mark A. Jensen"
Email maj \-at\- fortinbras \-dot\- us
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::DB::ESoap();
\& Function: Builds a new Bio::DB::ESoap factory
\& Returns : an instance of Bio::DB::ESoap
\& Args    :
.Ve
.SS "\fI_wsdl()\fP"
.IX Subsection "_wsdl()"
.Vb 7
\& Title   : _wsdl
\& Usage   : $obj\->_wsdl($newval)
\& Function: Bio::DB::ESoap::WSDL object associated with 
\&           this factory
\& Example : 
\& Returns : value of _wsdl (object)
\& Args    : on set, new value (object or undef, optional)
.Ve
.SS "\fI_client()\fP"
.IX Subsection "_client()"
.Vb 6
\& Title   : _client
\& Usage   : $obj\->_client($newval)
\& Function: holds a SOAP::Lite object
\& Example : 
\& Returns : value of _client (a SOAP::Lite object)
\& Args    : on set, new value (a SOAP::Lite object or undef, optional)
.Ve
.SS "\fI_operation()\fP"
.IX Subsection "_operation()"
.Vb 6
\& Title   : _operation
\& Alias   : util
\& Usage   : 
\& Function: check and convert the requested operation based on the wsdl
\& Returns : 
\& Args    : operation (scalar string)
.Ve
.SS "\fIaction()\fP"
.IX Subsection "action()"
.Vb 5
\& Title   : action
\& Usage   : 
\& Function: return the soapAction associated with the factory\*(Aqs utility
\& Returns : scalar string
\& Args    : none
.Ve
.SS "\fIwsdl_file()\fP"
.IX Subsection "wsdl_file()"
.Vb 5
\& Title   : wsdl_file
\& Usage   : 
\& Function: get filename of the local WSDL XML copy
\& Returns : filename (scalar string)
\& Args    : none
.Ve
.SS "\fIrun()\fP"
.IX Subsection "run()"
.Vb 7
\& Title   : _run
\& Usage   : $som = $self\->_run(@optional_setting_args)
\& Function: Call the SOAP service with the factory\-associated utility
\&           and parameters
\& Returns : SOAP::SOM (SOAP Message) object
\& Args    : named parameters appropriate for the utility
\& Note    : no fault checking here
.Ve
.SS "Bio::ParameterBaseI compliance"
.IX Subsection "Bio::ParameterBaseI compliance"
.SS "\fIparameters_changed()\fP"
.IX Subsection "parameters_changed()"
.Vb 6
\& Title   : parameters_changed
\& Usage   : $obj\->parameters_changed($newval)
\& Function: flag to indicate, well, you know
\& Example : 
\& Returns : value of parameters_changed (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "\fI_init_parameters()\fP"
.IX Subsection "_init_parameters()"
.Vb 6
\& Title   : _init_parameters
\& Usage   : $fac\->_init_parameters
\& Function: identify the available input parameters
\&           using the wsdl object
\& Returns : arrayref of parameter names (scalar strings)
\& Args    : none
.Ve
