.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Resource::ExtGState 3"
.TH PDF::API2::Resource::ExtGState 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Resource::ExtGState \- Graphics state dictionary support
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$egs = PDF::API2::Resource::ExtGState\->new @parameters" 4
.el .IP "\f(CW$egs\fR = PDF::API2::Resource::ExtGState\->new \f(CW@parameters\fR" 4
.IX Item "$egs = PDF::API2::Resource::ExtGState->new @parameters"
Returns a new extgstate object (called from \f(CW$pdf\fR\->egstate).
.ie n .IP "$egs\->strokeadjust $boolean" 4
.el .IP "\f(CW$egs\fR\->strokeadjust \f(CW$boolean\fR" 4
.IX Item "$egs->strokeadjust $boolean"
.PD 0
.ie n .IP "$egs\->strokeoverprint $boolean" 4
.el .IP "\f(CW$egs\fR\->strokeoverprint \f(CW$boolean\fR" 4
.IX Item "$egs->strokeoverprint $boolean"
.ie n .IP "$egs\->filloverprint $boolean" 4
.el .IP "\f(CW$egs\fR\->filloverprint \f(CW$boolean\fR" 4
.IX Item "$egs->filloverprint $boolean"
.ie n .IP "$egs\->overprintmode $num" 4
.el .IP "\f(CW$egs\fR\->overprintmode \f(CW$num\fR" 4
.IX Item "$egs->overprintmode $num"
.ie n .IP "$egs\->blackgeneration $obj" 4
.el .IP "\f(CW$egs\fR\->blackgeneration \f(CW$obj\fR" 4
.IX Item "$egs->blackgeneration $obj"
.ie n .IP "$egs\->blackgeneration2 $obj" 4
.el .IP "\f(CW$egs\fR\->blackgeneration2 \f(CW$obj\fR" 4
.IX Item "$egs->blackgeneration2 $obj"
.ie n .IP "$egs\->undercolorremoval $obj" 4
.el .IP "\f(CW$egs\fR\->undercolorremoval \f(CW$obj\fR" 4
.IX Item "$egs->undercolorremoval $obj"
.ie n .IP "$egs\->undercolorremoval2 $obj" 4
.el .IP "\f(CW$egs\fR\->undercolorremoval2 \f(CW$obj\fR" 4
.IX Item "$egs->undercolorremoval2 $obj"
.ie n .IP "$egs\->transfer $obj" 4
.el .IP "\f(CW$egs\fR\->transfer \f(CW$obj\fR" 4
.IX Item "$egs->transfer $obj"
.ie n .IP "$egs\->transfer2 $obj" 4
.el .IP "\f(CW$egs\fR\->transfer2 \f(CW$obj\fR" 4
.IX Item "$egs->transfer2 $obj"
.ie n .IP "$egs\->halftone $obj" 4
.el .IP "\f(CW$egs\fR\->halftone \f(CW$obj\fR" 4
.IX Item "$egs->halftone $obj"
.ie n .IP "$egs\->halftonephase $obj" 4
.el .IP "\f(CW$egs\fR\->halftonephase \f(CW$obj\fR" 4
.IX Item "$egs->halftonephase $obj"
.ie n .IP "$egs\->smoothness $num" 4
.el .IP "\f(CW$egs\fR\->smoothness \f(CW$num\fR" 4
.IX Item "$egs->smoothness $num"
.ie n .IP "$egs\->font $font, $size" 4
.el .IP "\f(CW$egs\fR\->font \f(CW$font\fR, \f(CW$size\fR" 4
.IX Item "$egs->font $font, $size"
.ie n .IP "$egs\->linewidth $size" 4
.el .IP "\f(CW$egs\fR\->linewidth \f(CW$size\fR" 4
.IX Item "$egs->linewidth $size"
.ie n .IP "$egs\->linecap $cap" 4
.el .IP "\f(CW$egs\fR\->linecap \f(CW$cap\fR" 4
.IX Item "$egs->linecap $cap"
.ie n .IP "$egs\->linejoin $join" 4
.el .IP "\f(CW$egs\fR\->linejoin \f(CW$join\fR" 4
.IX Item "$egs->linejoin $join"
.ie n .IP "$egs\->miterlimit $limit" 4
.el .IP "\f(CW$egs\fR\->miterlimit \f(CW$limit\fR" 4
.IX Item "$egs->miterlimit $limit"
.ie n .IP "$egs\->dash @dash" 4
.el .IP "\f(CW$egs\fR\->dash \f(CW@dash\fR" 4
.IX Item "$egs->dash @dash"
.ie n .IP "$egs\->flatness $flat" 4
.el .IP "\f(CW$egs\fR\->flatness \f(CW$flat\fR" 4
.IX Item "$egs->flatness $flat"
.ie n .IP "$egs\->renderingintent $intentName" 4
.el .IP "\f(CW$egs\fR\->renderingintent \f(CW$intentName\fR" 4
.IX Item "$egs->renderingintent $intentName"
.ie n .IP "$egs\->strokealpha $alpha" 4
.el .IP "\f(CW$egs\fR\->strokealpha \f(CW$alpha\fR" 4
.IX Item "$egs->strokealpha $alpha"
.PD
The current stroking alpha constant, specifying the
constant shape or constant opacity value to be used
for stroking operations in the transparent imaging model.
.ie n .IP "$egs\->fillalpha $alpha" 4
.el .IP "\f(CW$egs\fR\->fillalpha \f(CW$alpha\fR" 4
.IX Item "$egs->fillalpha $alpha"
Same as strokealpha, but for nonstroking operations.
.ie n .IP "$egs\->blendmode $blendname" 4
.el .IP "\f(CW$egs\fR\->blendmode \f(CW$blendname\fR" 4
.IX Item "$egs->blendmode $blendname"
.PD 0
.ie n .IP "$egs\->blendmode $blendfunctionobj" 4
.el .IP "\f(CW$egs\fR\->blendmode \f(CW$blendfunctionobj\fR" 4
.IX Item "$egs->blendmode $blendfunctionobj"
.PD
The current blend mode to be used in the transparent
imaging model.
.ie n .IP "$egs\->alphaisshape $boolean" 4
.el .IP "\f(CW$egs\fR\->alphaisshape \f(CW$boolean\fR" 4
.IX Item "$egs->alphaisshape $boolean"
The alpha source flag (alpha is shape), specifying
whether the current soft mask and alpha constant
are to be interpreted as shape values (true) or
opacity values (false).
.ie n .IP "$egs\->textknockout $boolean" 4
.el .IP "\f(CW$egs\fR\->textknockout \f(CW$boolean\fR" 4
.IX Item "$egs->textknockout $boolean"
The text knockout flag, which determines the behavior
of overlapping glyphs within a text object in the
transparent imaging model.
.ie n .IP "$egs\->transparency $t" 4
.el .IP "\f(CW$egs\fR\->transparency \f(CW$t\fR" 4
.IX Item "$egs->transparency $t"
The graphics transparency, with 0 being fully opaque and 1 being fully transparent.
This is a convenience method setting proper values for strokealpha and fillalpha.
.ie n .IP "$egs\->opacity $op" 4
.el .IP "\f(CW$egs\fR\->opacity \f(CW$op\fR" 4
.IX Item "$egs->opacity $op"
The graphics opacity , with 1 being fully opaque and 0 being fully transparent.
This is a convenience method setting proper values for strokealpha and fillalpha.
