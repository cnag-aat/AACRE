.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "GraphViz::Data::Grapher 3"
.TH GraphViz::Data::Grapher 3 "2016-12-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz::Data::Grapher \- Visualise data structures as a graph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use GraphViz::Data::Grapher;
\&
\&  my $graph = GraphViz::Data::Grapher\->new($structure);
\&  print $graph\->as_png;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module makes it easy to visualise Perl data structures. Data
structures can grow quite large and it can be hard to understand the
quite how the structure fits together.
.PP
Data::Dumper can help by representing the structure as a text
hierarchy, but GraphViz::Data::Grapher goes a step further and
visualises the structure by drawing a graph which represents the data
structure.
.PP
Arrays are represented by records. Scalars are represented by
themselves. Array references are represented by a '@' symbol, which is
linked to the array. Hash references are represented by a '%' symbol,
which is linked to an array of keys, which each link to their value.
Object references are represented by 'Object', which then links to the
type of the object. Undef is represented by 'undef'.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This is the constructor. It takes a list, which is the data structure
to be visualised. A GraphViz object is returned.
.PP
.Vb 1
\&  my $graph = GraphViz::Data::Grapher\->new([3, 4, 5], "Hello");
.Ve
.SS "as_*"
.IX Subsection "as_*"
The data structure can be visualised in a number of different
graphical formats. Methods include as_ps, as_hpgl, as_pcl, as_mif,
as_pic, as_gd, as_gd2, as_gif, as_jpeg, as_png, as_wbmp, as_ismap,
as_imap, as_vrml, as_vtx, as_mp, as_fig, as_svg. See the GraphViz
documentation for more information. The two most common methods are:
.PP
.Vb 2
\&  # Print out a PNG\-format file
\&  print $graph\->as_png;
\&
\&  # Print out a PostScript\-format file
\&  print $graph\->as_ps;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Leon Brocard <\fIacme@astray.com\fR>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-1, Leon Brocard
.PP
This module is free software; you can redistribute it or modify it under the Perl License,
a copy of which is available at <http://dev.perl.org/licenses/>.
