.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Outline 3"
.TH PDF::API2::Outline 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Outline \- Manage PDF outlines (a.k.a. bookmarks)
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$outline = PDF::API2::Outline\->new($api, $parent, $prev)" 4
.el .IP "\f(CW$outline\fR = PDF::API2::Outline\->new($api, \f(CW$parent\fR, \f(CW$prev\fR)" 4
.IX Item "$outline = PDF::API2::Outline->new($api, $parent, $prev)"
Returns a new outline object (called from \f(CW$outlines\fR\->\fIoutline()\fR).
.ie n .IP "$outline\->title($text)" 4
.el .IP "\f(CW$outline\fR\->title($text)" 4
.IX Item "$outline->title($text)"
Set the title of the outline.
.ie n .IP "$outline\->\fIclosed()\fR" 4
.el .IP "\f(CW$outline\fR\->\fIclosed()\fR" 4
.IX Item "$outline->closed()"
Set the status of the outline to closed (i.e. collapsed).
.ie n .IP "$outline\->\fIopen()\fR" 4
.el .IP "\f(CW$outline\fR\->\fIopen()\fR" 4
.IX Item "$outline->open()"
Set the status of the outline to open (i.e. expanded).
.ie n .IP "$child_outline = $parent_outline\->\fIoutline()\fR" 4
.el .IP "\f(CW$child_outline\fR = \f(CW$parent_outline\fR\->\fIoutline()\fR" 4
.IX Item "$child_outline = $parent_outline->outline()"
Returns a nested outline.
.ie n .IP "$outline\->dest($page_object, %position)" 4
.el .IP "\f(CW$outline\fR\->dest($page_object, \f(CW%position\fR)" 4
.IX Item "$outline->dest($page_object, %position)"
Sets the destination page and optional position of the outline.
.Sp
\&\f(CW%position\fR can be any of the following:
.RS 4
.IP "\-fit => 1" 4
.IX Item "-fit => 1"
Display the page designated by page, with its contents magnified just enough to
fit the entire page within the window both horizontally and vertically. If the
required horizontal and vertical magnification factors are different, use the
smaller of the two, centering the page within the window in the other dimension.
.ie n .IP "\-fith => $top" 4
.el .IP "\-fith => \f(CW$top\fR" 4
.IX Item "-fith => $top"
Display the page designated by page, with the vertical coordinate \f(CW$top\fR
positioned at the top edge of the window and the contents of the page magnified
just enough to fit the entire width of the page within the window.
.ie n .IP "\-fitv => $left" 4
.el .IP "\-fitv => \f(CW$left\fR" 4
.IX Item "-fitv => $left"
Display the page designated by page, with the horizontal coordinate \f(CW$left\fR
positioned at the left edge of the window and the contents of the page magnified
just enough to fit the entire height of the page within the window.
.ie n .IP "\-fitr => [$left, $bottom, $right, $top]" 4
.el .IP "\-fitr => [$left, \f(CW$bottom\fR, \f(CW$right\fR, \f(CW$top\fR]" 4
.IX Item "-fitr => [$left, $bottom, $right, $top]"
Display the page designated by page, with its contents magnified just enough to
fit the rectangle specified by the coordinates \f(CW$left\fR, \f(CW$bottom\fR, \f(CW$right\fR, and \f(CW$top\fR
entirely within the window both horizontally and vertically. If the required
horizontal and vertical magnification factors are different, use the smaller of
the two, centering the rectangle within the window in the other dimension.
.IP "\-fitb => 1" 4
.IX Item "-fitb => 1"
Display the page designated by page, with its contents magnified just enough to
fit its bounding box entirely within the window both horizontally and
vertically. If the required horizontal and vertical magnification factors are
different, use the smaller of the two, centering the bounding box within the
window in the other dimension.
.ie n .IP "\-fitbh => $top" 4
.el .IP "\-fitbh => \f(CW$top\fR" 4
.IX Item "-fitbh => $top"
Display the page designated by page, with the vertical coordinate \f(CW$top\fR
positioned at the top edge of the window and the contents of the page magnified
just enough to fit the entire width of its bounding box within the window.
.ie n .IP "\-fitbv => $left" 4
.el .IP "\-fitbv => \f(CW$left\fR" 4
.IX Item "-fitbv => $left"
Display the page designated by page, with the horizontal coordinate \f(CW$left\fR
positioned at the left edge of the window and the contents of the page magnified
just enough to fit the entire height of its bounding box within the window.
.ie n .IP "\-xyz => [$left, $top, $zoom]" 4
.el .IP "\-xyz => [$left, \f(CW$top\fR, \f(CW$zoom\fR]" 4
.IX Item "-xyz => [$left, $top, $zoom]"
Display the page designated by page, with the coordinates ($left, \f(CW$top\fR)
positioned at the top-left corner of the window and the contents of the page
magnified by the factor \f(CW$zoom\fR. A zero (0) value for any of the parameters \f(CW$left\fR,
\&\f(CW$top\fR, or \f(CW$zoom\fR specifies that the current value of that parameter is to be
retained unchanged.
.RE
.RS 4
.RE
.ie n .IP "$outline\->dest($name)" 4
.el .IP "\f(CW$outline\fR\->dest($name)" 4
.IX Item "$outline->dest($name)"
Connect the outline to a \*(L"Named Destination\*(R" defined elsewhere.
.ie n .IP "$outline\->url($url)" 4
.el .IP "\f(CW$outline\fR\->url($url)" 4
.IX Item "$outline->url($url)"
Launch \f(CW$url\fR when the outline item is activated.
.ie n .IP "$outline\->file($filename)" 4
.el .IP "\f(CW$outline\fR\->file($filename)" 4
.IX Item "$outline->file($filename)"
Launch an application or file when the outline item is activated
.ie n .IP "$outline\->pdf_file($filename, $page_number, %position)" 4
.el .IP "\f(CW$outline\fR\->pdf_file($filename, \f(CW$page_number\fR, \f(CW%position\fR)" 4
.IX Item "$outline->pdf_file($filename, $page_number, %position)"
Open a \s-1PDF\s0 file to a particular page number (first page is zero, which is also
the default).  The page can optionally be positioned at a particular place in
the viewport (see dest for details).
