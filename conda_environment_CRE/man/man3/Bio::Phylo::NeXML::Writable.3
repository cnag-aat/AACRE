.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::Writable 3"
.TH Bio::Phylo::NeXML::Writable 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::NeXML::Writable \- Superclass for objects that serialize to NeXML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # no direct usage
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the superclass for all objects that can be serialized to NeXML 
(<http://www.nexml.org>).
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_namespaces()\fR" 4
.IX Item "set_namespaces()"
.Vb 10
\& Type    : Mutator
\& Title   : set_namespaces
\& Usage   : $obj\->set_namespaces( \*(Aqdwc\*(Aq => \*(Aqhttp://www.namespaceTBD.org/darwin2\*(Aq );
\& Function: Adds one or more prefix/namespace pairs
\& Returns : $self
\& Args    : One or more prefix/namespace pairs, as even\-sized list, 
\&           or as a hash reference, i.e.:
\&           $obj\->set_namespaces( \*(Aqdwc\*(Aq => \*(Aqhttp://www.namespaceTBD.org/darwin2\*(Aq );
\&           or
\&           $obj\->set_namespaces( { \*(Aqdwc\*(Aq => \*(Aqhttp://www.namespaceTBD.org/darwin2\*(Aq } );
\& Notes   : This is a global for the XMLWritable class, so that in a recursive
\&                   to_xml call the outermost element contains the namespace definitions.
\&                   This method can also be called as a static class method, i.e.
\&                   Bio::Phylo::NeXML::Writable\->set_namespaces(
\&                   \*(Aqdwc\*(Aq => \*(Aqhttp://www.namespaceTBD.org/darwin2\*(Aq);
.Ve
.IP "\fIset_suppress_ns()\fR" 4
.IX Item "set_suppress_ns()"
.Vb 6
\& Type    : Mutator
\& Title   : set_suppress_ns
\& Usage   : $obj\->set_suppress_ns();
\& Function: Tell this object not to write namespace attributes
\& Returns : 
\& Args    : none
.Ve
.IP "\fIclear_suppress_ns()\fR" 4
.IX Item "clear_suppress_ns()"
.Vb 6
\& Type    : Mutator
\& Title   : clear_suppress_ns
\& Usage   : $obj\->clear_suppress_ns();
\& Function: Tell this object to write namespace attributes
\& Returns : 
\& Args    : none
.Ve
.IP "\fIadd_meta()\fR" 4
.IX Item "add_meta()"
.Vb 6
\& Type    : Mutator
\& Title   : add_meta
\& Usage   : $obj\->add_meta($meta);
\& Function: Adds a metadata attachment to the object
\& Returns : $self
\& Args    : A Bio::Phylo::NeXML::Meta object
.Ve
.IP "\fIremove_all_meta()\fR" 4
.IX Item "remove_all_meta()"
.Vb 6
\& Type    : Mutator
\& Title   : remove_all_meta
\& Usage   : $obj\->remove_all_meta();
\& Function: Removes all metadata attachments from the object
\& Returns : $self
\& Args    : None
.Ve
.IP "\fIremove_meta()\fR" 4
.IX Item "remove_meta()"
.Vb 6
\& Type    : Mutator
\& Title   : remove_meta
\& Usage   : $obj\->remove_meta($meta);
\& Function: Removes a metadata attachment from the object
\& Returns : $self
\& Args    : Bio::Phylo::NeXML::Meta
.Ve
.IP "\fIset_meta_object()\fR" 4
.IX Item "set_meta_object()"
.Vb 7
\& Type    : Mutator
\& Title   : set_meta_object
\& Usage   : $obj\->set_meta_object($predicate => $object);
\& Function: Attaches a $predicate => $object pair to the invocant
\& Returns : $self
\& Args    : $predicate => (a valid curie of a known namespace)
\&               $object => (an object value)
.Ve
.IP "\fIset_meta()\fR" 4
.IX Item "set_meta()"
.Vb 6
\& Type    : Mutator
\& Title   : set_meta
\& Usage   : $obj\->set_meta([ $m1, $m2, $m3 ]);
\& Function: Assigns all metadata objects
\& Returns : $self
\& Args    : An array ref of metadata objects
.Ve
.IP "\fIset_identifiable()\fR" 4
.IX Item "set_identifiable()"
By default, all XMLWritable objects are identifiable when serialized,
i.e. they have a unique id attribute. However, in some cases a serialized
object may not have an id attribute (governed by the nexml schema). For
such objects, id generation can be explicitly disabled using this method.
Typically, this is done internally \- you will probably never use this method.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_identifiable
\& Usage   : $obj\->set_identifiable(0);
\& Function: Enables/disables id generation
\& Returns : $self
\& Args    : BOOLEAN
.Ve
.IP "\fIset_tag()\fR" 4
.IX Item "set_tag()"
This method is usually only used internally, to define or alter the
name of the tag into which the object is serialized. For example,
for a Bio::Phylo::Forest::Node object, this method would be called 
with the 'node' argument, so that the object is serialized into an
xml element structure called <node/>
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_tag
\& Usage   : $obj\->set_tag(\*(Aqnode\*(Aq);
\& Function: Sets the tag name
\& Returns : $self
\& Args    : A tag name (must be a valid xml element name)
.Ve
.IP "\fIset_name()\fR" 4
.IX Item "set_name()"
Sets invocant name.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_name
\& Usage   : $obj\->set_name($name);
\& Function: Assigns an object\*(Aqs name.
\& Returns : Modified object.
\& Args    : Argument must be a string. Ensure that this string is safe to use for
\&           whatever output format you want to use (this differs between xml and
\&           nexus, for example).
.Ve
.IP "\fIset_attributes()\fR" 4
.IX Item "set_attributes()"
Assigns attributes for the element.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_attributes
\& Usage   : $obj\->set_attributes( \*(Aqfoo\*(Aq => \*(Aqbar\*(Aq )
\& Function: Sets the xml attributes for the object;
\& Returns : $self
\& Args    : key/value pairs or a hash ref
.Ve
.IP "\fIset_xml_id()\fR" 4
.IX Item "set_xml_id()"
This method is usually only used internally, to store the xml id
of an object as it is parsed out of a nexml file \- this is for
the purpose of round-tripping nexml info sets.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_xml_id
\& Usage   : $obj\->set_xml_id(\*(Aqnode345\*(Aq);
\& Function: Sets the xml id
\& Returns : $self
\& Args    : An xml id (must be a valid xml NCName)
.Ve
.IP "\fIset_base_uri()\fR" 4
.IX Item "set_base_uri()"
This utility method can be used to set the xml:base attribute, i.e. to specify
a location for the object's \s-1XML\s0 serialization that potentially differs from
the physical location of the containing document.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_base_uri
\& Usage   : $obj\->set_base_uri(\*(Aqhttp://example.org\*(Aq);
\& Function: Sets the xml:base attribute
\& Returns : $self
\& Args    : A URI string
.Ve
.IP "\fIset_link()\fR" 4
.IX Item "set_link()"
This sets a clickable link, i.e. a url, for the object. This has no relation to
the xml:base attribute, it is solely intended for serializations that
allow clickable links, such as \s-1SVG\s0 or \s-1RSS.\s0
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_link
\& Usage   : $node\->set_link($url);
\& Function: Sets clickable link
\& Returns : $self
\& Args    : url
.Ve
.IP "\fIunset_attribute()\fR" 4
.IX Item "unset_attribute()"
Removes specified attribute
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : unset_attribute
\& Usage   : $obj\->unset_attribute( \*(Aqfoo\*(Aq )
\& Function: Removes the specified xml attribute for the object
\& Returns : $self
\& Args    : an attribute name
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_namespaces()\fR" 4
.IX Item "get_namespaces()"
.Vb 8
\& Type    : Accessor
\& Title   : get_namespaces
\& Usage   : my %ns = %{ $obj\->get_namespaces };
\& Function: Retrieves the known namespaces
\& Returns : A hash of prefix/namespace key/value pairs, or
\&           a single namespace if a single, optional
\&           prefix was provided as argument
\& Args    : Optional \- a namespace prefix
.Ve
.IP "\fIget_prefix_for_namespace()\fR" 4
.IX Item "get_prefix_for_namespace()"
.Vb 6
\& Type    : Accessor
\& Title   : get_prefix_for_namespace
\& Usage   : my $prefix = $obj\->get_prefix_for_namespace(\*(Aqhttp://example.org/\*(Aq)
\& Function: Retrieves the prefix for the argument namespace
\& Returns : A prefix string
\& Args    : A namespace URI
.Ve
.IP "\fIget_meta()\fR" 4
.IX Item "get_meta()"
Retrieves the metadata for the element.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_meta
\& Usage   : my @meta = @{ $obj\->get_meta };
\& Function: Retrieves the metadata for the element.
\& Returns : An array ref of Bio::Phylo::NeXML::Meta objects
\& Args    : Optional: a list of CURIE predicates, in which case
\&           the returned objects will be those matching these
\&           predicates
.Ve
.IP "\fIget_meta_object()\fR" 4
.IX Item "get_meta_object()"
Retrieves the metadata annotation object for the provided predicate
.Sp
.Vb 11
\& Type    : Accessor
\& Title   : get_meta_object
\& Usage   : my $title = $obj\->get_meta_object(\*(Aqdc:title\*(Aq);
\& Function: Retrieves the metadata annotation value for the object.
\& Returns : An annotation value, i.e. the object of a triple
\& Args    : Required: a CURIE predicate for which the annotation
\&           value is returned
\& Note    : This method returns the object for the first annotation
\&           with the provided predicate. Keep this in mind when dealing
\&           with an object that has multiple annotations with the same
\&           predicate.
.Ve
.IP "\fIget_tag()\fR" 4
.IX Item "get_tag()"
Retrieves tag name for the element.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_tag
\& Usage   : my $tag = $obj\->get_tag;
\& Function: Gets the xml tag name for the object;
\& Returns : A tag name
\& Args    : None.
.Ve
.IP "\fIget_name()\fR" 4
.IX Item "get_name()"
Gets invocant's name.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_name
\& Usage   : my $name = $obj\->get_name;
\& Function: Returns the object\*(Aqs name.
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_xml_tag()\fR" 4
.IX Item "get_xml_tag()"
Retrieves tag string
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_xml_tag
\& Usage   : my $str = $obj\->get_xml_tag;
\& Function: Gets the xml tag for the object;
\& Returns : A tag, i.e. pointy brackets
\& Args    : Optional: a true value, to close an empty tag
.Ve
.IP "\fIget_attributes()\fR" 4
.IX Item "get_attributes()"
Retrieves attributes for the element.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_attributes
\& Usage   : my %attrs = %{ $obj\->get_attributes };
\& Function: Gets the xml attributes for the object;
\& Returns : A hash reference
\& Args    : None.
\& Comments: throws ObjectMismatch if no linked taxa object 
\&           can be found
.Ve
.IP "\fIget_xml_id()\fR" 4
.IX Item "get_xml_id()"
Retrieves xml id for the element.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_xml_id
\& Usage   : my $id = $obj\->get_xml_id;
\& Function: Gets the xml id for the object;
\& Returns : An xml id
\& Args    : None.
.Ve
.IP "\fIget_base_uri()\fR" 4
.IX Item "get_base_uri()"
This utility method can be used to get the xml:base attribute, which specifies
a location for the object's \s-1XML\s0 serialization that potentially differs from
the physical location of the containing document.
.Sp
If no xml:base attribute has been defined on the focal object, this method
moves on, recursively, to containing objects (e.g. from node to tree to forest)
until such time that a base \s-1URI\s0 has been found.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : get_base_uri
\& Usage   : my $base = $obj\->get_base_uri;
\& Function: Gets the xml:base attribute
\& Returns : A URI string
\& Args    : None
.Ve
.IP "\fIget_link()\fR" 4
.IX Item "get_link()"
This returns a clickable link for the object. This has no relation to
the xml:base attribute, it is solely intended for serializations that
allow clickable links, such as \s-1SVG\s0 or \s-1RSS.\s0
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_link
\& Usage   : my $link = $obj\->get_link();
\& Function: Returns a clickable link
\& Returns : url
\& Args    : NONE
.Ve
.IP "\fIget_dom_elt()\fR" 4
.IX Item "get_dom_elt()"
.Vb 6
\& Type    : Serializer
\& Title   : get_dom_elt
\& Usage   : $obj\->get_dom_elt
\& Function: Generates a DOM element from the invocant
\& Returns : a DOM element object (default XML::Twig)
\& Args    : DOM factory object
.Ve
.SS "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIis_identifiable()\fR" 4
.IX Item "is_identifiable()"
By default, all XMLWritable objects are identifiable when serialized,
i.e. they have a unique id attribute. However, in some cases a serialized
object may not have an id attribute (governed by the nexml schema). This
method indicates whether that is the case.
.Sp
.Vb 6
\& Type    : Test
\& Title   : is_identifiable
\& Usage   : if ( $obj\->is_identifiable ) { ... }
\& Function: Indicates whether IDs are generated
\& Returns : BOOLEAN
\& Args    : NONE
.Ve
.IP "\fIis_ns_suppressed()\fR" 4
.IX Item "is_ns_suppressed()"
.Vb 7
\& Type    : Test
\& Title   : is_ns_suppressed
\& Usage   : if ( $obj\->is_ns_suppressed ) { ... }
\& Function: Indicates whether namespace attributes should not
\&           be written on XML serialization
\& Returns : BOOLEAN
\& Args    : NONE
.Ve
.SS "\s-1SERIALIZERS\s0"
.IX Subsection "SERIALIZERS"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
Serializes invocant to \s-1XML.\s0
.Sp
.Vb 6
\& Type    : XML serializer
\& Title   : to_xml
\& Usage   : my $xml = $obj\->to_xml;
\& Function: Serializes $obj to xml
\& Returns : An xml string
\& Args    : None
.Ve
.IP "\fIto_dom()\fR" 4
.IX Item "to_dom()"
.Vb 9
\& Type    : Serializer
\& Title   : to_dom
\& Usage   : $obj\->to_dom
\& Function: Generates a DOM subtree from the invocant and
\&           its contained objects
\& Returns : a DOM element object (default: XML::Twig flavor)
\& Args    : DOM factory object
\& Note    : This is the generic function. It is redefined in the 
\&           classes below.
.Ve
.IP "\fIto_json()\fR" 4
.IX Item "to_json()"
Serializes object to \s-1JSON\s0 string
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_json()
\& Usage   : print $obj\->to_json();
\& Function: Serializes object to JSON string
\& Returns : String 
\& Args    : None
\& Comments:
.Ve
.IP "\fIto_cdao()\fR" 4
.IX Item "to_cdao()"
Serializes object to \s-1CDAO RDF/XML\s0 string
.Sp
.Vb 7
\& Type    : Serializer
\& Title   : to_cdao()
\& Usage   : print $obj\->to_cdao();
\& Function: Serializes object to CDAO RDF/XML string
\& Returns : String 
\& Args    : None
\& Comments:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.PP
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
