.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::AssemblerBase 3"
.TH Bio::Tools::Run::AssemblerBase 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::AssemblerBase \- base class for wrapping external assemblers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Give standard usage here
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Describe the object here
# use of globals for configuration...
# I've created the separate Config.pm module, and 'use'd it in the 
# main module, for instance...
# other configuration globals:
# \f(CW$use_dash\fR = [1|single|double|mixed]
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
bioperl\-l@bioperl.org
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Florent Angly"
.IX Header "AUTHOR - Florent Angly"
Email florent dot angly at gmail dot com
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Mark A. Jensen \- maj \-at\- fortinbras \-dot\- us
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $assembler>program_name()
\& Function: get/set the executable name
\& Returns:  string
\& Args    : string
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $assembler\->program_dir()
\& Function: get/set the program dir
\& Returns:  string
\& Args    : string
.Ve
.SS "out_type"
.IX Subsection "out_type"
.Vb 8
\& Title   : out_type
\& Usage   : $assembler\->out_type(\*(AqBio::Assembly::ScaffoldI\*(Aq)
\& Function: get/set the desired type of output
\& Returns : The type of results to return
\& Args    : Type of results to return (optional):
\&                 \*(AqBio::Assembly::IO\*(Aq object
\&                 \*(AqBio::Assembly::ScaffoldI\*(Aq object (default)
\&                 The name of a file to save the results in
.Ve
.SS "_assembly_format"
.IX Subsection "_assembly_format"
.Vb 5
\& Title   : _assembly_format
\& Usage   : $assembler\->_assembly_format(\*(Aqace\*(Aq)
\& Function: get/set the driver to use to parse the assembly results
\& Returns : the driver to use to parse the assembly results
\& Args    : the driver to use to parse the assembly results (optional)
.Ve
.SS "_assembly_variant"
.IX Subsection "_assembly_variant"
.Vb 6
\& Title   : _assembly_variant
\& Usage   : $assembler\->_assembly_variant(\*(Aq454\*(Aq)
\& Function: get/set the driver variant to use to parse the assembly results. For
\&           example, the ACE format has the ACE\-454 and the ACE\-consed variants
\& Returns : the driver variant to use to parse the assembly results
\& Args    : the driver variant to use to parse the assembly results (optional)
.Ve
.SS "_check_executable"
.IX Subsection "_check_executable"
.Vb 5
\& Title   : _check_executable
\& Usage   : $assembler\->_check_executable()
\& Function: Verifies that the program executable can be found, or throw an error.
\& Returns:  1 for success
\& Args    : \-
.Ve
.SS "_check_sequence_input"
.IX Subsection "_check_sequence_input"
.Vb 7
\& Title   : _check_sequence_input
\& Usage   : $assembler\->_check_sequence_input($seqs)
\& Function: Check that the sequence input is a valid file, or an arrayref of
\&             sequence objects (Bio::PrimarySeqI or Bio::SeqI). If not, an
\&             exception is thrown.
\& Returns : 1 if the check passed
\& Args    : sequence input
.Ve
.SS "_check_optional_quality_input"
.IX Subsection "_check_optional_quality_input"
.Vb 7
\& Title   : _check_optional_quality_input
\& Usage   : $assembler\->_check_optional_quality_input($quals)
\& Function: If a quality score input is provided, check that it is either a
\&             valid file or an arrayref of quality score objects (Bio::Seq::
\&             QualI or Bio::Seq::Quality). If not, an exception is thrown.
\& Returns : 1 if the check passed (or quality score input was provided)
\& Args    : quality score input
.Ve
.SS "_prepare_input_file"
.IX Subsection "_prepare_input_file"
.Vb 10
\& Title   : _prepare_input_file
\& Usage   : ($fasta_file, $qual_file) =  $assembler\->_prepare_input_file(\e@seqs, \e@quals);
\& Function: Create the input FASTA and QUAL files as needed. If the input
\&           sequences are provided in a (FASTA) file, the optional input quality
\&           scores are also expected to be in a (QUAL) file. If the input
\&           sequences are an arrayref of bioperl sequence objects, the optional
\&           input quality scores are expected to be an arrayref of bioperl
\&           quality score objects, in the same order as the sequence objects.
\& Returns : \- input filehandle
\&           \- input filename
\& Args    : \- sequence input (FASTA file or sequence object arrayref)
\&           \- optional quality score input (QUAL file or quality score object
\&               arrayref)
.Ve
.SS "_write_seq_file"
.IX Subsection "_write_seq_file"
.Vb 7
\& Title   :   _write_seq_file
\& Usage   :   ($fasta_file, $qual_file) = $assembler\->_write_seq_file(\e@seqs, \e@quals)
\& Function:   Write temporary FASTA and QUAL files on disk
\& Returns :   name of FASTA file
\&             name of QUAL file (undef if no quality scoress)
\& Args    :   \- arrayref of sequence objects
\&             \- optional arrayref of quality score objects
.Ve
.SS "_prepare_output_file"
.IX Subsection "_prepare_output_file"
.Vb 6
\& Title   : _prepare_output_file
\& Usage   : ($out_fh, $out_file) =  $assembler\->_prepare_output_file( );
\& Function: Prepare the output file
\& Returns : \- output filehandle
\&           \- output filename
\& Args    : none
.Ve
.SS "_export_results"
.IX Subsection "_export_results"
.Vb 7
\& Title   : _export_results
\& Usage   : $results = $assembler\->_export_results($asm_file);
\& Function: Export the assembly results
\& Returns : Exported assembly (file or IO object or assembly object)
\& Args    : \-Name of the file containing an assembly
\&           \- \-keep_asm => boolean (if true, do not unlink $asm_file)
\&           \-[optional] additional named args required by the B:A:IO object
.Ve
.SS "\fI_register_program_commands()\fP"
.IX Subsection "_register_program_commands()"
.Vb 10
\& Title   : _register_program_commands
\& Usage   : $assembler\->_register_program_commands( \e@commands, \e%prefixes )
\& Function: Register the commands a program accepts (for programs that act
\&           as frontends for a set of commands, each command having its own
\&           set of params/switches)
\& Returns : true on success
\& Args    : arrayref to a list of commands (scalar strings),
\&           hashref to a translation table of the form
\&           { $prefix1 => $command1, ... } [optional]
\& Note    : To implement a program with this kind of calling structure, 
\&           include a parameter called \*(Aqcommand\*(Aq in the 
\&           @program_params global
\& Note    : The translation table is used to associate parameters and 
\&           switches specified in _set_program_options with the correct
\&           program command. In the globals @program_params and
\&           @program_switches, specify elements as \*(Aqprefix1|param\*(Aq and 
\&           \*(Aqprefix1|switch\*(Aq, etc.
.Ve
.SS "_set_program_options"
.IX Subsection "_set_program_options"
.Vb 11
\& Title   : _set_program_options
\& Usage   : $assembler\->_set_program_options( \e@ args );
\& Function: Register the parameters and flags that an assembler takes.
\& Returns : 1 for success
\& Args    : \- arguments passed by the user
\&           \- parameters that the program accepts, optional (default: none)
\&           \- switches that the program accepts, optional (default: none)
\&           \- parameter translation, optional (default: no translation occurs)
\&           \- dash option for the program parameters, [1|single|double|mixed],
\&             optional (default: yes, use single dashes only)
\&           \- join, optional (default: \*(Aq \*(Aq)
.Ve
.SS "_translate_params"
.IX Subsection "_translate_params"
.Vb 6
\& Title   : _translate_params
\& Usage   : @options = $assembler\->_translate_params( );
\& Function: Translate the Bioperl arguments into the arguments to pass to the
\&             assembler on the command line
\& Returns : Arrayref of arguments
\& Args    : none
.Ve
.SS "_prepare_input_sequences"
.IX Subsection "_prepare_input_sequences"
.Vb 11
\& Title   : _prepare_input_sequences
\& Usage   : ($seqs, $quals) = $assembler\->_prepare_input_sequences(\e@seqs, \e@quals);
\& Function: Do something to the input sequence and qual objects. By default,
\&           nothing happens. Overload this method in the specific assembly module
\&           if processing of the sequences is needed (e.g. as in the
\&           TigrAssembler module).
\& Returns : \- sequence input
\&           \- optional quality score input
\& Args    : \- sequence input (FASTA file or sequence object arrayref)
\&           \- optional quality score input (QUAL file or quality score object
\&               arrayref)
.Ve
.SS "\fI_collate_subcmd_args()\fP"
.IX Subsection "_collate_subcmd_args()"
.Vb 7
\& Title   : _collate_subcmd_args
\& Usage   : $args_hash = $self\->_collate_subcmd_args
\& Function: collate parameters and switches into command\-specific
\&           arg lists for passing to new()
\& Returns : hash of named argument lists
\& Args    : [optional] composite cmd prefix (scalar string) 
\&           [default is \*(Aqrun\*(Aq]
.Ve
.SS "run"
.IX Subsection "run"
.Vb 10
\& Title   : run
\& Usage   : $assembly = $assembler\->run(\e@seqs, \e@quals);
\&             or
\&           $assembly = $assembler\->run($fasta_file, $qual_file);
\& Function: Run the assembler. The specific assembler wrapper needs to provide
\&             the $assembler\->_run() method.
\& Returns : Assembly results (file, IO object or Assembly object)
\& Args    : \- sequence input (FASTA file or sequence object arrayref)
\&           \- optional quality score input (QUAL file or quality score object
\&               arrayref)
.Ve
.SH "Bio:ParameterBaseI compliance"
.IX Header "Bio:ParameterBaseI compliance"
.SS "\fIset_parameters()\fP"
.IX Subsection "set_parameters()"
.Vb 5
\& Title   : set_parameters
\& Usage   : $pobj\->set_parameters(%params);
\& Function: sets the parameters listed in the hash or array
\& Returns : true on success
\& Args    : [optional] hash or array of parameter/values.
.Ve
.SS "\fIreset_parameters()\fP"
.IX Subsection "reset_parameters()"
.Vb 5
\& Title   : reset_parameters
\& Usage   : resets values
\& Function: resets parameters to either undef or value in passed hash
\& Returns : none
\& Args    : [optional] hash of parameter\-value pairs
.Ve
.SS "\fIparameters_changed()\fP"
.IX Subsection "parameters_changed()"
.Vb 5
\& Title   : parameters_changed
\& Usage   : if ($pobj\->parameters_changed) {...}
\& Function: Returns boolean true (1) if parameters have changed
\& Returns : Boolean (0 or 1)
\& Args    : [optional] Boolean
.Ve
.SS "\fIavailable_parameters()\fP"
.IX Subsection "available_parameters()"
.Vb 7
\& Title   : available_parameters
\& Usage   : @params = $pobj\->available_parameters()
\& Function: Returns a list of the available parameters
\& Returns : Array of parameters
\& Args    : \*(Aqparams\*(Aq for settable program parameters
\&           \*(Aqswitches\*(Aq for boolean program switches
\&           default: all
.Ve
.SS "\fIget_parameters()\fP"
.IX Subsection "get_parameters()"
.Vb 6
\& Title   : get_parameters
\& Usage   : %params = $pobj\->get_parameters;
\& Function: Returns list of key\-value pairs of parameter => value
\& Returns : List of key\-value pairs
\& Args    : [optional] A string is allowed if subsets are wanted or (if a
\&           parameter subset is default) \*(Aqall\*(Aq to return all parameters
.Ve
