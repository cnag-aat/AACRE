.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Samtools 3"
.TH Bio::Tools::Run::Samtools 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Samtools \- a run wrapper for the samtools suite *BETA*
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\& # convert a sam to a bam
\& $samt = Bio::Tools::Run::Samtools( \-command => \*(Aqview\*(Aq, 
\&                                    \-sam_input => 1,
\&                                    \-bam_output => 1 );
\& $samt\->run( \-bam => "mysam.sam", \-out => "mysam.bam" );
\& # sort it
\& $samt = Bio::Tools::Run::Samtools( \-command => \*(Aqsort\*(Aq );
\& $samt\->run( \-bam => "mysam.bam", \-pfx => "mysam.srt" );
\& # now create an assembly
\& $assy = Bio::IO::Assembly\->new( \-file => "mysam.srt.bam",
\&                                 \-refdb => "myref.fas" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper for running samtools, a suite of large-alignment
reading and manipulation programs available at
<http://samtools.sourceforge.net/>.
.SH "RUNNING COMMANDS"
.IX Header "RUNNING COMMANDS"
To run a \f(CW\*(C`samtools\*(C'\fR
command, construct a run factory, specifying the desired command using
the \f(CW\*(C`\-command\*(C'\fR argument in the factory constructor, along with
options specific to that command (see \*(L"\s-1OPTIONS\*(R"\s0):
.PP
.Vb 3
\& $samt = Bio::Tools::Run::Samtools\->new( \-command => \*(Aqview\*(Aq,
\&                                         \-sam_input => 1,
\&                                         \-bam_output => 1);
.Ve
.PP
To execute, use the \f(CW\*(C`run()\*(C'\fR method. Input and output files are
specified in the arguments of \f(CW\*(C`run()\*(C'\fR (see \*(L"\s-1FILES\*(R"\s0):
.PP
.Vb 1
\& $samt\->run( \-bam => "mysam.sam", \-out => "mysam.bam" );
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\f(CW\*(C`samtools\*(C'\fR is complex, with many subprograms (commands) and command-line
options and file specs for each. This module attempts to provide
commands and options comprehensively. You can browse the choices like so:
.PP
.Vb 8
\& $samt = Bio::Tools::Run::Samtools\->new( \-command => \*(Aqpileup\*(Aq );
\& # all samtools commands
\& @all_commands = $samt\->available_parameters(\*(Aqcommands\*(Aq); 
\& @all_commands = $samt\->available_commands; # alias
\& # just for pileup
\& @pup_params = $samt\->available_parameters(\*(Aqparams\*(Aq);
\& @pup_switches = $samt\->available_parameters(\*(Aqswitches\*(Aq);
\& @pup_all_options = $samt\->available_parameters();
.Ve
.PP
Reasonably mnemonic names have been assigned to the single-letter
command line options. These are the names returned by
\&\f(CW\*(C`available_parameters\*(C'\fR, and can be used in the factory constructor
like typical BioPerl named parameters.
.PP
See <http://samtools.sourceforge.net/samtools.shtml> for the gory details.
.SH "FILES"
.IX Header "FILES"
When a command requires filenames, these are provided to the
\&\f(CW\*(C`run()\*(C'\fR method, not the constructor (\f(CW\*(C`new()\*(C'\fR). To see the set of
files required by a command, use \f(CW\*(C`available_parameters(\*(Aqfilespec\*(Aq)\*(C'\fR
or the alias \f(CW\*(C`filespec()\*(C'\fR:
.PP
.Vb 2
\&  $samt = Bio::Tools::Run::Samtools\->new( \-command => \*(Aqview\*(Aq );
\&  @filespec = $samt\->filespec;
.Ve
.PP
This example returns the following array:
.PP
.Vb 2
\& bam
\& >out
.Ve
.PP
This indicates that the bam/sam file (bam) and the output file (out)
\&\s-1MUST\s0 be specified in the \f(CW\*(C`run()\*(C'\fR argument list:
.PP
.Vb 1
\& $samt\->run( \-bam => \*(Aqmysam.sam\*(Aq, \-out => \*(Aqmysam.cvt\*(Aq );
.Ve
.PP
If files are not specified per the filespec, text sent to \s-1STDOUT\s0 and
\&\s-1STDERR\s0 is saved and is accessible with \f(CW\*(C`$bwafac\-\*(C'\fR\fIstdout()\fR> and
\&\f(CW\*(C`$bwafac\-\*(C'\fR\fIstderr()\fR>.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
bioperl\-l@bioperl.org
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Mark A. Jensen"
.IX Header "AUTHOR - Mark A. Jensen"
Email maj \-at\- fortinbras \-dot\- us
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::Run::Samtools();
\& Function: Builds a new Bio::Tools::Run::Samtools object
\& Returns : an instance of Bio::Tools::Run::Samtools
\& Args    :
.Ve
