.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::PDF::Dict 3"
.TH PDF::API2::Basic::PDF::Dict 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Basic::PDF::Dict \- PDF Dictionaries and Streams. Inherits from PDF::Objind
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
There are various special instance variables which are used to look after,
particularly, streams. Each begins with a space:
.IP "stream" 4
.IX Item "stream"
Holds the stream contents for output
.IP "streamfile" 4
.IX Item "streamfile"
Holds the stream contents in an external file rather than in memory. This is
not the same as a \s-1PDF\s0 file stream. The data is stored in its unfiltered form.
.IP "streamloc" 4
.IX Item "streamloc"
If both ' stream' and ' streamfile' are empty, this indicates where in the
source \s-1PDF\s0 the stream starts.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$type = $d\->type($type)"
.el .SS "\f(CW$type\fP = \f(CW$d\fP\->type($type)"
.IX Subsection "$type = $d->type($type)"
Get/Set the standard Type key.  It can be passed, and will return, a text value rather than a Name object.
.ie n .SS "@filters = $d\->filter(@filters)"
.el .SS "\f(CW@filters\fP = \f(CW$d\fP\->filter(@filters)"
.IX Subsection "@filters = $d->filter(@filters)"
Get/Set one or more filters being used by the optional stream attached to the dictionary.
.ie n .SS "$d\->outobjdeep($fh)"
.el .SS "\f(CW$d\fP\->outobjdeep($fh)"
.IX Subsection "$d->outobjdeep($fh)"
Outputs the contents of the dictionary to a \s-1PDF\s0 file. This is a recursive call.
.PP
It also outputs a stream if the dictionary has a stream element. If this occurs
then this method will calculate the length of the stream and insert it into the
stream's dictionary.
.ie n .SS "$d\->read_stream($force_memory)"
.el .SS "\f(CW$d\fP\->read_stream($force_memory)"
.IX Subsection "$d->read_stream($force_memory)"
Reads in a stream from a \s-1PDF\s0 file. If the stream is greater than
\&\f(CW\*(C`PDF::Dict::mincache\*(C'\fR (defaults to 32768) bytes to be stored, then
the default action is to create a file for it somewhere and to use that
file as a data cache. If \f(CW$force_memory\fR is set, this caching will not
occur and the data will all be stored in the \f(CW$self\fR\->{' stream'}
variable.
.ie n .SS "$d\->val"
.el .SS "\f(CW$d\fP\->val"
.IX Subsection "$d->val"
Returns the dictionary, which is itself.
