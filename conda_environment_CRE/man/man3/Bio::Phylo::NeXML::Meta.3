.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::Meta 3"
.TH Bio::Phylo::NeXML::Meta 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::NeXML::Meta \- Single predicate/object annotation, attached to an
xml\-writable subject
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& use Bio::Phylo::Factory;
\& use Bio::Phylo::Util::CONSTANT \*(Aq:namespaces\*(Aq;
\& my $fac = Bio::Phylo::Factory\->new;
\& my $url = \*(Aqhttp://purl.org/phylo/treebase/phylows/study/TB2:S1787\*(Aq;
\& my $proj = $fac\->create_project\->add_meta(
\&     $fac\->create_meta(
\&         \*(Aq\-namespaces\*(Aq => { \*(Aqcdao\*(Aq => _NS_CDAO_ },
\&         \*(Aq\-triple\*(Aq     => { 
\&             \*(Aqcdao:hasMeta\*(Aq => $fac\->create_meta(
\&                 \*(Aq\-namespaces\*(Aq => { \*(Aqcdao\*(Aq => _NS_CDAO_ },
\&                 \*(Aq\-triple\*(Aq     => { \*(Aqcdao:has_External_Reference\*(Aq => $url }
\&             )
\&         }
\&     )
\& );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
To comply with the NeXML standard (<http://www.nexml.org>), Bio::Phylo
implements metadata annotations which consist conceptually of \s-1RDF\s0 triples where
the subject is a container object that subclasses
Bio::Phylo::NeXML::Writable, and the predicate and object are defined in
this class.
.PP
The objects of the triples provided by this class can be of any simple type
(string, number) or one of \s-1XML::DOM\s0, \s-1XML::GDOME\s0, XML::LibXML,
XML::Twig, \s-1XML::DOM2\s0, XML::DOMBacked, XML::Handler, XML::Element,
\&\s-1XML::API\s0, XML::Code or XML::XMLWriter or RDF::Core::Model.
.PP
When serialized, the Bio::Phylo::NeXML::Meta object in NeXML is typically written out
as an element called 'meta', with RDFa compliant attributes.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 12
\& Type    : Constructor
\& Title   : new
\& Usage   : my $anno = Bio::Phylo::NeXML::Meta\->new;
\& Function: Initializes a Bio::Phylo::NeXML::Meta object.
\& Returns : A Bio::Phylo::NeXML::Meta object.
\& Args    : optional constructor arguments are key/value
\&                   pairs where the key corresponds with any of
\&                   the methods that starts with set_ (i.e. mutators) 
\&                   and the value is the permitted argument for such 
\&                   a method. The method name is changed such that,
\&                   in order to access the set_value($val) method
\&                   in the constructor, you would pass \-value => $val
.Ve
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_triple()\fR" 4
.IX Item "set_triple()"
Populates the triple, assuming that the invocant is attached to a subject.
.Sp
.Vb 12
\& Type    : Mutator
\& Title   : set_triple
\& Usage   : $meta\->set_triple( $predicate, $object );
\& Function: Populates the triple.
\& Returns : Modified object.
\& Args    : $predicate \- a CURIE whose namespace prefix must 
\&                        have been bound previously using 
\&                        $meta\->set_namespaces( $prefix, $uri );
\&           $object    \- any of the valid object types: a number,
\&                        a string, a url, a nested annotation
\&                        or anything that can be adapted by
\&                        Bio::Phylo::NeXML::Meta::XMLLiteral
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "get_triple ()" 4
.IX Item "get_triple ()"
Returns predicate and object for the triple
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_triple
\& Usage   : my ( $predicate, $object ) = $anno\->get_triple;
\& Function: Returns triple
\& Returns : Predicate and object of a triple
\& Args    : NONE
.Ve
.IP "\fIget_object()\fR" 4
.IX Item "get_object()"
Returns triple object
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_object
\& Usage   : my $val = $anno\->get_object;
\& Function: Returns triple object
\& Returns : A triple object
\& Args    : NONE
.Ve
.IP "\fIget_predicate()\fR" 4
.IX Item "get_predicate()"
Returns triple predicate
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_predicate
\& Usage   : my $val = $anno\->get_predicate;
\& Function: Returns triple predicate
\& Returns : A triple predicate
\& Args    : NONE
.Ve
.IP "\fIget_predicate_namespace()\fR" 4
.IX Item "get_predicate_namespace()"
Returns predicate namespace
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_predicate_namespace
\& Usage   : my $val = $anno\->get_predicate_namespace;
\& Function: Returns predicate namespace
\& Returns : A namespace
\& Args    : NONE
.Ve
.IP "\fIget_predicate_local()\fR" 4
.IX Item "get_predicate_local()"
Returns predicate without prefix
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_predicate_local
\& Usage   : my $val = $anno\->get_predicate_local;
\& Function: Returns predicate without prefix
\& Returns : A predicate
\& Args    : NONE
.Ve
.IP "\fIget_object_type()\fR" 4
.IX Item "get_object_type()"
Returns data type of object
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_object_type
\& Usage   : my $val = $anno\->get_object_type;
\& Function: Returns data type of object
\& Returns : A local predicate, e.g. \*(Aqboolean\*(Aq
\& Args    : NONE
.Ve
.SS "\s-1TESTS\s0"
.IX Subsection "TESTS"
.IP "\fIis_resource()\fR" 4
.IX Item "is_resource()"
Returns whether the object is a resource (e.g. an href or a nested XMLLiteral)
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : is_resource
\& Usage   : my $val = $anno\->is_resource;
\& Function: Returns whether object is a resource
\& Returns : Boolean
\& Args    : NONE
.Ve
.IP "\fIis_xml_literal()\fR" 4
.IX Item "is_xml_literal()"
Returns whether the object is a nested XMLLiteral
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : is_xml_literal
\& Usage   : my $val = $anno\->is_xml_literal;
\& Function: Returns whether object is a nested XMLLiteral
\& Returns : Boolean
\& Args    : NONE
.Ve
.SS "\s-1SERIALIZERS\s0"
.IX Subsection "SERIALIZERS"
.IP "\fIto_dom()\fR" 4
.IX Item "to_dom()"
.Vb 9
\& Type    : Serializer
\& Title   : to_dom
\& Usage   : $obj\->to_dom
\& Function: Generates a DOM subtree from the invocant and
\&           its contained objects
\& Returns : a DOM element object (default: XML::Twig flavor)
\& Args    : DOM factory object
\& Note    : This is the generic function. It is redefined in the 
\&           classes below.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Dictionary" 4
.IX Item "Bio::Phylo::Dictionary"
Annotation objects are combined into a dictionary.
.IP "Bio::Phylo::NeXML::Writable" 4
.IX Item "Bio::Phylo::NeXML::Writable"
This object inherits from Bio::Phylo::NeXML::Writable, so methods
defined there are also applicable here.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
