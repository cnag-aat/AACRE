.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Util::Exceptions 3"
.TH Bio::Phylo::Util::Exceptions 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Util::Exceptions \- Errors ($@) that are objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Forest::Node;
\& my $node = Bio::Phylo::Forest::Node\->new;
\& 
\& # now let\*(Aqs try something illegal
\& eval {
\&    $node\->set_branch_length( \*(Aqnon\-numerical value\*(Aq );
\& };
\&
\& # have an error
\& if ( my $e = Bio::Phylo::Util::Exceptions::BadNumber\->caught ) {
\&
\&    # print out where the error came from
\&    print $@\->trace\->as_string;
\&    
\&    # caught() returns $@, so $e and $@ are the 
\&    # same object in this example. 
\&    # Therefore, the same thing would be:
\&    print $e\->trace\->as_string;
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes, Bio::Phylo dies. If this happens because you did something that
brought Bio::Phylo into an undefined and dangerous state (such as might happen
if you provide a non-numerical value for a setter that needs numbers),
Bio::Phylo will throw an \*(L"exception\*(R", a special form of the \f(CW$@\fR variable
that is a blessed object with useful methods to help you diagnose the problem.
.PP
This package defines the exceptions that can be thrown by Bio::Phylo. There are
no serviceable parts inside. Refer to the Exception::Class
perldoc for more examples on how to catch exceptions and show traces.
.SH "EXCEPTION CLASSES"
.IX Header "EXCEPTION CLASSES"
.IP "Bio::Phylo::Util::Exceptions::BadNumber" 4
.IX Item "Bio::Phylo::Util::Exceptions::BadNumber"
Thrown when anything other than a number that passes Scalar::Util's 
looks_like_number test is given as an argument to a method that expects a number.
.IP "Bio::Phylo::Util::Exceptions::BadString" 4
.IX Item "Bio::Phylo::Util::Exceptions::BadString"
Thrown when an incorrectly formatted string argument is provided, for example
a string that would be split into substrings under \s-1NEXUS\s0 tokenization rules,
a string that isn't an xs:NCName or a string that isn't a binomial \s-1CURIE\s0
.IP "Bio::Phylo::Util::Exceptions::BadFormat" 4
.IX Item "Bio::Phylo::Util::Exceptions::BadFormat"
Thrown when a non-existing parser or unparser format is requested, in calls
such as \f(CW\*(C`parse( \-format => \*(Aqnewik\*(Aq, \-string => $string )\*(C'\fR, where 'newik'
doesn't exist.
.IP "Bio::Phylo::Util::Exceptions::OddHash" 4
.IX Item "Bio::Phylo::Util::Exceptions::OddHash"
Thrown when an odd number of arguments has been specified. This might happen if 
you call a method that requires named arguments and the key/value pairs don't 
seem to match up.
.IP "Bio::Phylo::Util::Exceptions::ObjectMismatch" 4
.IX Item "Bio::Phylo::Util::Exceptions::ObjectMismatch"
Thrown when a method is called that requires an object as an argument, and the
wrong type of object is specified.
.IP "Bio::Phylo::Util::Exceptions::UnknownMethod" 4
.IX Item "Bio::Phylo::Util::Exceptions::UnknownMethod"
Trown when an indirect method call is attempted through the 
\&\f(CW\*(C`$obj\->get(\*(Aqunknown_method\*(Aq)\*(C'\fR interface, and the object doesn't seem to 
implement the requested method.
.IP "Bio::Phylo::Util::Exceptions::BadArgs" 4
.IX Item "Bio::Phylo::Util::Exceptions::BadArgs"
Thrown when something undefined is wrong with the supplied arguments.
.IP "Bio::Phylo::Util::Exceptions::FileError" 4
.IX Item "Bio::Phylo::Util::Exceptions::FileError"
Thrown when a file specified as an argument does not exist or is not readable.
.IP "Bio::Phylo::Util::Exceptions::ExtensionError" 4
.IX Item "Bio::Phylo::Util::Exceptions::ExtensionError"
Thrown when there is an error loading a requested extension.
.IP "Bio::Phylo::Util::Exceptions::OutOfBounds" 4
.IX Item "Bio::Phylo::Util::Exceptions::OutOfBounds"
Thrown when an entity is requested that falls outside of the range of
objects contained by a Bio::Phylo::Listable subclass, probably through 
the \f(CW\*(C`$obj\->get_by_index($i)\*(C'\fR method call.
.IP "Bio::Phylo::Util::Exceptions::NotImplemented" 4
.IX Item "Bio::Phylo::Util::Exceptions::NotImplemented"
Thrown when an interface method is called instead of the implementation
by the child class.
.IP "Bio::Phylo::Util::Exceptions::Deprecated" 4
.IX Item "Bio::Phylo::Util::Exceptions::Deprecated"
Thrown when a deprecated method is called.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fInew()\fR" 4
.IX Item "new()"
Constructor
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : $class\->new( error => \*(AqAn exception was thrown!\*(Aq );
\& Function: Constructs exception
\& Returns : A Bio::Phylo::Util::Exceptions object
\& Args    : error => \*(AqError message\*(Aq
.Ve
.IP "\fIthrow()\fR" 4
.IX Item "throw()"
Throws exception.
.Sp
.Vb 6
\& Type    : Exception
\& Title   : throw
\& Usage   : $class\->throw( error => \*(AqAn exception was thrown!\*(Aq );
\& Function: Throws exception
\& Returns : A Bio::Phylo::Util::Exceptions object
\& Args    : error => \*(AqError message\*(Aq
.Ve
.IP "\fIcaught()\fR" 4
.IX Item "caught()"
Catches an exception by class.
.Sp
.Vb 6
\& Type    : Handler
\& Title   : caught
\& Usage   : my $e = Bio::Phylo::Util::Exceptions\->caught;
\& Function: Catches an exception
\& Returns : A Bio::Phylo::Util::Exceptions object
\& Args    : None
.Ve
.IP "\fIrethrow()\fR" 4
.IX Item "rethrow()"
Rethrows a caught exception.
.Sp
.Vb 6
\& Type    : Exception
\& Title   : rethrow
\& Usage   : $@\->rethrow;
\& Function: Rethrows exception
\& Returns : A Bio::Phylo::Util::Exceptions object
\& Args    : None
.Ve
.IP "\fIas_string()\fR" 4
.IX Item "as_string()"
Serializes exception.
.Sp
.Vb 6
\& Type    : Serializer
\& Title   : as_string
\& Usage   : print $@\->as_string;
\& Function: Serializes exception with description and stack trace.
\& Returns : String
\& Args    : None
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
