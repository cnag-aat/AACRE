.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::TribeMCL 3"
.TH Bio::Tools::Run::TribeMCL 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::TribeMCL
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::Tools::Run::TribeMCL;
\&  use Bio::SearchIO;
\&
\&  # 3 methods to input the blast results
\&
\&  # straight forward raw blast output (NCBI or WU\-BLAST)
\&  my @params = (\*(Aqinputtype\*(Aq=>\*(Aqblastfile\*(Aq);
\&
\&  # OR
\&
\&  # markov program format 
\&  # protein_id1 protein_id2 evalue_magnitude evalue_factor
\&  # for example: 
\&  # proteins ENSP00000257547  and ENSP00000261659
\&  # with a blast score evalue of 1e\-50
\&  # and proteins O42187 and ENSP00000257547
\&  # with a blast score evalue of 1e\-119
\&  # entry would be 
\&
\&  my @array  = [[qw(ENSP00000257547 ENSP00000261659 1 50)],
\&                [qw(O42187 ENSP00000257547 1 119)]];
\&  my @params = (\*(Aqpairs\*(Aq=>\e@array,I=>\*(Aq2.0\*(Aq);
\&
\&  # OR
\&
\&  # pass in a searchio object 
\&  # slowest of the 3 methods as it does more rigourous parsing
\&  # than required for us here
\&
\&  my $sio = Bio::SearchIO\->new(\-format=>\*(Aqblast\*(Aq,
\&                               \-file=>\*(Aqblast.out\*(Aq);
\&  my @params=(\*(Aqinputtype\*(Aq=>\*(Aqsearchio\*(Aq,I=>\*(Aq2.0\*(Aq);
\&
\&
\&  # you can specify the path to the executable manually in the following way
\&  my @params=(\*(Aqinputtype\*(Aq=>\*(Aqblastfile\*(Aq,I=>\*(Aq2.0\*(Aq,
\&              \*(Aqmcl\*(Aq=>\*(Aq/home/shawn/software/mcl\-02\-150/src/shmcl/mcl\*(Aq,
\&              \*(Aqmatrix\*(Aq=>\*(Aq/home/shawn/software/mcl\-02\-150/src/contrib/tribe/tribe\-matrix\*(Aq);
\&  my $fact = Bio::Tools::Run::TribeMCL\->new(@params);
\&
\&  # OR
\&
\&  $fact\->matrix_executable(\*(Aq/home/shawn/software/mcl\-02\-150/src/contrib/tribe/tribe\-matrix\*(Aq);
\&  $fact\->mcl_executable(\*(Aq/home/shawn/software/mcl\-02\-150/src/shmcl/mcl\*(Aq);
\&
\&  # to run
\&
\&  my $fact = Bio::Tools::Run::TribeMCL\->new(@params);
\&
\&  # Run the program
\&  # returns an array reference to clusters where members are the ids
\&  # for example :2 clusters with 3 members per cluster:
\&  #  $fam = [ [mem1 mem2 mem3],[mem1 mem2 mem3]]
\&
\&  # pass in either the blastfile path/searchio obj/the array ref to scores
\&  my $fam = $fact\->run($sio); 
\&
\&  # print out your clusters
\&
\&  for (my $i = 0; $i <scalar(@{$fam}); $i++){
\&    print "Cluster $i \et ".scalar(@{$fam\->[$i]})." members\en";
\&    foreach my $member (@{$fam\->[$i]}){
\&      print "\et$member\en";
\&    }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
TribeMCL is a method for clustering proteins into related groups,
which are termed 'protein families'. This clustering is achieved by
analysing similarity patterns between proteins in a given dataset, and
using these patterns to assign proteins into related groups. In many
cases, proteins in the same protein family will have similar
functional properties.
.PP
TribeMCL uses a novel clustering method (Markov Clustering or \s-1MCL\s0)
which solves problems which normally hinder protein sequence
clustering.
.PP
Reference:
.PP
.Vb 2
\&  Enright A.J., Van Dongen S., Ouzounis C.A; Nucleic Acids
\&  Res. 30(7):1575\-1584 (2002)
.Ve
.PP
You will need tribe-matrix (the program used to generate the matrix
for input into mcl) and mcl (the clustering software) available at:
.PP
.Vb 2
\&  http://www.ebi.ac.uk/research/cgg/tribe/ or
\&  http://micans.org/mcl/.
.Ve
.PP
Future Work in this module: Port the tribe-matrix program into perl so
that we can enable have a SearchIO kinda module for reading and
writing mcl data format
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
Email shawnh@fugu\-sg.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a \*(L"_\*(R".
.SS "mcl_executable"
.IX Subsection "mcl_executable"
.Vb 6
\& Title   : mcl_executable
\& Usage   : $self\->mcl_executable()
\& Function: get set for path to mcl executable
\& Returns : String or undef if not installed
\& Args    : [optional] string of path to executable
\&           [optional] boolean to warn on missing executable status
.Ve
.SS "matrix_executable"
.IX Subsection "matrix_executable"
.Vb 6
\& Title   : matrix_executable
\& Usage   : $self\->matrix_executable()
\& Function: get set for path to tribe\-matrix executable
\& Returns : String or undef if not installed
\& Args    : [optional] string of path to executable
\&           [optional] boolean to warn on missing executable status
.Ve
.SS "run"
.IX Subsection "run"
.Vb 5
\& Title   : run
\& Usage   : $self\->run()
\& Function: runs the clustering
\& Returns : Array Ref of clustered Ids 
\& Args    :
.Ve
.SS "_run_mcl"
.IX Subsection "_run_mcl"
.Vb 5
\& Title   : _run_mcl
\& Usage   : $self\->_run_mcl()
\& Function: internal function for running the mcl program
\& Returns : Array Ref of clustered Ids
\& Args    : Index_file name, matrix input file name
.Ve
.SS "_run_matrix"
.IX Subsection "_run_matrix"
.Vb 5
\& Title   : _run_matrix
\& Usage   : $self\->_run_matrix()
\& Function: internal function for running the tribe\-matrix program
\& Returns : index filepath and matrix file path
\& Args    : filepath of parsed ids and scores
.Ve
.SS "_setup_input"
.IX Subsection "_setup_input"
.Vb 6
\& Title   : _setup_input
\& Usage   : $self\->_setup_input()
\& Function: internal function for running setting up the inputs
\&            needed for running mcl
\& Returns : filepath of parsed ids and scores
\& Args    :
.Ve
.SS "_get_from_hsp"
.IX Subsection "_get_from_hsp"
.Vb 5
\& Title   : _get_from_hsp
\& Usage   : $self\->_get_from_hsp()
\& Function: internal function for getting blast scores from hsp 
\& Returns : array ref to ids and score [protein1 protein2 magnitude factor]
\& Args    : L<Bio::Search::HSP::GenericHSP>
.Ve
.SS "_get_from_searchio"
.IX Subsection "_get_from_searchio"
.Vb 5
\& Title   : _get_from_searchio
\& Usage   : $self\->_get_from_searchio()
\& Function: internal function for parsing blast scores from searchio object
\& Returns : array ref to ids and score [protein1 protein2 magnitude factor]
\& Args    :  L<Bio::Tools::SearchIO>
.Ve
.SS "_parse_blastfile"
.IX Subsection "_parse_blastfile"
.Vb 6
\& Title   : _parse_blastfile
\& Usage   : $self\->_parse_blastfile()
\& Function: internal function for quickly parsing blast evalue 
\&           scores from raw blast output file
\& Returns : array ref to ids and score [protein1 protein2 magnitude factor]
\& Args    :  file path
.Ve
.SS "_parse_mcl"
.IX Subsection "_parse_mcl"
.Vb 6
\& Title   : _parse_mcl
\& Usage   : $self\->_parse_mcl()
\& Function: internal function for quickly parsing mcl output and 
\&           generating the array of clusters
\& Returns : Array Ref of clustered Ids
\& Args    :  index file path, mcl output file path
.Ve
