.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Forest::DrawTreeRole 3"
.TH Bio::Phylo::Forest::DrawTreeRole 3 "2014-03-27" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Forest::DrawTree \- Tree with extra methods for tree drawing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # see Bio::Phylo::Forest::Tree
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The object models a phylogenetic tree, a container of Bio::Phylo::For\-
est::Node objects. The tree object inherits from Bio::Phylo::Listable,
so look there for more methods.
.PP
In addition, this subclass of the default tree object Bio::Phylo::Forest::Tree
has getters and setters for drawing trees, e.g. font and text attributes, etc.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTORS\s0"
.IX Subsection "CONSTRUCTORS"
.IP "\fInew()\fR" 4
.IX Item "new()"
Tree constructor.
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : my $tree = Bio::Phylo::Forest::DrawTree\->new;
\& Function: Instantiates a Bio::Phylo::Forest::DrawTree object.
\& Returns : A Bio::Phylo::Forest::DrawTree object.
\& Args    : No required arguments.
.Ve
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_width()\fR" 4
.IX Item "set_width()"
.Vb 6
\& Type    : Mutator
\& Title   : set_width
\& Usage   : $tree\->set_width($width);
\& Function: Sets width
\& Returns : $self
\& Args    : width
.Ve
.IP "\fIset_height()\fR" 4
.IX Item "set_height()"
.Vb 6
\& Type    : Mutator
\& Title   : set_height
\& Usage   : $tree\->set_height($height);
\& Function: Sets height
\& Returns : $self
\& Args    : height
.Ve
.IP "\fIset_node_radius()\fR" 4
.IX Item "set_node_radius()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_radius
\& Usage   : $tree\->set_node_radius($node_radius);
\& Function: Sets node_radius
\& Returns : $self
\& Args    : node_radius
.Ve
.IP "\fIset_tip_radius()\fR" 4
.IX Item "set_tip_radius()"
.Vb 6
\& Type    : Mutator
\& Title   : set_tip_node_radius
\& Usage   : $tree\->set_tip_radius($node_radius);
\& Function: Sets tip radius
\& Returns : $self
\& Args    : tip radius
.Ve
.IP "\fIset_node_colour()\fR" 4
.IX Item "set_node_colour()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_colour
\& Usage   : $tree\->set_node_colour($node_colour);
\& Function: Sets node_colour
\& Returns : $self
\& Args    : node_colour
.Ve
.IP "\fIset_node_shape()\fR" 4
.IX Item "set_node_shape()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_shape
\& Usage   : $tree\->set_node_shape($node_shape);
\& Function: Sets node_shape
\& Returns : $self
\& Args    : node_shape
.Ve
.IP "\fIset_node_image()\fR" 4
.IX Item "set_node_image()"
.Vb 6
\& Type    : Mutator
\& Title   : set_node_image
\& Usage   : $tree\->set_node_image($node_image);
\& Function: Sets node_image
\& Returns : $self
\& Args    : node_image
.Ve
.IP "\fIset_collapsed_clade_width()\fR" 4
.IX Item "set_collapsed_clade_width()"
Sets collapsed clade width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : set_collapsed_clade_width
\& Usage   : $tree\->set_collapsed_clade_width(6);
\& Function: sets the width of collapsed clade triangles relative to uncollapsed tips
\& Returns :
\& Args    : Positive number
.Ve
.IP "\fIset_branch_color()\fR" 4
.IX Item "set_branch_color()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_color
\& Usage   : $tree\->set_branch_color($branch_color);
\& Function: Sets branch_color
\& Returns : $self
\& Args    : branch_color
.Ve
.IP "\fIset_branch_shape()\fR" 4
.IX Item "set_branch_shape()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_shape
\& Usage   : $tree\->set_branch_shape($branch_shape);
\& Function: Sets branch_shape
\& Returns : $self
\& Args    : branch_shape
.Ve
.IP "\fIset_branch_width()\fR" 4
.IX Item "set_branch_width()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_width
\& Usage   : $tree\->set_branch_width($branch_width);
\& Function: Sets branch width
\& Returns : $self
\& Args    : branch_width
.Ve
.IP "\fIset_branch_style()\fR" 4
.IX Item "set_branch_style()"
.Vb 6
\& Type    : Mutator
\& Title   : set_branch_style
\& Usage   : $tree\->set_branch_style($branch_style);
\& Function: Sets branch style
\& Returns : $self
\& Args    : branch_style
.Ve
.IP "\fIset_font_face()\fR" 4
.IX Item "set_font_face()"
.Vb 6
\& Type    : Mutator
\& Title   : set_font_face
\& Usage   : $tree\->set_font_face($font_face);
\& Function: Sets font_face
\& Returns : $self
\& Args    : font face, Verdana, Arial, Serif
.Ve
.IP "\fIset_font_size()\fR" 4
.IX Item "set_font_size()"
.Vb 6
\& Type    : Mutator
\& Title   : set_font_size
\& Usage   : $tree\->set_font_size($font_size);
\& Function: Sets font_size
\& Returns : $self
\& Args    : Font size in pixels
.Ve
.IP "\fIset_font_style()\fR" 4
.IX Item "set_font_style()"
.Vb 6
\& Type    : Mutator
\& Title   : set_font_style
\& Usage   : $tree\->set_font_style($font_style);
\& Function: Sets font_style
\& Returns : $self
\& Args    : Font style, e.g. Italic
.Ve
.IP "\fIset_margin()\fR" 4
.IX Item "set_margin()"
.Vb 6
\& Type    : Mutator
\& Title   : set_margin
\& Usage   : $tree\->set_margin($margin);
\& Function: Sets margin
\& Returns : $self
\& Args    : margin
.Ve
.IP "\fIset_margin_top()\fR" 4
.IX Item "set_margin_top()"
.Vb 6
\& Type    : Mutator
\& Title   : set_margin_top
\& Usage   : $tree\->set_margin_top($margin_top);
\& Function: Sets margin_top
\& Returns : $self
\& Args    : margin_top
.Ve
.IP "\fIset_margin_bottom()\fR" 4
.IX Item "set_margin_bottom()"
.Vb 6
\& Type    : Mutator
\& Title   : set_margin_bottom
\& Usage   : $tree\->set_margin_bottom($margin_bottom);
\& Function: Sets margin_bottom
\& Returns : $self
\& Args    : margin_bottom
.Ve
.IP "\fIset_margin_left()\fR" 4
.IX Item "set_margin_left()"
.Vb 6
\& Type    : Mutator
\& Title   : set_margin_left
\& Usage   : $tree\->set_margin_left($margin_left);
\& Function: Sets margin_left
\& Returns : $self
\& Args    : margin_left
.Ve
.IP "\fIset_margin_right()\fR" 4
.IX Item "set_margin_right()"
.Vb 6
\& Type    : Mutator
\& Title   : set_margin_right
\& Usage   : $tree\->set_margin_right($margin_right);
\& Function: Sets margin_right
\& Returns : $self
\& Args    : margin_right
.Ve
.IP "\fIset_padding()\fR" 4
.IX Item "set_padding()"
.Vb 6
\& Type    : Mutator
\& Title   : set_padding
\& Usage   : $tree\->set_padding($padding);
\& Function: Sets padding
\& Returns : $self
\& Args    : padding
.Ve
.IP "\fIset_padding_top()\fR" 4
.IX Item "set_padding_top()"
.Vb 6
\& Type    : Mutator
\& Title   : set_padding_top
\& Usage   : $tree\->set_padding_top($padding_top);
\& Function: Sets padding_top
\& Returns : $self
\& Args    : padding_top
.Ve
.IP "\fIset_padding_bottom()\fR" 4
.IX Item "set_padding_bottom()"
.Vb 6
\& Type    : Mutator
\& Title   : set_padding_bottom
\& Usage   : $tree\->set_padding_bottom($padding_bottom);
\& Function: Sets padding_bottom
\& Returns : $self
\& Args    : padding_bottom
.Ve
.IP "\fIset_padding_left()\fR" 4
.IX Item "set_padding_left()"
.Vb 6
\& Type    : Mutator
\& Title   : set_padding_left
\& Usage   : $tree\->set_padding_left($padding_left);
\& Function: Sets padding_left
\& Returns : $self
\& Args    : padding_left
.Ve
.IP "\fIset_padding_right()\fR" 4
.IX Item "set_padding_right()"
.Vb 6
\& Type    : Mutator
\& Title   : set_padding_right
\& Usage   : $tree\->set_padding_right($padding_right);
\& Function: Sets padding_right
\& Returns : $self
\& Args    : padding_right
.Ve
.IP "\fIset_mode()\fR" 4
.IX Item "set_mode()"
.Vb 6
\& Type    : Mutator
\& Title   : set_mode
\& Usage   : $tree\->set_mode($mode);
\& Function: Sets mode
\& Returns : $self
\& Args    : mode, e.g. \*(AqCLADO\*(Aq or \*(AqPHYLO\*(Aq
.Ve
.IP "\fIset_shape()\fR" 4
.IX Item "set_shape()"
.Vb 6
\& Type    : Mutator
\& Title   : set_shape
\& Usage   : $tree\->set_shape($shape);
\& Function: Sets shape
\& Returns : $self
\& Args    : shape, e.g. \*(AqRECT\*(Aq, \*(AqCURVY\*(Aq, \*(AqDIAG\*(Aq
.Ve
.IP "\fIset_text_horiz_offset()\fR" 4
.IX Item "set_text_horiz_offset()"
.Vb 6
\& Type    : Mutator
\& Title   : set_text_horiz_offset
\& Usage   : $tree\->set_text_horiz_offset($text_horiz_offset);
\& Function: Sets text_horiz_offset
\& Returns : $self
\& Args    : text_horiz_offset
.Ve
.IP "\fIset_text_vert_offset()\fR" 4
.IX Item "set_text_vert_offset()"
.Vb 6
\& Type    : Mutator
\& Title   : set_text_vert_offset
\& Usage   : $tree\->set_text_vert_offset($text_vert_offset);
\& Function: Sets text_vert_offset
\& Returns : $self
\& Args    : text_vert_offset
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_width()\fR" 4
.IX Item "get_width()"
.Vb 6
\& Type    : Accessor
\& Title   : get_width
\& Usage   : my $width = $tree\->get_width();
\& Function: Gets width
\& Returns : width
\& Args    : NONE
.Ve
.IP "\fIget_height()\fR" 4
.IX Item "get_height()"
.Vb 6
\& Type    : Accessor
\& Title   : get_height
\& Usage   : my $height = $tree\->get_height();
\& Function: Gets height
\& Returns : height
\& Args    : NONE
.Ve
.IP "\fIget_node_radius()\fR" 4
.IX Item "get_node_radius()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_radius
\& Usage   : my $node_radius = $tree\->get_node_radius();
\& Function: Gets node_radius
\& Returns : node_radius
\& Args    : NONE
.Ve
.IP "\fIget_node_colour()\fR" 4
.IX Item "get_node_colour()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_colour
\& Usage   : my $node_colour = $tree\->get_node_colour();
\& Function: Gets node_colour
\& Returns : node_colour
\& Args    : NONE
.Ve
.IP "\fIget_node_shape()\fR" 4
.IX Item "get_node_shape()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_shape
\& Usage   : my $node_shape = $tree\->get_node_shape();
\& Function: Gets node_shape
\& Returns : node_shape
\& Args    : NONE
.Ve
.IP "\fIget_node_image()\fR" 4
.IX Item "get_node_image()"
.Vb 6
\& Type    : Accessor
\& Title   : get_node_image
\& Usage   : my $node_image = $tree\->get_node_image();
\& Function: Gets node_image
\& Returns : node_image
\& Args    : NONE
.Ve
.IP "\fIget_collapsed_clade_width()\fR" 4
.IX Item "get_collapsed_clade_width()"
Gets collapsed clade width.
.Sp
.Vb 6
\& Type    : Mutator
\& Title   : get_collapsed_clade_width
\& Usage   : $w = $tree\->get_collapsed_clade_width();
\& Function: gets the width of collapsed clade triangles relative to uncollapsed tips
\& Returns : Positive number
\& Args    : None
.Ve
.IP "\fIget_branch_color()\fR" 4
.IX Item "get_branch_color()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_color
\& Usage   : my $branch_color = $tree\->get_branch_color();
\& Function: Gets branch_color
\& Returns : branch_color
\& Args    : NONE
.Ve
.IP "\fIget_branch_shape()\fR" 4
.IX Item "get_branch_shape()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_shape
\& Usage   : my $branch_shape = $tree\->get_branch_shape();
\& Function: Gets branch_shape
\& Returns : branch_shape
\& Args    : NONE
.Ve
.IP "\fIget_branch_width()\fR" 4
.IX Item "get_branch_width()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_width
\& Usage   : my $branch_width = $tree\->get_branch_width();
\& Function: Gets branch_width
\& Returns : branch_width
\& Args    : NONE
.Ve
.IP "\fIget_branch_style()\fR" 4
.IX Item "get_branch_style()"
.Vb 6
\& Type    : Accessor
\& Title   : get_branch_style
\& Usage   : my $branch_style = $tree\->get_branch_style();
\& Function: Gets branch_style
\& Returns : branch_style
\& Args    : NONE
.Ve
.IP "\fIget_font_face()\fR" 4
.IX Item "get_font_face()"
.Vb 6
\& Type    : Accessor
\& Title   : get_font_face
\& Usage   : my $font_face = $tree\->get_font_face();
\& Function: Gets font_face
\& Returns : font_face
\& Args    : NONE
.Ve
.IP "\fIget_font_size()\fR" 4
.IX Item "get_font_size()"
.Vb 6
\& Type    : Accessor
\& Title   : get_font_size
\& Usage   : my $font_size = $tree\->get_font_size();
\& Function: Gets font_size
\& Returns : font_size
\& Args    : NONE
.Ve
.IP "\fIget_font_style()\fR" 4
.IX Item "get_font_style()"
.Vb 6
\& Type    : Accessor
\& Title   : get_font_style
\& Usage   : my $font_style = $tree\->get_font_style();
\& Function: Gets font_style
\& Returns : font_style
\& Args    : NONE
.Ve
.IP "\fIget_margin()\fR" 4
.IX Item "get_margin()"
.Vb 6
\& Type    : Accessor
\& Title   : get_margin
\& Usage   : my $margin = $tree\->get_margin();
\& Function: Gets margin
\& Returns : margin
\& Args    : NONE
.Ve
.IP "\fIget_margin_top()\fR" 4
.IX Item "get_margin_top()"
.Vb 6
\& Type    : Accessor
\& Title   : get_margin_top
\& Usage   : my $margin_top = $tree\->get_margin_top();
\& Function: Gets margin_top
\& Returns : margin_top
\& Args    : NONE
.Ve
.IP "\fIget_margin_bottom()\fR" 4
.IX Item "get_margin_bottom()"
.Vb 6
\& Type    : Accessor
\& Title   : get_margin_bottom
\& Usage   : my $margin_bottom = $tree\->get_margin_bottom();
\& Function: Gets margin_bottom
\& Returns : margin_bottom
\& Args    : NONE
.Ve
.IP "\fIget_margin_left()\fR" 4
.IX Item "get_margin_left()"
.Vb 6
\& Type    : Accessor
\& Title   : get_margin_left
\& Usage   : my $margin_left = $tree\->get_margin_left();
\& Function: Gets margin_left
\& Returns : margin_left
\& Args    : NONE
.Ve
.IP "\fIget_margin_right()\fR" 4
.IX Item "get_margin_right()"
.Vb 6
\& Type    : Accessor
\& Title   : get_margin_right
\& Usage   : my $margin_right = $tree\->get_margin_right();
\& Function: Gets margin_right
\& Returns : margin_right
\& Args    : NONE
.Ve
.IP "\fIget_padding()\fR" 4
.IX Item "get_padding()"
.Vb 6
\& Type    : Accessor
\& Title   : get_padding
\& Usage   : my $padding = $tree\->get_padding();
\& Function: Gets padding
\& Returns : padding
\& Args    : NONE
.Ve
.IP "\fIget_padding_top()\fR" 4
.IX Item "get_padding_top()"
.Vb 6
\& Type    : Accessor
\& Title   : get_padding_top
\& Usage   : my $padding_top = $tree\->get_padding_top();
\& Function: Gets padding_top
\& Returns : padding_top
\& Args    : NONE
.Ve
.IP "\fIget_padding_bottom()\fR" 4
.IX Item "get_padding_bottom()"
.Vb 6
\& Type    : Accessor
\& Title   : get_padding_bottom
\& Usage   : my $padding_bottom = $tree\->get_padding_bottom();
\& Function: Gets padding_bottom
\& Returns : padding_bottom
\& Args    : NONE
.Ve
.IP "\fIget_padding_left()\fR" 4
.IX Item "get_padding_left()"
.Vb 6
\& Type    : Accessor
\& Title   : get_padding_left
\& Usage   : my $padding_left = $tree\->get_padding_left();
\& Function: Gets padding_left
\& Returns : padding_left
\& Args    : NONE
.Ve
.IP "\fIget_padding_right()\fR" 4
.IX Item "get_padding_right()"
.Vb 6
\& Type    : Accessor
\& Title   : get_padding_right
\& Usage   : my $padding_right = $tree\->get_padding_right();
\& Function: Gets padding_right
\& Returns : padding_right
\& Args    : NONE
.Ve
.IP "\fIget_mode()\fR" 4
.IX Item "get_mode()"
.Vb 6
\& Type    : Accessor
\& Title   : get_mode
\& Usage   : my $mode = $tree\->get_mode();
\& Function: Gets mode
\& Returns : mode
\& Args    : NONE
.Ve
.IP "\fIget_shape()\fR" 4
.IX Item "get_shape()"
.Vb 6
\& Type    : Accessor
\& Title   : get_shape
\& Usage   : my $shape = $tree\->get_shape();
\& Function: Gets shape
\& Returns : shape
\& Args    : NONE
.Ve
.IP "\fIget_text_horiz_offset()\fR" 4
.IX Item "get_text_horiz_offset()"
.Vb 6
\& Type    : Accessor
\& Title   : get_text_horiz_offset
\& Usage   : my $text_horiz_offset = $tree\->get_text_horiz_offset();
\& Function: Gets text_horiz_offset
\& Returns : text_horiz_offset
\& Args    : NONE
.Ve
.IP "\fIget_text_vert_offset()\fR" 4
.IX Item "get_text_vert_offset()"
.Vb 6
\& Type    : Accessor
\& Title   : get_text_vert_offset
\& Usage   : my $text_vert_offset = $tree\->get_text_vert_offset();
\& Function: Gets text_vert_offset
\& Returns : text_vert_offset
\& Args    : NONE
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Forest::Tree" 4
.IX Item "Bio::Phylo::Forest::Tree"
This object inherits from Bio::Phylo::Forest::Tree, so methods
defined there are also applicable here.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
