.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Cache::CacheSizer 3"
.TH Cache::CacheSizer 3 "2015-01-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cache::CacheSizer \-\- component object for managing the size of caches
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The CacheSizer class is used internally in SizeAware caches such as
SizeAwareFileCache to encapsulate the logic of limiting cache size.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Cache::CacheSizer;
\&
\&  my $sizer = new Cache::CacheSizer( $cache, $max_size );
\&
\&  $sizer\->limit_size( $new_size );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew( \f(CB$cache\fB, \f(CB$max_size\fB )\fR" 4
.IX Item "new( $cache, $max_size )"
Construct a new Cache::CacheSizer object for the cache \fI\f(CI$cache\fI\fR with
a maximum size of \fI\f(CI$max_size\fI\fR.
.IP "\fBupdate_access_time( \f(CB$key\fB )\fR" 4
.IX Item "update_access_time( $key )"
Inform the cache that the object specified by \fI\f(CI$key\fI\fR has been accessed.
.IP "\fBlimit_size( \f(CB$new_size\fB )\fR" 4
.IX Item "limit_size( $new_size )"
Use the sizing algorithms to get the cache down under \fI\f(CI$new_size\fI\fR if
possible.
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.IP "\fBget_max_size\fR" 4
.IX Item "get_max_size"
The desired size limit for the cache under control.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cache::Cache, Cache::CacheMetaData, Cache::SizeAwareCache
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author: DeWitt Clinton <dewitt@unto.net>
.PP
Last author:     \f(CW$Author:\fR dclinton $
.PP
Copyright (C) 2001\-2003 DeWitt Clinton
