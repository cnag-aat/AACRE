.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::IO 3"
.TH Bio::Phylo::IO 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::IO \- Front end for parsers and serializers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Bio::Phylo::IO qw(parse unparse);
\&
\& # returns an unblessed array reference of block objects,
\& # i.e. taxa, matrix or forest objects
\& my $blocks = parse(
\&    \*(Aq\-file\*(Aq     => $file,
\&    \*(Aq\-format\*(Aq   => \*(Aqnexus\*(Aq,
\&    \*(Aq\-encoding\*(Aq => \*(Aq:encoding(UTF\-8)\*(Aq, # optional, default is system\-dependent
\& );
\& 
\& for my $block ( @{ $blocks } ) {
\&    if ( $block\->isa(\*(AqBio::Phylo::Taxa\*(Aq) ) {
\&        my $taxa = $block;
\&        # do something with the taxa
\&    }
\& }
\& 
\& # returns a Bio::Phylo::Project object
\& my $project = parse(
\&        \*(Aq\-file\*(Aq       => $file,
\&        \*(Aq\-format\*(Aq     => \*(Aqnexus\*(Aq,
\&        \*(Aq\-as_project\*(Aq => 1
\& )
\& my ($taxa) = @{ $project\->get_taxa };
\&
\& # parsing a tree from a newick string
\& my $tree_string = \*(Aq(((A,B),C),D);\*(Aq;
\& my $tree = Bio::Phylo::IO\->parse(
\&    \*(Aq\-string\*(Aq => $tree_string,
\&    \*(Aq\-format\*(Aq => \*(Aqnewick\*(Aq,
\& )\->first;
\&
\& # note: newick parsers return 
\& # \*(AqBio::Phylo::Forest\*(Aq! Call 
\& # \->first to retrieve the first 
\& # tree of the forest.
\&
\& # prints \*(AqBio::Phylo::Forest::Tree\*(Aq
\& print ref $tree, "\en";
\&
\& # if the tree is very large and you need only some terminal nodes from it
\& $simplified_tree = Bio::Phylo::IO\->parse(
\&    \*(Aq\-string\*(Aq => $tree_string,
\&    \*(Aq\-format\*(Aq => \*(Aqnewick\*(Aq,
\&    \*(Aq\-keep\*(Aq   => [\*(AqA\*(Aq, \*(AqD\*(Aq], # nodes to keep
\&    \*(Aq\-ignore_comments\*(Aq => 1, # treats [] symbols as part of taxon name
\& )\->first;
\&
\& # parsing a table
\& my $table_string = qq(A,1,2|B,1,2|C,2,2|D,2,1);
\& my $matrix = Bio::Phylo::IO\->parse(
\&    \*(Aq\-string\*(Aq   => $table_string,
\&    \*(Aq\-format\*(Aq   => \*(Aqtable\*(Aq,
\&
\&    # Data type, see Bio::Phylo::Parsers::Table
\&    \*(Aq\-type\*(Aq     => \*(AqSTANDARD\*(Aq,
\&
\&    # field separator  
\&    \*(Aq\-fieldsep\*(Aq => \*(Aq,\*(Aq,
\&
\&    # line separator
\&    \*(Aq\-linesep\*(Aq  => \*(Aq|\*(Aq          
\& );
\&
\& # prints \*(AqBio::Phylo::Matrices::Matrix\*(Aq
\& print ref $matrix, "\en"; 
\&
\& # parsing a list of taxa
\& my $taxa_string = \*(AqA:B:C:D\*(Aq;
\& my $taxa = Bio::Phylo::IO\->parse(
\&    \*(Aq\-string\*(Aq   => $taxa_string,
\&    \*(Aq\-format\*(Aq   => \*(Aqtaxlist\*(Aq,
\&    \*(Aq\-fieldsep\*(Aq => \*(Aq:\*(Aq
\& );
\&
\& # prints \*(AqBio::Phylo::Taxa\*(Aq
\& print ref $taxa, "\en";
\&
\& # matches taxon names in tree to $taxa object
\& $tree\->cross_reference($taxa);  
\&
\& # likewise for matrix  
\& $matrix\->cross_reference($taxa);
\&
\& print unparse(
\&
\&    # pass the tree object, 
\&    # crossreferenced to taxa, which
\&    # are crossreferenced to the matrix
\&    \*(Aq\-phylo\*(Aq => $tree,                         
\&    \*(Aq\-format\*(Aq => \*(Aqpagel\*(Aq
\& );
\&
\& # prints a pagel data file:
\& #4 2
\& #A,n1,0.000000,1,2
\& #B,n1,0.000000,1,2
\& #n1,n2,0.000000
\& #C,n2,0.000000,2,2
\& #n2,n3,0.000000
\& #D,n3,0.000000,2,1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1IO\s0 module is the front end for parsing and serializing phylogenetic
data objects. It is a non-OO module that optionally exports the 'parse' and
\&'unparse' subroutines into the caller's namespace, using the
\&\f(CW\*(C`use Bio::Phylo::IO qw(parse unparse);\*(C'\fR directive. Alternatively, you can
call the subroutines as class methods. The \f(CW\*(C`parse\*(C'\fR and
\&\f(CW\*(C`unparse\*(C'\fR subroutines load and dispatch the appropriate sub-modules at
runtime, depending on the '\-format' argument.
.SS "\s-1CLASS METHODS\s0"
.IX Subsection "CLASS METHODS"
.IP "\fIparse()\fR" 4
.IX Item "parse()"
Parses a file or string.
.Sp
.Vb 10
\& Type    : Class method
\& Title   : parse
\& Usage   : my $obj = Bio::Phylo::IO\->parse(%options);
\& Function: Creates (file) handle, 
\&           instantiates appropriate parser.
\& Returns : A Bio::Phylo::* object
\& Args    : \-file    => (path),
\&            or
\&           \-string  => (scalar),
\&           or
\&           \-handle  => (IO::Handle object)
\&           or
\&           \-url     => (url string)
\&           \-format  => (description format),
\&           \-(other) => (parser specific options)
\& Comments: The parse method makes assumptions about 
\&           the capabilities of Bio::Phylo::Parsers::* 
\&           modules: i) their names match those of the
\&           \-format => (blah) arguments, insofar that 
\&           ucfirst(blah) . \*(Aq.pm\*(Aq is an existing module; 
\&           ii) the modules implement a _from_handle, 
\&           or a _from_string method. Exceptions are 
\&           thrown if either assumption is violated. 
\&           
\&           If @ARGV contains even key/value pairs such
\&           as "format newick file <filename>" (note: no
\&           dashes) these will be prepended to @_, for
\&           one\-liners.
.Ve
.IP "\fIparse_matrix()\fR" 4
.IX Item "parse_matrix()"
Parses a file or string.
.Sp
.Vb 9
\& Type    : Class method
\& Title   : parse_matrix
\& Usage   : my $matrix = Bio::Phylo::IO\->parse_matrix(%options);
\& Function: Creates (file) handle, 
\&           instantiates appropriate parser.
\& Returns : A Bio::Phylo::Matrices::Matrix object
\& Args    : Same as parse()
\& Comments: This method is syntactical sugar to get the first matrix
\&           out of a file/handle/string
.Ve
.IP "\fIparse_tree()\fR" 4
.IX Item "parse_tree()"
Parses a file or string.
.Sp
.Vb 9
\& Type    : Class method
\& Title   : parse_tree
\& Usage   : my $tree = Bio::Phylo::IO\->parse_tree(%options);
\& Function: Creates (file) handle, 
\&           instantiates appropriate parser.
\& Returns : A Bio::Phylo::Forest::Tree object
\& Args    : Same as parse()
\& Comments: This method is syntactical sugar to get the first tree
\&           out of a file/handle/string
.Ve
.IP "\fIunparse()\fR" 4
.IX Item "unparse()"
Unparses object(s) to a string.
.Sp
.Vb 10
\& Type    : Class method
\& Title   : unparse
\& Usage   : my $string = Bio::Phylo::IO\->unparse(
\&               %options
\&           );
\& Function: Turns Bio::Phylo object into a 
\&           string according to specified format. If an
\&           optional \-file or \-handle argument is provided
\&           the string is also written to that.
\& Returns : SCALAR
\& Args    : \-phylo   => (Bio::Phylo object),
\&           \-format  => (description format),
\&           \-(other) => (parser specific options)
\&           \-file    => (optional: a file path to open and write to)
\&           or
\&           \-handle  => (optional: a handle to write to)
.Ve
.IP "\fIcan_read()\fR" 4
.IX Item "can_read()"
Tests whether Bio::Phylo::IO can read provided syntax format.
.Sp
.Vb 6
\& Type    : Class method
\& Title   : can_read
\& Usage   : &do_something if Bio::Phylo::IO\->can_read(\*(Aqfoo\*(Aq);
\& Function: Tests whether Bio::Phylo::IO can read provided syntax format.
\& Returns : Boolean
\& Args    : A syntax format name, like "nexml"
.Ve
.IP "\fIcan_write()\fR" 4
.IX Item "can_write()"
Tests whether Bio::Phylo::IO can write provided syntax format.
.Sp
.Vb 6
\& Type    : Class method
\& Title   : can_write
\& Usage   : &do_something if Bio::Phylo::IO\->can_write(\*(Aqfoo\*(Aq);
\& Function: Tests whether Bio::Phylo::IO can write provided syntax format.
\& Returns : Boolean
\& Args    : A syntax format name, like "nexml"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Parsers::Fasta" 4
.IX Item "Bio::Phylo::Parsers::Fasta"
.PD 0
.IP "Bio::Phylo::Parsers::Newick" 4
.IX Item "Bio::Phylo::Parsers::Newick"
.IP "Bio::Phylo::Parsers::Nexml" 4
.IX Item "Bio::Phylo::Parsers::Nexml"
.IP "Bio::Phylo::Parsers::Nexus" 4
.IX Item "Bio::Phylo::Parsers::Nexus"
.IP "Bio::Phylo::Parsers::Phylip" 4
.IX Item "Bio::Phylo::Parsers::Phylip"
.IP "Bio::Phylo::Parsers::Phyloxml" 4
.IX Item "Bio::Phylo::Parsers::Phyloxml"
.IP "Bio::Phylo::Parsers::Table" 4
.IX Item "Bio::Phylo::Parsers::Table"
.IP "Bio::Phylo::Parsers::Taxlist" 4
.IX Item "Bio::Phylo::Parsers::Taxlist"
.IP "Bio::Phylo::Parsers::Tolweb" 4
.IX Item "Bio::Phylo::Parsers::Tolweb"
.IP "Bio::Phylo::Unparsers::Mrp" 4
.IX Item "Bio::Phylo::Unparsers::Mrp"
.IP "Bio::Phylo::Unparsers::Newick" 4
.IX Item "Bio::Phylo::Unparsers::Newick"
.IP "Bio::Phylo::Unparsers::Nexml" 4
.IX Item "Bio::Phylo::Unparsers::Nexml"
.IP "Bio::Phylo::Unparsers::Nexus" 4
.IX Item "Bio::Phylo::Unparsers::Nexus"
.IP "Bio::Phylo::Unparsers::Pagel" 4
.IX Item "Bio::Phylo::Unparsers::Pagel"
.IP "Bio::Phylo::Unparsers::Phylip" 4
.IX Item "Bio::Phylo::Unparsers::Phylip"
.IP "Bio::Phylo::Unparsers::Phyloxml" 4
.IX Item "Bio::Phylo::Unparsers::Phyloxml"
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
.PD
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
