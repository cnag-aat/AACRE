.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Phylo::PAML::ModelResult 3"
.TH Bio::Tools::Phylo::PAML::ModelResult 3 "2018-07-01" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Phylo::PAML::ModelResult \- A container for NSSite Model Result from PAML
.SH "VERSION"
.IX Header "VERSION"
version 1.7.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  # get a ModelResult from a PAML::Result object
\&  use Bio::Tools::Phylo::PAML;
\&  my $paml = Bio::Tools::Phylo::PAML\->new(\-file => \*(Aqmlc\*(Aq);
\&  my $result = $paml\->next_result;
\&  foreach my $model ( $result\->get_NSSite_results ) {
\&    print $model\->model_num, " ", $model\->model_description, "\en";
\&    print $model\->kappa, "\en";
\&    print $model\->run_time, "\en";
\&# if you are using PAML < 3.15 then only one place for POS sites
\&   for my $sites ( $model\->get_pos_selected_sites ) {
\&    print join("\et",@$sites),"\en";
\&   }
\&# otherwise query NEB and BEB slots
\&   for my $sites ( $model\->get_NEB_pos_selected_sites ) {
\&     print join("\et",@$sites),"\en";
\&   }
\&
\&   for my $sites ( $model\->get_BEB_pos_selected_sites ) {
\&    print join("\et",@$sites),"\en";
\&   }
\&
\&  }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Phylo::PAML::ModelResult\->new();
\& Function: Builds  a new Bio::Tools::Phylo::PAML::ModelResult object
\& Returns : an instance of Bio::Tools::Phylo::PAML::ModelResult
\& Args    : \-model_num           => model number
\&           \-model_description   => model description
\&           \-kappa               => value of kappa
\&           \-time_used           => amount of time
\&           \-pos_sites           => arrayref of sites under positive selection
\&           \-neb_sites           => arrayref of sites under positive selection (by NEB analysis)
\&           \-beb_sites           => arrayref of sites under positive selection (by BEB analysis)
\&           \-trees               => arrayref of tree(s) data for this model
\&           \-shape_params        => hashref of parameters
\&                                   (\*(Aqshape\*(Aq => \*(Aqalpha\*(Aq,
\&                    \*(Aqgamma\*(Aq => $g,
\&                    \*(Aqr\*(Aq => $r,
\&                    \*(Aqf\*(Aq => $f
\&                    )
\&                                    OR
\&                    ( \*(Aqshape\*(Aq => \*(Aqbeta\*(Aq,
\&                      \*(Aqp\*(Aq => $p,
\&                      \*(Aqq\*(Aq => $q
\&                     )
\&           \-likelihood          => likelihood
\&           \-num_site_classes    => number of site classes
\&           \-dnds_site_classes   => hashref with two keys, \*(Aqp\*(Aq and \*(Aqw\*(Aq
\&                                   which each point to an array, each
\&                                   slot is for a different site class.
\&                                   \*(Aqw\*(Aq is for dN/dS and \*(Aqp\*(Aq is probability
.Ve
.SS "model_num"
.IX Subsection "model_num"
.Vb 5
\& Title   : model_num
\& Usage   : $obj\->model_num($newval)
\& Function: Get/Set the Model number (0,1,2,3...)
\& Returns : value of model_num (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "model_description"
.IX Subsection "model_description"
.Vb 6
\& Title   : model_description
\& Usage   : $obj\->model_description($newval)
\& Function: Get/Set the model description
\&           This is something like \*(Aqone\-ratio\*(Aq, \*(Aqneutral\*(Aq, \*(Aqselection\*(Aq
\& Returns : value of description (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "time_used"
.IX Subsection "time_used"
.Vb 5
\& Title   : time_used
\& Usage   : $obj\->time_used($newval)
\& Function: Get/Set the time it took to run this analysis
\& Returns : value of time_used (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "kappa"
.IX Subsection "kappa"
.Vb 5
\& Title   : kappa
\& Usage   : $obj\->kappa($newval)
\& Function: Get/Set kappa (ts/tv)
\& Returns : value of kappa (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "num_site_classes"
.IX Subsection "num_site_classes"
.Vb 5
\& Title   : num_site_classes
\& Usage   : $obj\->num_site_classes($newval)
\& Function: Get/Set the number of site classes for this model
\& Returns : value of num_site_classes (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "dnds_site_classes"
.IX Subsection "dnds_site_classes"
.Vb 7
\& Title   : dnds_site_classes
\& Usage   : $obj\->dnds_site_classes($newval)
\& Function: Get/Set dN/dS site classes, a hashref
\&           with 2 keys, \*(Aqp\*(Aq and \*(Aqw\*(Aq which point to arrays
\&           one slot for each site class.
\& Returns : value of dnds_site_classes (a hashref)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "get_pos_selected_sites"
.IX Subsection "get_pos_selected_sites"
.Vb 11
\& Title   : get_pos_selected_sites
\& Usage   : my @sites = $modelresult\->get_pos_selected_sites();
\& Function: Get the sites which PAML has identified as under positive
\&           selection (w > 1).  This returns an array with each slot
\&           being a site, 4 values,
\&           site location (in the original alignment)
\&           Amino acid    (I *think* in the first sequence)
\&           P             (P value)
\&           Significance  (** indicated > 99%, * indicates >=95%)
\& Returns : Array
\& Args    : none
.Ve
.SS "add_pos_selected_site"
.IX Subsection "add_pos_selected_site"
.Vb 8
\& Title   : add_pos_selected_site
\& Usage   : $result\->add_pos_selected_site($site,$aa,$pvalue,$signif);
\& Function: Add a site to the list of positively selected sites
\& Returns : count of the number of sites stored
\& Args    : $site   \- site number (in the alignment)
\&           $aa     \- amino acid under selection
\&           $pvalue \- float from 0\->1 represent probability site is under selection according to this model
\&           $signif \- significance (coded as either empty, \*(Aq*\*(Aq, or \*(Aq**\*(Aq
.Ve
.SS "get_NEB_pos_selected_sites"
.IX Subsection "get_NEB_pos_selected_sites"
.Vb 12
\& Title   : get_NEB_pos_selected_sites
\& Usage   : my @sites = $modelresult\->get_NEB_pos_selected_sites();
\& Function: Get the sites which PAML has identified as under positive
\&           selection (w > 1) using Naive Empirical Bayes.
\&           This returns an array with each slot being a site, 4 values,
\&           site location (in the original alignment)
\&           Amino acid    (I *think* in the first sequence)
\&           P             (P value)
\&           Significance  (** indicated > 99%, * indicates > 95%)
\&           post mean for w
\& Returns : Array
\& Args    : none
.Ve
.SS "add_NEB_pos_selected_site"
.IX Subsection "add_NEB_pos_selected_site"
.Vb 9
\& Title   : add_NEB_pos_selected_site
\& Usage   : $result\->add_NEB_pos_selected_site($site,$aa,$pvalue,$signif);
\& Function: Add a site to the list of positively selected sites
\& Returns : count of the number of sites stored
\& Args    : $site   \- site number (in the alignment)
\&           $aa     \- amino acid under selection
\&           $pvalue \- float from 0\->1 represent probability site is under selection according to this model
\&           $signif \- significance (coded as either empty, \*(Aq*\*(Aq, or \*(Aq**\*(Aq
\&           $postmean \- post mean for w
.Ve
.SS "get_BEB_pos_selected_sites"
.IX Subsection "get_BEB_pos_selected_sites"
.Vb 10
\& Title   : get_BEB_pos_selected_sites
\& Usage   : my @sites = $modelresult\->get_BEB_pos_selected_sites();
\& Function: Get the sites which PAML has identified as under positive
\&           selection (w > 1) using Bayes Empirical Bayes.
\&           This returns an array with each slot being a site, 6 values,
\&           site location (in the original alignment)
\&           Amino acid    (I *think* in the first sequence)
\&           P             (P value)
\&           Significance  (** indicated > 99%, * indicates > 95%)
\&           post mean for w (mean)
\&           Standard Error for w (SE)
\& Returns : Array
\& Args    : none
.Ve
.SS "add_BEB_pos_selected_site"
.IX Subsection "add_BEB_pos_selected_site"
.Vb 10
\& Title   : add_BEB_pos_selected_site
\& Usage   : $result\->add_BEB_pos_selected_site($site,$aa,$pvalue,$signif);
\& Function: Add a site to the list of positively selected sites
\& Returns : count of the number of sites stored
\& Args    : $site   \- site number (in the alignment)
\&           $aa     \- amino acid under selection
\&           $pvalue \- float from 0\->1 represent probability site is under selection according to this model
\&           $signif \- significance (coded as either empty, \*(Aq*\*(Aq, or \*(Aq**\*(Aq
\&           $postmean \- post mean for w
\&           $SE       \- Standard Error for w
.Ve
.SS "next_tree"
.IX Subsection "next_tree"
.Vb 5
\& Title   : next_tree
\& Usage   : my $tree = $factory\->next_tree;
\& Function: Get the next tree from the factory
\& Returns : L<Bio::Tree::TreeI>
\& Args    : none
.Ve
.SS "get_trees"
.IX Subsection "get_trees"
.Vb 5
\& Title   : get_trees
\& Usage   : my @trees = $result\->get_trees;
\& Function: Get all the parsed trees as an array
\& Returns : Array of trees
\& Args    : none
.Ve
.SS "rewind_tree_iterator"
.IX Subsection "rewind_tree_iterator"
.Vb 6
\& Title   : rewind_tree_iterator
\& Usage   : $result\->rewind_tree_iterator()
\& Function: Rewinds the tree iterator so that next_tree can be
\&           called again from the beginning
\& Returns : none
\& Args    : none
.Ve
.SS "add_tree"
.IX Subsection "add_tree"
.Vb 5
\& Title   : add_tree
\& Usage   : $result\->add_tree($tree);
\& Function: Adds a tree
\& Returns : integer which is the number of trees stored
\& Args    : L<Bio::Tree::TreeI>
.Ve
.SS "shape_params"
.IX Subsection "shape_params"
.Vb 7
\& Title   : shape_params
\& Usage   : $obj\->shape_params($newval)
\& Function: Get/Set shape params for the distribution, \*(Aqalpha\*(Aq, \*(Aqbeta\*(Aq
\&           which is a hashref
\&           with 1 keys, \*(Aqp\*(Aq and \*(Aqq\*(Aq
\& Returns : value of shape_params (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "likelihood"
.IX Subsection "likelihood"
.Vb 5
\& Title   : likelihood
\& Usage   : $obj\->likelihood($newval)
\& Function: log likelihood
\& Returns : value of likelihood (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing lists"
.IX Subsection "Mailing lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org              \- General discussion
\&  http://bioperl.org/Support.html    \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bio\-tools\-phylo\-paml/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Stajich <jason@bioperl.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This software is copyright (c) by Jason Stajich <jason@bioperl.org>.
.PP
This software is available under the same terms as the perl 5 programming language system itself.
