.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Matrices::TypeSafeData 3"
.TH Bio::Phylo::Matrices::TypeSafeData 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Matrices::TypeSafeData \- Superclass for objects that contain
character data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # No direct usage
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a superclass for objects holding character data. Objects that inherit
from this class (typically matrices and datum objects) yield functionality to
handle datatype objects and use them to validate data such as \s-1DNA\s0 sequences,
continuous data etc.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
TypeSafeData constructor.
.Sp
.Vb 11
\& Type    : Constructor
\& Title   : new
\& Usage   : No direct usage, is called by child class;
\& Function: Instantiates a Bio::Phylo::Matrices::TypeSafeData
\& Returns : a Bio::Phylo::Matrices::TypeSafeData child class
\& Args    : \-type        => (data type \- required)
\&           Optional:
\&           \-missing     => (the symbol for missing data)
\&           \-gap         => (the symbol for gaps)
\&           \-lookup      => (a character state lookup hash)
\&           \-type_object => (a datatype object)
.Ve
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_type()\fR" 4
.IX Item "set_type()"
Set data type.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : set_type
\& Usage   : $obj\->set_type($type);
\& Function: Sets the object\*(Aqs datatype.
\& Returns : Modified object.
\& Args    : Argument must be a string, one of
\&           continuous, custom, dna, mixed,
\&           protein, restriction, rna, standard
.Ve
.IP "\fIset_missing()\fR" 4
.IX Item "set_missing()"
Set missing data symbol.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_missing
\& Usage   : $obj\->set_missing(\*(Aq?\*(Aq);
\& Function: Sets the symbol for missing data
\& Returns : Modified object.
\& Args    : Argument must be a single
\&           character, default is \*(Aq?\*(Aq
.Ve
.IP "\fIset_gap()\fR" 4
.IX Item "set_gap()"
Set gap data symbol.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_gap
\& Usage   : $obj\->set_gap(\*(Aq\-\*(Aq);
\& Function: Sets the symbol for gaps
\& Returns : Modified object.
\& Args    : Argument must be a single
\&           character, default is \*(Aq\-\*(Aq
.Ve
.IP "\fIset_lookup()\fR" 4
.IX Item "set_lookup()"
Set ambiguity lookup table.
.Sp
.Vb 11
\& Type    : Mutator
\& Title   : set_lookup
\& Usage   : $obj\->set_gap($hashref);
\& Function: Sets the symbol for gaps
\& Returns : Modified object.
\& Args    : Argument must be a hash
\&           reference that maps allowed
\&           single character symbols
\&           (including ambiguity symbols)
\&           onto the equivalent set of
\&           non\-ambiguous symbols
.Ve
.IP "\fIset_type_object()\fR" 4
.IX Item "set_type_object()"
Set data type object.
.Sp
.Vb 7
\& Type    : Mutator
\& Title   : set_type_object
\& Usage   : $obj\->set_gap($obj);
\& Function: Sets the datatype object
\& Returns : Modified object.
\& Args    : Argument must be a subclass
\&           of Bio::Phylo::Matrices::Datatype
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_type()\fR" 4
.IX Item "get_type()"
Get data type.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_type
\& Usage   : my $type = $obj\->get_type;
\& Function: Returns the object\*(Aqs datatype
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_missing()\fR" 4
.IX Item "get_missing()"
Get missing data symbol.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_missing
\& Usage   : my $missing = $obj\->get_missing;
\& Function: Returns the object\*(Aqs missing data symbol
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_gap()\fR" 4
.IX Item "get_gap()"
Get gap symbol.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_gap
\& Usage   : my $gap = $obj\->get_gap;
\& Function: Returns the object\*(Aqs gap symbol
\& Returns : A string
\& Args    : None
.Ve
.IP "\fIget_lookup()\fR" 4
.IX Item "get_lookup()"
Get ambiguity lookup table.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_lookup
\& Usage   : my $lookup = $obj\->get_lookup;
\& Function: Returns the object\*(Aqs lookup hash
\& Returns : A hash reference
\& Args    : None
.Ve
.IP "\fIget_type_object()\fR" 4
.IX Item "get_type_object()"
Get data type object.
.Sp
.Vb 6
\& Type    : Accessor
\& Title   : get_type_object
\& Usage   : my $obj = $obj\->get_type_object;
\& Function: Returns the object\*(Aqs linked datatype object
\& Returns : A subclass of Bio::Phylo::Matrices::Datatype
\& Args    : None
.Ve
.SS "\s-1INTERFACE METHODS\s0"
.IX Subsection "INTERFACE METHODS"
.IP "\fIvalidate()\fR" 4
.IX Item "validate()"
Validates the object's contents
.Sp
.Vb 8
\& Type    : Interface method
\& Title   : validate
\& Usage   : $obj\->validate
\& Function: Validates the object\*(Aqs contents
\& Returns : True or throws Bio::Phylo::Util::Exceptions::InvalidData
\& Args    : None
\& Comments: This is an abstract method, i.e. this class doesn\*(Aqt
\&           implement the method, child classes have to
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Listable" 4
.IX Item "Bio::Phylo::Listable"
This object inherits from Bio::Phylo::Listable, so the methods defined 
therein are also applicable to Bio::Phylo::Matrices::TypeSafeData objects.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
