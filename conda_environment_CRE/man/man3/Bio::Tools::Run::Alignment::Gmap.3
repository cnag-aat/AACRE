.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Alignment::Gmap 3"
.TH Bio::Tools::Run::Alignment::Gmap 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Alignment::Gmap \- Wrapper for running gmap.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::Tools::Run::Alignment::Gmap;
\&  use Bio::SeqIO;
\&
\&  my $sio = Bio::SeqIO\->new(\-file=>$filename ,\-format=>\*(Aqfasta\*(Aq);
\&  my @seq;
\&  while(my $seq = $sio\->next_seq()){
\&    push @seq,$seq;
\&  }
\&  my $mapper =Bio::Tools::Run::Gmap\->new();
\&  my $result = $mapper\->run(\e@seq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bioperl-run wrapper around gmap.  See
<http://www.gene.com/share/gmap/> for information about gmap.
.PP
It requires a reference to an array of bioperl SeqI objects and
returns a reference to a filehandle from which the gmap output can be
read.
.PP
One can explicitly set the name of the genome database (defaults to
\&\s-1NHGD_R36\s0) using the '\fIgenome_db()\fR' method.  One can also explicitly set
the flags that are passed to gmap (defaults to '\-f 9 \-5 \-e') using the
\&'\fIflags()\fR' method.
.PP
The name of the gmap executable can be overridden using the
\&\fIprogram_name()\fR method and the directory in which to find that
executable can be overridden using the \fIprogram_dir()\fR method.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- George Hartzell"
.IX Header "AUTHOR - George Hartzell"
Email hartzell@alerce.com
.PP
Describe contact details here
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::Run::Alignment::Gmap();
\& Function: Builds a new Bio::Tools::Run::Alignment::Gmap object
\& Returns : an instance of Bio::Tools::Run::Alignment::Gmap
\& Args    :
.Ve
.SS "version"
.IX Subsection "version"
.Vb 7
\& Title   : version
\& Usage   : print "gmap version: " . $mapper\->version() . "\en";
\& Function: retrieves and returns the version of the gmap package.
\& Example :
\& Returns : scalar string containing the version number.  Probably looks
\&           like YYYY\-MM\-DD.
\& Args    : none.
.Ve
.SS "program_name"
.IX Subsection "program_name"
.Vb 7
\& Title   : program_name
\& Usage   : $mapper\->program_name(\*(Aqgmap\-dev\*(Aq);
\&           my $pname = $mapper\->program_name();
\& Function: sets/gets the name of the program to run.
\& Returns : string representing the name of the executable.
\& Args    : [optional] string representing the name of the executable
\&           to set.
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 7
\& Title   : program_dir
\& Usage   : $mapper\->program_dir(\*(Aq/usr/local/sandbox/gmap/bin\*(Aq);
\&           my $pdir = $mapper\->program_dir();
\& Function: sets/gets the directory path in which
\&           to find the gmap executable.
\& Returns : string representing the path to the directory.
\& Args    : [optional] string representing the directory path to set.
.Ve
.SS "input_file"
.IX Subsection "input_file"
.Vb 7
\& Title   : input_file
\& Usage   : $mapper\->input_file(\*(Aq/tmp/moose.fasta\*(Aq);
\&           my $filename = $mapper\->input_file();
\& Function: sets/gets the name of a file containing sequences
\&           to be mapped.
\& Returns : string containing the name of the query sequence.
\& Args    : [optional] string representing the directory path to set.
.Ve
.SS "genome_db"
.IX Subsection "genome_db"
.Vb 7
\& Title   : genome_db
\& Usage   : $mapper\->genome_db(\*(AqNHGD_R36\*(Aq);
\&           my $genome_db = $mapper\->genome_db();
\& Function: sets/gets the name of the genome database, this will be
\&           passed to gmap using its \*(Aq\-d\*(Aq flag.
\& Returns : name of the genome database.
\& Args    : [optional] string representing the genome db to set.
.Ve
.SS "flags"
.IX Subsection "flags"
.Vb 6
\& Title   : flags
\& Usage   : $mapper\->flags(\*(Aq\-A \-e \-5\*(Aq);
\&           my $flags = $mapper\->flags();
\& Function: sets/gets the flags that will be passed to gmap.
\& Returns : the current value of the flags that will be passed to gmap.
\& Args    : [optional] the flags to set.
.Ve
.SS "run"
.IX Subsection "run"
.Vb 6
\& Title   : run
\& Usage   : $mapper\->run()
\& Function: runs gmap
\& Example :
\& Returns : a file handle, opened for reading, for gmap\*(Aqs output.
\& Args    : An array of references query sequences (as Bio::Seq objects)
.Ve
.SS "_build_fasta_input_file"
.IX Subsection "_build_fasta_input_file"
.Vb 6
\& Title   : _build_fasta_input_file
\& Usage   : my $seq_file = $self\->_build_fasta_input_file(@_);
\& Function:
\& Example :
\& Returns : The name of the temporary file that contains the sequence.
\& Args    : A reference to an array of Bio::Seq objects.
.Ve
