.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Ace::Sequence::Homol 3"
.TH Ace::Sequence::Homol 3 "2001-09-17" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Ace::Sequence::Homol \- Temporary Sequence Homology Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Get all similarity features from an Ace::Sequence
\&    @homol = $seq\->features(\*(AqSimilarity\*(Aq);
\&
\&    # sort by score
\&    @sorted = sort { $a\->score <=> $b\->score } @homol;
\&
\&    # the last one has the highest score
\&    $best = $sorted[$#sorted];
\&
\&    # fetch its associated Ace::Sequence::Homol
\&    $homol = $best\->target;
\&
\&    # print out the sequence name, DNA, start and end
\&    print $homol\->name,\*(Aq \*(Aq,$homol\->start,\*(Aq\-\*(Aq,$homol\->end,"\en";
\&    print $homol\->asDNA;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIAce::Sequence::Homol\fR is a subclass of Ace::Object (\fBnot\fR
Ace::Sequence) which is specialized for returning information about
a \s-1DNA\s0 or protein homology.  This is a temporary placeholder for a more
sophisticated homology class which will include support for
alignments.
.SH "OBJECT CREATION"
.IX Header "OBJECT CREATION"
You will not ordinarily create an \fIAce::Sequence::Homol\fR object
directly.  Instead, objects will be created in response to an \fIinfo()\fR
or \fIgroup()\fR method call on a similarity feature in an
\&\fIAce::Sequence::Feature\fR object.  If you wish to create an
\&\fIAce::Sequence::Homol\fR object directly, please consult the source
code for the \fI\fInew()\fI\fR method.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
Most methods are inherited from \fIAce::Object\fR.  The following
methods are also supported:
.IP "\fIstart()\fR" 4
.IX Item "start()"
.Vb 1
\&  $start = $homol\->start;
.Ve
.Sp
Returns the start of the area that is similar to the
\&\fIAce::Sequence::Feature\fR from which his homology was derived.
Coordinates are relative to the target homology.
.IP "\fIend()\fR" 4
.IX Item "end()"
.Vb 1
\&  $end = $homol\->end;
.Ve
.Sp
Returns the end of the area that is similar to the
\&\fIAce::Sequence::Feature\fR from which his homology was derived.
Coordinates are relative to the target homology.
.IP "\fIasString()\fR" 4
.IX Item "asString()"
.Vb 1
\&  $label = $homol\->asString;
.Ve
.Sp
Returns a human-readable identifier describing the nature of the
feature.  The format is:
.Sp
.Vb 1
\& $name/$start\-$end
.Ve
.Sp
for example:
.Sp
.Vb 1
\& HUMGEN13/1\-67
.Ve
.Sp
This method is also called automatically when the object is treated in
a string context.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ace, Ace::Object,
Ace::Sequence,Ace::Sequence::FeatureList,
Ace::Sequence::Feature, \s-1GFF\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@w3.org> with extensive help from Jean
Thierry-Mieg <mieg@kaa.crbm.cnrs\-mop.fr>
.PP
Copyright (c) 1999, Lincoln D. Stein
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
