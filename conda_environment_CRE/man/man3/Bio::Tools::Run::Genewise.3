.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Genewise 3"
.TH Bio::Tools::Run::Genewise 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Genewise \- Object for predicting genes in a
given sequence given a protein
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Build a Genewise alignment factory
\&  my $factory = Bio::Tools::Run::Genewise\->new();
\&
\&  # Pass the factory 2 Bio:SeqI objects (in the order of query peptide
\&  # and target_genomic).
\&
\&  # @genes is an array of Bio::SeqFeature::Gene::GeneStructure objects
\&  my @genes = $factory\->run($protein_seq, $genomic_seq);
\&
\&  # Alternatively pass the factory a profile HMM filename and a
\&  # Bio:SeqI object (in the order of query HMM and target_genomic).
\&
\&  # Set hmmer switch first to tell genewise to expect an HMM
\&  $factory\->hmmer(1);
\&  my @genes = $factory\->run($hmmfile, $genomic_seq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Genewise is a gene prediction program developed by Ewan Birney
http://www.sanger.ac.uk/software/wise2.
.SS "Available Params:"
.IX Subsection "Available Params:"
\&\s-1NB:\s0 These should be passed without the '\-' or they will be ignored,
except switches such as 'hmmer' (which have no corresponding value)
which should be set on the factory object using the AUTOLOADed methods
of the same name.
.PP
.Vb 5
\&  Model    [\-codon,\-gene,\-cfreq,\-splice,\-subs,\-indel,\-intron,\-null]
\&  Alg      [\-kbyte,\-alg]
\&  HMM      [\-hmmer]
\&  Output   [\-gff,\-gener,\-alb,\-pal,\-block,\-divide]
\&  Standard [\-help,\-version,\-silent,\-quiet,\-errorlog]
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
 the bugs and their resolution.  Bug reports can be submitted via
 the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- FUGU Student Intern"
.IX Header "AUTHOR - FUGU Student Intern"
Email: fugui@worf.fugu\-sg.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich jason\-AT\-bioperl_DOT_org
Keith James kdj@sanger.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory>program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   : exit if $prog\->version() < 1.8
\& Function: Determine the version number of the program
\& Example :
\& Returns : float or undef
\& Args    : none
.Ve
.SS "predict_genes"
.IX Subsection "predict_genes"
.Vb 7
\& Title   : predict_genes
\& Usage   : DEPRECATED. Use $factory\->run($seq1,$seq2)
\& Function: Predict genes
\& Returns : A Bio::Seqfeature::Gene:GeneStructure object
\& Args    : Name of a file containing a set of 2 fasta sequences in the order of
\&           peptide and genomic sequences
\&           or else 2  Bio::Seq objects.
.Ve
.PP
Throws an exception if argument is not either a string (eg a filename)
or 2 Bio::Seq objects.  If arguments are strings, throws exception if
file corresponding to string name can not be found.
.SS "run"
.IX Subsection "run"
.Vb 9
\& Title   : run
\& Usage   : 2 sequence objects
\&           $genes = $factory\->run($seq1, $seq2);
\& Function: run
\& Returns : A Bio::Seqfeature::Gene:GeneStructure object
\& Args    : Names of a files each containing a fasta sequence in the order
\&           of either (peptide sequence, genomic sequence) or (profile HMM,
\&           genomic sequence). Alternatively any of the fasta sequence
\&           filenames may be substituted with a Bio::Seq object.
.Ve
.PP
Throws an exception if argument is not either a string (eg a filename)
or Bio::Seq objects. If arguments are strings, throws exception if
file corresponding to string name can not be found. Also throws an
exception if a profile \s-1HMM\s0 is expected (the \-hmmer genewise switch has
been set).
.SS "_run"
.IX Subsection "_run"
.Vb 6
\& Title   : _run
\& Usage   : Internal function, not to be called directly
\& Function: Makes actual system call to a genewise program
\& Example :
\& Returns : L<Bio::SeqFeature::Gene::GeneStructure>
\& Args    : Name of a files containing 2 sequences in the order of peptide and genomic
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 6
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly
\& Function:  creates a string of params to be used in the command string
\& Example :
\& Returns :  string of params
\& Args    :
.Ve
.SS "_query_pep_seq"
.IX Subsection "_query_pep_seq"
.Vb 6
\& Title   :  _query_pep_seq
\& Usage   :  Internal function, not to be called directly
\& Function:  get/set for the query sequence
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "_subject_dna_seq"
.IX Subsection "_subject_dna_seq"
.Vb 5
\& Title   :  _subject_dna_seq
\& Usage   :  Internal function, not to be called directly
\& Function:  get/set for the subject sequence
\& Example :
\& Returns :
\&
\& Args    :
.Ve
