.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::Taxa 3"
.TH Bio::Phylo::Taxa 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::Taxa \- Container of taxon objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Phylo::Factory;
\& my $fac = Bio::Phylo::Factory\->new;
\&
\& # A mesquite\-style default
\& # taxa block for 10 taxa.
\& my $taxa  = $fac\->create_taxa;
\& for my $i ( 1 .. 10 ) {
\&     $taxa\->insert( $fac\->create_taxon( \*(Aq\-name\*(Aq => "taxon_${i}" ) );
\& }
\& 
\& # prints a taxa block in nexus format
\& print $taxa\->to_nexus;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Phylo::Taxa object models a set of operational taxonomic units. The
object subclasses the Bio::Phylo::Listable object, and so the filtering
methods of that class are available.
.PP
A taxa object can link to multiple forest and matrix objects.
.SH "METHODS"
.IX Header "METHODS"
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.IP "\fInew()\fR" 4
.IX Item "new()"
Taxa constructor.
.Sp
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : my $taxa = Bio::Phylo::Taxa\->new;
\& Function: Instantiates a Bio::Phylo::Taxa object.
\& Returns : A Bio::Phylo::Taxa object.
\& Args    : none.
.Ve
.SS "\s-1MUTATORS\s0"
.IX Subsection "MUTATORS"
.IP "\fIset_forest()\fR" 4
.IX Item "set_forest()"
Sets associated Bio::Phylo::Forest object.
.Sp
.Vb 10
\& Type    : Mutator
\& Title   : set_forest
\& Usage   : $taxa\->set_forest( $forest );
\& Function: Associates forest with the 
\&           invocant taxa object (i.e. 
\&           creates reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Forest object 
\& Comments: A taxa object can link to multiple 
\&           forest and matrix objects.
.Ve
.IP "\fIset_matrix()\fR" 4
.IX Item "set_matrix()"
Sets associated Bio::Phylo::Matrices::Matrix object.
.Sp
.Vb 10
\& Type    : Mutator
\& Title   : set_matrix
\& Usage   : $taxa\->set_matrix($matrix);
\& Function: Associates matrix with the 
\&           invocant taxa object (i.e. 
\&           creates reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Matrices::Matrix object
\& Comments: A taxa object can link to multiple 
\&           forest and matrix objects.
.Ve
.IP "\fIunset_forest()\fR" 4
.IX Item "unset_forest()"
Removes association with argument Bio::Phylo::Forest object.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : unset_forest
\& Usage   : $taxa\->unset_forest($forest);
\& Function: Disassociates forest from the 
\&           invocant taxa object (i.e. 
\&           removes reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Forest object
.Ve
.IP "\fIunset_matrix()\fR" 4
.IX Item "unset_matrix()"
Removes association with Bio::Phylo::Matrices::Matrix object.
.Sp
.Vb 8
\& Type    : Mutator
\& Title   : unset_matrix
\& Usage   : $taxa\->unset_matrix($matrix);
\& Function: Disassociates matrix from the 
\&           invocant taxa object (i.e. 
\&           removes reference).
\& Returns : Modified object.
\& Args    : A Bio::Phylo::Matrices::Matrix object
.Ve
.SS "\s-1ACCESSORS\s0"
.IX Subsection "ACCESSORS"
.IP "\fIget_forests()\fR" 4
.IX Item "get_forests()"
Gets all associated Bio::Phylo::Forest objects.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_forests
\& Usage   : @forests = @{ $taxa\->get_forests };
\& Function: Retrieves forests associated 
\&           with the current taxa object.
\& Returns : An ARRAY reference of 
\&           Bio::Phylo::Forest objects.
\& Args    : None.
.Ve
.IP "\fIget_matrices()\fR" 4
.IX Item "get_matrices()"
Gets all associated Bio::Phylo::Matrices::Matrix objects.
.Sp
.Vb 8
\& Type    : Accessor
\& Title   : get_matrices
\& Usage   : @matrices = @{ $taxa\->get_matrices };
\& Function: Retrieves matrices associated 
\&           with the current taxa object.
\& Returns : An ARRAY reference of 
\&           Bio::Phylo::Matrices::Matrix objects.
\& Args    : None.
.Ve
.IP "\fIget_ntax()\fR" 4
.IX Item "get_ntax()"
Gets number of contained Bio::Phylo::Taxa::Taxon objects.
.Sp
.Vb 7
\& Type    : Accessor
\& Title   : get_ntax
\& Usage   : my $ntax = $taxa\->get_ntax;
\& Function: Retrieves the number of taxa for the invocant.
\& Returns : INT
\& Args    : None.
\& Comments:
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "\fImerge_by_name()\fR" 4
.IX Item "merge_by_name()"
Merges argument Bio::Phylo::Taxa object with invocant.
.Sp
.Vb 11
\& Type    : Method
\& Title   : merge_by_name
\& Usage   : $merged = $taxa\->merge_by_name($other_taxa);
\& Function: Merges two or more taxa objects such that 
\&           internally different taxon objects 
\&           with the same name become a single
\&           object with the combined references 
\&           to datum objects and node objects 
\&           contained by the two.           
\& Returns : A merged Bio::Phylo::Taxa object.
\& Args    : Bio::Phylo::Taxa objects.
.Ve
.IP "\fImerge_by_meta()\fR" 4
.IX Item "merge_by_meta()"
Merges argument Bio::Phylo::Taxa object with invocant.
.Sp
.Vb 12
\& Type    : Method
\& Title   : merge_by_meta
\& Usage   : $taxa\->merge_by_name(\*(Aqdc:identifier\*(Aq,$other_taxa);
\& Function: Merges two taxa objects such that 
\&           internally different taxon objects 
\&           with the same annotation value become
\&           a single object with the combined references 
\&           to datum objects, node objects and
\&           metadata annotations contained by
\&           the two.           
\& Returns : A merged Bio::Phylo::Taxa object.
\& Args    : a CURIE predicate and Bio::Phylo::Taxa objects.
.Ve
.IP "\fIto_nexus()\fR" 4
.IX Item "to_nexus()"
Serializes invocant to nexus format.
.Sp
.Vb 7
\& Type    : Format convertor
\& Title   : to_nexus
\& Usage   : my $block = $taxa\->to_nexus;
\& Function: Converts $taxa into a nexus taxa block.
\& Returns : Nexus taxa block (SCALAR).
\& Args    : \-links => 1 (optional, adds \*(AqTITLE\*(Aq token)
\& Comments:
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
There is a mailing list at <https://groups.google.com/forum/#!forum/bio\-phylo> 
for any user or developer questions and discussions.
.IP "Bio::Phylo::Listable" 4
.IX Item "Bio::Phylo::Listable"
The Bio::Phylo::Taxa object inherits from the Bio::Phylo::Listable
object. Look there for more methods applicable to the taxa object.
.IP "Bio::Phylo::Manual" 4
.IX Item "Bio::Phylo::Manual"
Also see the manual: Bio::Phylo::Manual and <http://rutgervos.blogspot.com>.
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
