.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Ace::Sequence::Gene 3"
.TH Ace::Sequence::Gene 3 "2001-02-18" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Ace::Sequence::Gene \- Simple "Gene" Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # open database connection and get an Ace::Object sequence
\&    use Ace::Sequence;
\&
\&    # get a megabase from the middle of chromosome I
\&    $seq = Ace::Sequence\->new(\-name   => \*(AqCHROMOSOME_I,
\&                              \-db     => $db,
\&                              \-offset => 3_000_000,
\&                              \-length => 1_000_000);
\&
\&    # get all the genes
\&    @genes = $seq\->genes;
\&
\&    # get the exons from the first one
\&    @exons = $genes[0]\->exons;
\&
\&    # get the introns
\&    @introns = $genes[0]\->introns
\&
\&    # get the CDSs (NOT IMPLEMENTED YET!)
\&    @cds = $genes[0]\->cds;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ace::Sequence::Gene is a subclass of Ace::Sequence::Feature.  It
inherits all the methods of Ace::Sequence::Feature, but adds the
ability to retrieve the annotated introns and exons of the gene.
.SH "OBJECT CREATION"
.IX Header "OBJECT CREATION"
You will not ordinarily create an \fIAce::Sequence::Gene\fR object
directly.  Instead, objects will be created in response to a \fIgenes()\fR
call to an \fIAce::Sequence\fR object.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
Most methods are inherited from \fIAce::Sequence::Feature\fR.  The
following methods are also supported:
.IP "\fIexons()\fR" 4
.IX Item "exons()"
.Vb 1
\&  @exons = $gene\->exons;
.Ve
.Sp
Return a list of Ace::Sequence::Feature objects corresponding to
annotated exons.
.IP "\fIintrons()\fR" 4
.IX Item "introns()"
.Vb 1
\&  @introns = $gene\->introns;
.Ve
.Sp
Return a list of Ace::Sequence::Feature objects corresponding to
annotated introns.
.IP "\fIcds()\fR" 4
.IX Item "cds()"
.Vb 1
\&  @cds = $gene\->cds;
.Ve
.Sp
Return a list of Ace::Sequence::Feature objects corresponding to
coding sequence.  \s-1THIS IS NOT YET IMPLEMENTED.\s0
.IP "\fIrelative()\fR" 4
.IX Item "relative()"
.Vb 2
\&  $relative = $gene\->relative;
\&  $gene\->relative(1);
.Ve
.Sp
This turns on and off relative coordinates.  By default, the exons and
intron features will be returned in the coordinate system used by the
gene.  If \fIrelative()\fR is set to a true value, then coordinates will be
expressed as relative to the start of the gene.  The first exon will
(usually) be 1.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ace, Ace::Object, Ace::Sequence,Ace::Sequence::Homol,
Ace::Sequence::Feature, Ace::Sequence::FeatureList, \s-1GFF\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org> with extensive help from Jean
Thierry-Mieg <mieg@kaa.crbm.cnrs\-mop.fr>
.PP
Copyright (c) 1999, Lincoln D. Stein
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 148:" 4
.IX Item "Around line 148:"
You forgot a '=back' before '=head1'
