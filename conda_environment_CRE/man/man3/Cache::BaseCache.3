.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Cache::BaseCache 3"
.TH Cache::BaseCache 3 "2015-01-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cache::BaseCache \-\- abstract cache base class
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BaseCache provides functionality common to all instances of a cache.
It differs from the CacheUtils package insofar as it is designed to
be used as superclass for cache implementations.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Cache::BaseCache is to be used as a superclass for cache
implementations.  The most effective way to use BaseCache is to use
the protected _set_backend method, which will be used to retrieve the
persistence mechanism.  The subclass can then inherit the BaseCache's
implementation of get, set, etc.  However, due to the difficulty
inheriting static methods in Perl, the subclass will likely need to
explicitly implement Clear, Purge, and Size.  Also, a factory pattern
should be used to invoke the _complete_initialization routine after
the object is constructed.
.PP
.Vb 1
\&  package Cache::MyCache;
\&
\&  use vars qw( @ISA );
\&  use Cache::BaseCache;
\&  use Cache::MyBackend;
\&
\&  @ISA = qw( Cache::BaseCache );
\&
\&  sub new
\&  {
\&    my ( $self ) = _new( @_ );
\&
\&    $self\->_complete_initialization( );
\&
\&    return $self;
\&  }
\&
\&  sub _new
\&  {
\&    my ( $proto, $p_options_hash_ref ) = @_;
\&    my $class = ref( $proto ) || $proto;
\&    my $self = $class\->SUPER::_new( $p_options_hash_ref );
\&    $self\->_set_backend( new Cache::MyBackend( ) );
\&    return $self;
\&  }
\&
\&
\&  sub Clear
\&  {
\&    foreach my $namespace ( _Namespaces( ) )
\&    {
\&      _Get_Backend( )\->delete_namespace( $namespace );
\&    }
\&  }
\&
\&
\&  sub Purge
\&  {
\&    foreach my $namespace ( _Namespaces( ) )
\&    {
\&      _Get_Cache( $namespace )\->purge( );
\&    }
\&  }
\&
\&
\&  sub Size
\&  {
\&    my $size = 0;
\&
\&    foreach my $namespace ( _Namespaces( ) )
\&    {
\&      $size += _Get_Cache( $namespace )\->size( );
\&    }
\&
\&    return $size;
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cache::Cache, Cache::FileCache, Cache::MemoryCache
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author: DeWitt Clinton <dewitt@unto.net>
.PP
Last author:     \f(CW$Author:\fR dclinton $
.PP
Copyright (C) 2001\-2003 DeWitt Clinton
