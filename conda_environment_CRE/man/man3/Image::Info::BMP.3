.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Image::Info::BMP 3"
.TH Image::Info::BMP 3 "2015-04-03" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::Info::BMP \- Windows Device Independent Bitmap support for Image::Info
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Image::Info qw(image_info dim);
\&
\& my $info = image_info("image.bmp");
\& if (my $error = $info\->{error}) {
\&     die "Can\*(Aqt parse image info: $error\en";
\& }
\& my $color = $info\->{color_type};
\&
\& my($w, $h) = dim($info);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module supplies the standard key names
except for Gamma, Interlace, LastModificationTime, as well as:
.IP "BMP_ColorsImportant" 4
.IX Item "BMP_ColorsImportant"
Specifies the number of color indexes that are required for
displaying the bitmap. If this value is zero, all colors are required.
.IP "BMP_Origin" 4
.IX Item "BMP_Origin"
If true the bitmap is a bottom-up \s-1DIB\s0 and its origin is the lower-left corner.
Otherwise, the bitmap is a top-down \s-1DIB\s0 and its origin is the upper-left 
corner.
.IP "ColorPalette" 4
.IX Item "ColorPalette"
Reference to an array of all colors used.
This key is only present if \f(CW\*(C`image_info\*(C'\fR is invoked
as \f(CW\*(C`image_info($file, ColorPalette=>1)\*(C'\fR.
.IP "ColorTableSize" 4
.IX Item "ColorTableSize"
The number of colors the image uses.
If 0 then this is a true color image.
The number of colors \fIavailable\fR is 2 ^ \fBBitsPerSample\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fIprocess_file()\fP"
.IX Subsection "process_file()"
.Vb 1
\&        $info\->process_file($source, $options);
.Ve
.PP
Processes one file and sets the found info fields in the \f(CW$info\fR object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Image::Info
.SH "NOTES"
.IX Header "NOTES"
For more information about \s-1BMP\s0 see <http://msdn.microsoft.com>.
.PP
Random notes:
.PP
.Vb 10
\&  warn if height is negative and compress is not RGB or BITFILEDS (0 or 3)
\&  ICO and CUR support?
\&  ### v5
\&  If bit depth is 0, it relies upon underlying JPG/PNG :\-(
\&  Extra Information
\&    DWORD        bV5RedMask; 
\&    DWORD        bV5GreenMask; 
\&    DWORD        bV5BlueMask; 
\&    DWORD        bV5AlphaMask; 
\&    DWORD        bV5CSType; 
\&    CIEXYZTRIPLE bV5EndPoints; #3*CIEXYZ #CIEXYZ = 3*FXPT2DOT30#FXPT2DOT30 = long
\&    DWORD        bV5GammaRed; 
\&    DWORD        bV5GammaGreen; 
\&    DWORD        bV5GammaBlue; 
\&    DWORD        bV5Intent; 
\&    DWORD        bV5ProfileData; 
\&    DWORD        bV5ProfileSize;
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Size mismatch" 4
.IX Item "Size mismatch"
The image may be correct, but the filesize does not match the internally stored
value.
.SH "BUGS"
.IX Header "BUGS"
The current implementation only functions on little-endian architectures.
Consequently erroneous data concerning compression (including
\&\fBfile_ext\fR and \fBfile_mime_type\fR) may be reported.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <belg4mit@mit.edu>/<webmaster@pthbb.org>
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
