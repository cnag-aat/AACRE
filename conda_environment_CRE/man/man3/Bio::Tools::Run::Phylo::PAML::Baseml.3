.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::PAML::Baseml 3"
.TH Bio::Tools::Run::Phylo::PAML::Baseml 3 "2018-07-01" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::PAML::Baseml \- Wrapper aroud the PAML program baseml
.SH "VERSION"
.IX Header "VERSION"
version 1.7.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Bio::Tools::Run::Phylo::PAML::Baseml;
\&  use Bio::AlignIO;
\&  my $alignio = Bio::AlignIO\->new(\-format => \*(Aqphylip\*(Aq,
\&                        \-file   => \*(Aqt/data/gf\-s85.phylip\*(Aq);
\&  my $aln = $alignio\->next_aln;
\&
\&  my $bml = Bio::Tools::Run::Phylo::PAML::Baseml\->new();
\&  $bml\->alignment($aln);
\&  my ($rc,$parser) = $bml\->run();
\&  while( my $result = $parser\->next_result ) {
\&    my @otus = $result\->get_seqs();
\&    my $MLmatrix = $result\->get_MLmatrix();
\&    # 0 and 1 correspond to the 1st and 2nd entry in the @otus array
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper around the baseml program of \s-1PAML\s0 (Phylogenetic
Analysis by Maximum Likelihood) package of Ziheng Yang.  See
http://abacus.gene.ucl.ac.uk/software/paml.html for more information.
.PP
This module will generate a proper baseml.ctl file and will run the
program in a separate temporary directory to avoid creating temp files
all over the place and will cleanup after itself..
.PP
The values you can feed to the configuration file are documented here.
.PP
.Vb 10
\&    \*(Aqnoisy\*(Aq   => [ 0..3,9],
\&    \*(Aqverbose\*(Aq => [ 0,1,2], # 0:concise, 1:detailed, 2:too much
\&    \*(Aqrunmode\*(Aq => [0..5],
\&    # for runmode
\&    # 0: use the provided tree structure(s) in treefile
\&    # 1,2: mean heuristic search by star\-decomposition alg
\&    # 2: starts from star tree while 1 reads a multifurcating
\&    # tree from treefile and ties to estimate the best
\&    # bifurcating tree
\&    # 3: stepwise addition
\&    # 4: NNI perturbation with the starting tree
\&    # Tree search DOES NOT WORK WELL so estimate a tree
\&    # using other programs first
\&    \*(Aqmodel\*(Aq   => \*(Aq0\*(Aq,
\&    # for model
\&    # 0: JC69 (uncorrected)
\&    # 1: K80  (transitions/transversion weighted differently)
\&    # 2: F81
\&    # 3: F84
\&    # 4: HKY85
\&    # 5: T92 (Tamura 92)
\&    # 6: TN93 (Tajima\-Nei) correct for multiple substitutions
\&    # 7: REV (aka GTR)
\&    # 8: UNREST
\&    # 9: REVu
\&    #10: UNRESTu
\&    # See Yang 1994 JME 39:105\-111
\&
\&    # model 8 special case of the REV model
\&    # model 9 is special case of unrestricted model
\&    # can also supply special rate parameters
\&    # so for example (from pamlDOC.pdf
\&    # $model  = \*(Aq8 [2 (CT) (AG)]\*(Aq; # TN93
\&    # $model  = \*(Aq8 [2 (TA AT TG CA CG) (AG)]\*(Aq; # TN93
\&    # $model  = \*(Aq9 [1 (TC CT AG GA)]; # K80
\&    # $model  = \*(Aq9 [0]\*(Aq; # JC69
\&    # $model  = \*(Aq9 [11 (TA) (TG) (CT) (CA) (CG) (AT) (AC) (AG) (GT) (GC) (GA)],
\&
\&    \*(Aqoutfile\*(Aq => \*(Aqmlb\*(Aq,
\&    \*(Aqfix_kappa\*(Aq=> [0,1], # 0:estimate kappa, 1:fix kappa
\&    \*(Aqkappa\*(Aq    => \*(Aq2.5\*(Aq, # initial or fixed kappa
\&    \*(Aqfix_alpha\*(Aq=> [1,0], # 0: estimate gamma shape param
\&    # 1: fix it at alpha
\&    \*(Aqalpha\*(Aq    => \*(Aq0\*(Aq, # initial of fixed alpha
\&    # 0: infinity (constant rate)
\&    \*(AqMalpha\*(Aq   => [0,1], # different alphas for genes
\&
\&    \*(Aqfix_rho\*(Aq=> [1,0], # 0: estimate gamma shape param
\&                                  # 1: fix it at alpha
\&    \*(Aqrho\*(Aq    => \*(Aq0\*(Aq, # initial of fixed alpha
\&    # 0: infinity (constant rate)
\&
\&    \*(AqncatG\*(Aq    => \*(Aq5\*(Aq, # number of categories in the dD,AdG, or nparkK models of rates
\&    \*(AqnparK\*(Aq    => [0..4], # rate\-class models
\&    # 1:rk 2:rk&fK
\&    # 3:rK&MK(1/K) 4:rK&MK
\&    \*(Aqnhomo\*(Aq    => [0..4], # 0 & 1: homogeneous,
\&    # 2: kappa for brances
\&    # 3:N1 4:N2
\&    \*(AqgetSE\*(Aq    => [0,1],
\&    \*(AqRateAncestor\*(Aq => [1,0,2], # rates (alpha > 0) or
\&    # ancestral states
\&    \*(Aqcleandata\*(Aq => [1,0], # remove sites with
\&    # ambiguity data (1:yes or 0:no)
\&
\&    \*(Aqfix_blength\*(Aq => [\-1,0,1,2], # 0: ignore, \-1: random,
\&    # 1: initial, 2: fixed
\&
\&    # \*(Aqicode\*(Aq    => [ 0..10], # (with RateAncestor=1.
\&    #try "GC" in data,model=4,Mgene=4)
\&    \*(Aqndata\*(Aq    => [5,1..10],
\&    \*(Aqclock\*(Aq    => [0..3], # 0: no clock, 1: clock, 2: local clock, 3: CombinedAnalysis
\&    \*(AqSmall_Diff\*(Aq => \*(Aq1e\-6\*(Aq, #underflow issues?
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $obj\->program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "error_string"
.IX Subsection "error_string"
.Vb 5
\& Title   : error_string
\& Usage   : $obj\->error_string($newval)
\& Function: Where the output from the last analysus run is stored.
\& Returns : value of error_string
\& Args    : newvalue (optional)
.Ve
.SS "alignment"
.IX Subsection "alignment"
.Vb 8
\& Title   : alignment
\& Usage   : $baseml\->alignment($aln);
\& Function: Get/Set the L<Bio::Align::AlignI> object
\& Returns : L<Bio::Align::AlignI> object
\& Args    : [optional] L<Bio::Align::AlignI>
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\& See also: L<Bio::SimpleAlign>
.Ve
.SS "tree"
.IX Subsection "tree"
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function:
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $baseml\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Run::Phylo::PAML::Baseml\->new();
\& Function: Builds a new Bio::Tools::Run::Phylo::PAML::Baseml object
\& Returns : Bio::Tools::Run::Phylo::PAML::Baseml
\& Args    : \-alignment => the L<Bio::Align::AlignI> object
\&           \-tree => the L<Bio::Tree::TreeI> object if you want to use runmode
\&                    0 or 1
\&           \-save_tempfiles => boolean to save the generated tempfiles and
\&                              NOT cleanup after onesself (default FALSE)
.Ve
.SS "run"
.IX Subsection "run"
.Vb 10
\& Title   : run
\& Usage   : $yn\->run();
\& Function: run the Baseml analysis using the default or updated parameters
\&           the alignment parameter must have been set
\& Returns : 3 values,
\&           $rc = 1 for success, 0 for errors
\&           hash reference of the Yang calculated Ka/Ks values
\&                    this is a set of pairwise observations keyed as
\&                    sequencenameA\->sequencenameB\->datatype
\&           hash reference same as the previous one except it for the
\&           Nei and Gojobori calculated Ka,Ks,omega values
\& Args    : optionally, a value appropriate for alignment() and one for tree()
\& NB      : Since Baseml doesn\*(Aqt handle spaces in tree node ids, if a tree is
\&           in use spaces will be converted to underscores in both the tree node
\&           ids and alignment sequence ids.
.Ve
.SS "get_parameters"
.IX Subsection "get_parameters"
.Vb 5
\& Title   : get_parameters
\& Usage   : my %params = $self\->get_parameters();
\& Function: returns the list of parameters as a hash
\& Returns : associative array keyed on parameter names
\& Args    : none
.Ve
.SS "set_parameter"
.IX Subsection "set_parameter"
.Vb 11
\& Title   : set_parameter
\& Usage   : $baseml\->set_parameter($param,$val);
\& Function: Sets a baseml parameter, will be validated against
\&           the valid values as set in the %VALIDVALUES class variable.
\&           The checks can be ignored if on turns of param checks like this:
\&             $baseml\->no_param_checks(1)
\& Returns : boolean if set was success, if verbose is set to \-1
\&           then no warning will be reported
\& Args    : $paramname => name of the parameter
\&           $value     => value to set the parameter to
\& See also: L<no_param_checks()>
.Ve
.SS "set_default_parameters"
.IX Subsection "set_default_parameters"
.Vb 9
\& Title   : set_default_parameters
\& Usage   : $baseml\->set_default_parameters(0);
\& Function: (Re)set the default parameters from the defaults
\&           (the first value in each array in the
\&        %VALIDVALUES class variable)
\& Returns : none
\& Args    : boolean: keep existing parameter values
\& NB      : using this isn\*(Aqt an especially good idea! You don\*(Aqt need to do
\&           anything to end up using default parameters: hence \*(Aqdefault\*(Aq!
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $baseml\->cleanup();
\& Function: Will cleanup the tempdir directory after a PAML run
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
.SH "Bio::Tools::Run::Wrapper methods"
.IX Header "Bio::Tools::Run::Wrapper methods"
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing lists"
.IX Subsection "Mailing lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org              \- General discussion
\&  http://bioperl.org/Support.html    \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting bugs"
.IX Subsection "Reporting bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bio\-tools\-phylo\-paml/issues
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Jason Stajich <jason@bioperl.org>
.PP
Sendu Bala <bix@sendu.me.uk>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This software is copyright (c) by Jason Stajich <jason@bioperl.org>.
.PP
This software is available under the same terms as the perl 5 programming language system itself.
