.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Alignment::Pal2Nal 3"
.TH Bio::Tools::Run::Alignment::Pal2Nal 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Alignment::Pal2Nal \- Wrapper for Pal2Nal
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Run::Alignment::Pal2Nal;
\&
\&  # Make a Pal2Nal factory
\&  $factory = Bio::Tools::Run::Alignment::Pal2Nal\->new();
\&
\&  # Run Pal2Nal with a protein alignment file and a multi\-fasta nucleotide
\&  # file
\&  my $aln = $factory\->run($protein_alignfilename, $nucleotide_filename);
\&
\&  # or with Bioperl objects
\&  $aln = $factory\->run($protein_bio_simplalign, [$nucleotide_bio_seq1,
\&                                                 $nucleotide_bio_seq2]);
\&
\&  # combinations of files/ objects are possible
\&
\&  # $aln isa Bio::SimpleAlign of the nucleotide sequences aligned according to
\&  # the protein alignment
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper for running the Pal2Nal perl script by Mikita Suyama. You
can get details here: http://coot.embl.de/pal2nal/. Pal2Nal is used for aligning
a set of nucleotide sequences based on an alignment of their translations.
.PP
You can try supplying normal pal2nal command-line arguments to \fInew()\fR, eg.
\&\fInew()\fR or calling arg-named methods (excluding the initial hyphen, eg.
\&\f(CW$factory\fR\->(1) to set the \- arg).
.PP
You will need to enable this Pal2Nal wrapper to find the pal2nal.pl script.
This can be done in (at least) three ways:
.PP
.Vb 4
\& 1. Make sure the script is in your path.
\& 2. Define an environmental variable PAL2NALDIR which is a 
\&    directory which contains the script:
\&    In bash:
\&
\&    export PAL2NALDIR=/home/username/pal2nal/
\&
\&    In csh/tcsh:
\&
\&    setenv PAL2NALDIR /home/username/pal2nal
\&
\& 3. Include a definition of an environmental variable PAL2NALDIR in
\&    every script that will use this Pal2Nal wrapper module, e.g.:
\&
\&    BEGIN { $ENV{PAL2NALDIR} = \*(Aq/home/username/pal2nal/\*(Aq }
\&    use Bio::Tools::Run::Alignment::Pal2Nal;
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory>program_name()
\& Function: holds the program name
\& Returns : string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns : string
\& Args    : None
.Ve
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : $factory = Bio::Tools::Run::Alignment::Pal2Nal\->new()
\& Function: creates a new Pal2Nal factory.
\& Returns : Bio::Tools::Run::Alignment::Pal2Nal
\& Args    : Most options understood by pal2nal.pl can be supplied as key =>
\&           value pairs.
\&
\&           These options can NOT be used with this wrapper:
\&           \-output
\&           \-html
\&           \-h
\&           \-nostderr
.Ve
.SS "run"
.IX Subsection "run"
.Vb 10
\& Title   : run
\& Usage   : $result = $factory\->run($protein_align_file, $multi_fasta_nucleotide);
\&           \-or\-
\&           $result = $factory\->run($prot_align_object, [$bioseq_object1, ...]);
\& Function: Runs pal2nal on a protein alignment and set of nucleotide sequences.
\& Returns : Bio::SimpleAlign;
\& Args    : The first argument represents a protein alignment, the second
\&           argument a set of nucleotide sequences.
\&           The alignment can be provided as an alignment file readable by
\&           Bio::AlignIO, or a Bio::Align::AlignI compliant object (eg. a
\&           Bio::SimpleAlign).
\&           The nucleotide sequences can be provided as a single filename of a
\&           fasta file containing multiple nucleotide sequences, or an array ref
\&           of filenames, each file containing one sequence. Alternatively, an
\&           array ref of Bio::PrimarySeqI compliant objects can be supplied.
\&           
\&           In all cases, the protein alignment sequence names must correspond to
\&           the names of the supplied nucleotide sequences.
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 5
\& Title   : _setparams
\& Usage   : Internal function, not to be called directly
\& Function: Creates a string of params to be used in the command string
\& Returns : string of params
\& Args    : alignment and tree file names
.Ve
