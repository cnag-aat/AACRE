.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::Phylip::Consense 3"
.TH Bio::Tools::Run::Phylo::Phylip::Consense 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::Phylip::Consense \- Wrapper for the phylip
program Consense
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Bio::Tools::Run::Phylo::Phylip::Consense;
\&  use Bio::Tools::Run::Phylo::Phylip::SeqBoot;
\&  use Bio::Tools::Run::Phylo::Phylip::ProtDist;
\&  use Bio::Tools::Run::Phylo::Phylip::Neighbor;
\&  use Bio::Tools::Run::Phylo::Phylip::DrawTree;
\&
\&
\&  #first get an alignment
\&  my $aio= Bio::AlignIO\->new(\-file=>$ARGV[0],\-format=>"clustalw");
\&  my $aln = $aio\->next_aln;
\&
\&  # To prevent truncation of sequence names by PHYLIP runs, use set_displayname_safe
\&  my ($aln_safe, $ref_name)=$aln\->set_displayname_safe();
\&
\&  #next use seqboot to generate multiple aligments
\&  my @params = (\*(Aqdatatype\*(Aq=>\*(AqSEQUENCE\*(Aq,\*(Aqreplicates\*(Aq=>10);
\&  my $seqboot_factory = Bio::Tools::Run::Phylo::Phylip::SeqBoot\->new(@params);
\&
\&  my $aln_ref= $seqboot_factory\->run($aln);
\&
\&  Or, for long sequence names:
\&
\&  my $aln_ref= $seqboot_factory\->run($aln_safe);
\&
\&  #next build distance matrices and construct trees
\&  my $pd_factory = Bio::Tools::Run::Phylo::Phylip::ProtDist\->new();
\&  my $ne_factory = Bio::Tools::Run::Phylo::Phylip::Neighbor\->new();
\&
\&  foreach my $a (@{$aln_ref}){
\&    my $mat = $pd_factory\->create_distance_matrix($a);
\&    push @tree, $ne_factory\->create_tree($mat);
\&  }
\&
\&  #now use consense to get a final tree
\&  my $con_factory = Bio::Tools::Run::Phylo::Phylip::Consense\->new();
\&
\&  #you may set outgroup either by the number representing the order in
\&  #which species are entered or by the name of the species
\&
\&  $con_factory\->outgroup(1);
\&  $con_factory\->outgroup(\*(AqHUMAN\*(Aq);
\&
\&  my $tree = $con_factory\->run(\e@tree);
\&
\&  # Restore original sequence names, after ALL phylip runs:
\&  my @nodes = $tree\->get_nodes();
\&  foreach my $nd (@nodes){
\&     $nd\->id($ref_name\->{$nd\->id_output}) if $nd\->is_Leaf;
\&  }
\&
\&  #now draw the tree
\&  my $draw_factory = Bio::Tools::Run::Phylo::Phylip::DrawTree\->new();
\&  my $image_filename = $draw_factory\->draw_tree($tree);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Wrapper for phylip consense program
.PP
Taken from phylip documentation...
.PP
\&\s-1CONSENSE\s0 reads a file of computer-readable trees and prints out 
(and may also write out onto a file) a consensus tree. At the moment
it carries out a family of consensus tree methods called the M[l] methods 
(Margush and McMorris, 1981). These include strict consensus
and majority rule consensus. Basically the consensus tree consists of monophyletic 
groups that occur as often as possible in the data.
.PP
More documentation on using Consense and setting parameters may be found
in the phylip package.
.PP
\&\s-1VERSION\s0 Support
.PP
This wrapper currently supports v3.5 of phylip. There is also support for v3.6 although
this is still experimental as v3.6 is still under alpha release and not all functionalities maybe supported.
.SH "PARAMETERS FOR Consense"
.IX Header "PARAMETERS FOR Consense"
.SS "\s-1TYPE\s0"
.IX Subsection "TYPE"
Title		: \s-1TYPE\s0 
Description	: (optional)
             Only available in phylip v3.6
.PP
.Vb 1
\&                  This program supports 3 types of consensus generation 
\&
\&                  MRe   : Majority Rule (extended) Any set of species that
\&                          appears in more than 50% of the trees is included. 
\&                          The program then considers the other sets of species 
\&                          in order of the frequency with which they have appeared, 
\&                          adding to the consensus tree any which are compatible 
\&                          with it until
\&
\&                  STRICT: A set of species must appear in all input trees to be 
\&                          included in the strict consensus tree. 
\&
\&                  MR    :  A set of species is included in the consensus tree 
\&                          if it is present in more than half of the input trees. 
\&
\&                  Ml    : The user is asked for a fraction between 0.5 and 1, and 
\&                          the program then includes in the consensus tree any set 
\&                          of species that occurs among the input trees more than 
\&                          that fraction of then time. The Strict consensus and the 
\&                          Majority Rule consensus are extreme cases of the M[l] consensus,
\&                          being for fractions of 1 and 0.5 respectively
\&
\&                  usage: my $factory = Bio::Tools::Run::Phylo::Phylip::Consense\->new(\-type=>"Ml 0.7");
\&
\&
\&             Defaults to MRe
.Ve
.SS "\s-1ROOTED\s0"
.IX Subsection "ROOTED"
.Vb 2
\&  Title: ROOTED 
\&  Description: (optional)
\&
\&             toggles between the default assumption that the input trees are unrooted trees and 
\&             the selection that specifies that the tree is to be treated as a rooted tree and not 
\&             re\-rooted. Otherwise the tree will be treated as outgroup\-rooted and will be
\&             re\-rooted automatically at the first species encountered on the first tree 
\&             (or at a species designated by the Outgroup option)
\&
\&             usage: my $factory = Bio::Tools::Run::Phylo::Phylip::Consense\->new(\-rooted=>1);
\&
\&             Defaults to unrooted
.Ve
.SS "\s-1OUTGROUP\s0"
.IX Subsection "OUTGROUP"
.Vb 2
\&  Title         : OUTGROUP
\&  Description   : (optional)
\&
\&                It is in effect only if the Rooted option selection is not in effect.
\&                The trees will be re\-rooted with a species of your choosing.
\&
\&                usage  my $factory = Bio::Tools::Run::Phylo::Phylip::Consense\->new(\-outgroup=>2);
\&
\&                Defaults to first species encountered.
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
Email shawnh@fugu\-sg.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $obj\->program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "idlength"
.IX Subsection "idlength"
.Vb 5
\& Title   : idlength 
\& Usage   : $obj\->idlength ($newval)
\& Function: 
\& Returns : value of idlength 
\& Args    : newvalue (optional)
.Ve
.SS "run"
.IX Subsection "run"
.Vb 5
\& Title   : run 
\& Usage   :
\&        $inputfilename = \*(Aqt/data/prot.treefile\*(Aq;
\&        $tree= $Consense_factory\->run($inputfilename);
\&or
\&
\&        $tree= $consense_factory\->run(\e@tree);
\&
\& Function: Create bootstrap sets of alignments
\& Example :
\& Returns : a L<Bio::Tree::Tree>
\& Args    : either a file containing trees in newick format
\&           or an array ref of L<Bio::Tree::Tree>
\&
\& Throws an exception if argument is not either a string (eg a
\& filename) or a Bio::Tree::TreeI object. If
\& argument is string, throws exception if file corresponding to string
\& name can not be found.
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 7
\& Title   :  _run
\& Usage   :  Internal function, not to be called directly        
\& Function:  makes actual system call to Consense program
\& Example :
\& Returns : an array ref of <Bio::Tree::Tree> 
\& Args    : Name of a file containing a set of tree in newick format 
\&           and a parameter string to be passed to Consense
.Ve
.SS "\fI_setinput()\fP"
.IX Subsection "_setinput()"
.Vb 6
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create input file for Consense program
\& Example :
\& Returns : name of file containing a trees in newick format
\& Args    : an array ref of Bio::Tree::Tree object or input file name
.Ve
.SS "\fInames()\fP"
.IX Subsection "names()"
.Vb 7
\& Title   :  names
\& Usage   :  $tree\->names(\e%names)
\& Function:  get/set for a hash ref for storing names in matrix
\&            with rank as values.
\& Example :
\& Returns : hash reference
\& Args    : hash reference
.Ve
.SS "\fI_setparams()\fP"
.IX Subsection "_setparams()"
.Vb 6
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create parameter inputs for Consense program
\& Example :
\& Returns : parameter string to be passed to Consense
\& Args    : name of calling object
.Ve
.SH "Bio::Tools::Run::Wrapper methods"
.IX Header "Bio::Tools::Run::Wrapper methods"
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values  
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function: 
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $Consense\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $codeml\->cleanup();
\& Function: Will cleanup the tempdir directory after a Consense run
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
