.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::Hyphy::Base 3"
.TH Bio::Tools::Run::Phylo::Hyphy::Base 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::Hyphy::Base \- Hyphy wrapping base methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1FIXME\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HyPhy ([Hy]pothesis Testing Using [Phy]logenies) package of Sergei
Kosakowsky Pond, Spencer V. Muse, Simon D.W. Frost and Art Poon.  See
http://www.hyphy.org for more information.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Albert Vilella"
.IX Header "AUTHOR - Albert Vilella"
Email avilella-at-gmail-dot-com
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "Default Values"
.IX Subsection "Default Values"
Valid and default values are listed below.  The default
values are always the first one listed.  These descriptions are
essentially lifted from the python wrapper or provided by the author.
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory\->program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "valid_values"
.IX Subsection "valid_values"
.Vb 6
\& Title   : valid_values
\& Usage   : $factory\->valid_values()
\& Function: returns the possible parameters
\& Returns:  an array holding all possible parameters (this needs to be specified per child class).
\&           Returns an empty array in the base class.
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::Tools::Run::Phylo::Hyphy\->new();
\& Function: Builds a new Bio::Tools::Run::Phylo::Hyphy object
\& Returns : Bio::Tools::Run::Phylo::Hyphy
\& Args    : \-alignment => the Bio::Align::AlignI object
\&           \-save_tempfiles => boolean to save the generated tempfiles and
\&                              NOT cleanup after onesself (default FALSE)
\&           \-tree => the Bio::Tree::TreeI object
\&           \-params => a hashref of parameters (all passed to set_parameter)
\&           \-executable => where the hyphy executable resides
.Ve
.PP
See also: Bio::Tree::TreeI, Bio::Align::AlignI
.SS "prepare"
.IX Subsection "prepare"
.Vb 7
\& Title   : prepare
\& Usage   : my $rundir = $hyphy\->prepare($aln);
\& Function: prepare the analysis using the default or updated parameters
\&           the alignment parameter must have been set
\& Returns : value of rundir
\& Args    : L<Bio::Align::AlignI> object,
\&           L<Bio::Tree::TreeI> object [optional]
.Ve
.SS "create_wrapper"
.IX Subsection "create_wrapper"
.Vb 6
\& Title   : create_wrapper
\& Usage   : $self\->create_wrapper
\& Function: It will create the wrapper file that interfaces with the analysis bf file
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "run"
.IX Subsection "run"
.Vb 5
\& Title   : run
\& Usage   : my ($rc,$results) = $BatchFile\->run();
\& Function: run the Hyphy analysis using the specified batchfile and its ordered parameters
\& Returns : Return code, Hash
\& Args    : none
.Ve
.SS "error_string"
.IX Subsection "error_string"
.Vb 5
\& Title   : error_string
\& Usage   : $obj\->error_string($newval)
\& Function: Where the output from the last analysus run is stored.
\& Returns : value of error_string
\& Args    : newvalue (optional)
.Ve
.SS "alignment"
.IX Subsection "alignment"
.Vb 7
\& Title   : alignment
\& Usage   : $hyphy\->alignment($aln);
\& Function: Get/Set the L<Bio::Align::AlignI> object
\& Returns : L<Bio::Align::AlignI> object
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\& See also: L<Bio::SimpleAlign>
.Ve
.SS "tree"
.IX Subsection "tree"
.Vb 5
\& Title   : tree
\& Usage   : $hyphy\->tree($tree);
\& Function: Get/Set the L<Bio::Tree::TreeI> object
\& Returns : L<Bio::Tree::TreeI>
\& Args    : [optional] $tree => L<Bio::Tree::TreeI>,
\&
\& Comment : We could potentially add support for running directly on a file
\&           but we shall keep it simple
\& See also: L<Bio::Tree::Tree>
.Ve
.SS "get_parameters"
.IX Subsection "get_parameters"
.Vb 5
\& Title   : get_parameters
\& Usage   : my %params = $self\->get_parameters();
\& Function: returns the list of parameters as a hash
\& Returns : associative array keyed on parameter names
\& Args    : none
.Ve
.SS "set_parameter"
.IX Subsection "set_parameter"
.Vb 11
\& Title   : set_parameter
\& Usage   : $hyphy\->set_parameter($param,$val);
\& Function: Sets a hyphy parameter, will be validated against
\&           the valid values.
\&           The checks can be ignored if one turns off param checks like this:
\&             $hyphy\->no_param_checks(1)
\& Returns : boolean if set was success, if verbose is set to \-1
\&           then no warning will be reported
\& Args    : $param => name of the parameter
\&           $value => value to set the parameter to
\& See also: L<no_param_checks()>
.Ve
.SS "set_default_parameters"
.IX Subsection "set_default_parameters"
.Vb 6
\& Title   : set_default_parameters
\& Usage   : $obj\->set_default_parameters();
\& Function: (Re)set the default parameters from the defaults
\&           (the first value in each array in the valid_values() array)
\& Returns : none
\& Args    : none
.Ve
.SS "update_ordered_parameters"
.IX Subsection "update_ordered_parameters"
.Vb 7
\& Title   : update_ordered_parameters
\& Usage   : $hyphy\->update_ordered_parameters(0);
\& Function: (Re)set the default parameters from the defaults
\&           (the first value in each array in the
\&           %VALIDVALUES class variable)
\& Returns : none
\& Args    : boolean: keep existing parameter values
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $hyphy\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "version"
.IX Subsection "version"
.Vb 5
\& Title   : version
\& Usage   : $obj\->version()
\& Function:  Returns the version string from HYPHY
\& Returns : string
\& Args    : none
.Ve
.SS "hyphy_lib_dir"
.IX Subsection "hyphy_lib_dir"
.Vb 5
\& Title   : hyphy_lib_dir
\& Usage   : $obj\->hyphy_lib_dir()
\& Function: Returns the HYPHY_LIB_DIRECTORY from HYPHY
\& Returns : string
\& Args    : none
.Ve
