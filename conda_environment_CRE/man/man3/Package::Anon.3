.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Package::Anon 3"
.TH Package::Anon 3 "2012-08-29" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Package::Anon \- Anonymous packages
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  my $stash = Package::Anon\->new;
\&  $stash\->add_method(get_answer => sub { 42 });
\&
\&  my $obj = $stash\->bless({});
\&
\&  $obj\->get_answer; # 42
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows for anonymous packages that are independent of the main
namespace and only available through an object instance, not by name.
.PP
.Vb 2
\&  # Declare an anonymous package using new()
\&  my $stash = Package::Anon\->new;
\&
\&  # Add behavior to the package
\&  $stash\->add_method(\*(Aqget_answer\*(Aq, sub{ return 42; });
\&
\&  # Create an instance of the anonymous package
\&  my $instance = $stash\->bless({});
\&
\&  # Call the method
\&  $instance\->get_answer(); # returns 42
.Ve
.PP
In \f(CW\*(C`$my_object\->do_stuff()\*(C'\fR Perl uses a the name of the class \f(CW$my_object\fR
is blessed into to resolve the function \f(CW\*(C`do_stuff()\*(C'\fR.
.PP
Packages created using Package::Anon exist outside of the \f(CW\*(C`main::\*(C'\fR namespace
and cannot be referenced by name. These packages are defined within stashes that
are only accessible through a reference rather than using a name.
.PP
Previous attempts to allow for anonymous packages in Perl use workarounds that
still ultimately result in references by named packages. Because Package::Anon
allows method dispatching without a name lookup, packages are truly anonymous.
.SH "METHODS"
.IX Header "METHODS"
.SS "new ($name?)"
.IX Subsection "new ($name?)"
.Vb 1
\&  my $stash = Package::Anon\->new;
\&
\&  my $stash = Package::Anon\->new(\*(AqFoo\*(Aq);
.Ve
.PP
Create a new anonymous package. The optional \f(CW$name\fR argument sets the stash's
name. This name only serves as an aid for debugging. The stash is not reachable
from the global symbol table by the given name.
.PP
\&\f(CW$name\fR defaults to \f(CW\*(C`_\|_ANON_\|_\*(C'\fR.
.SS "bless ($reference)"
.IX Subsection "bless ($reference)"
.Vb 1
\&  my $instance = $stash\->bless({});
.Ve
.PP
Bless a \f(CW$reference\fR into the anonymous package.
.ie n .SS "add_method ($name, $code)"
.el .SS "add_method ($name, \f(CW$code\fP)"
.IX Subsection "add_method ($name, $code)"
.Vb 1
\&  $stash\->add_method(foo => sub { return 42; });
.Ve
.PP
Register a new method in the anonymous package. \f(CW\*(C`add_method()\*(C'\fR is provided as a
convenience method for adding code symbols to slots in the anonymous stash. For
additional symbol table manipulation, see \*(L"\s-1SYMBOL TABLE MANIPULATION\*(R"\s0.
.SS "blessed ($obj)"
.IX Subsection "blessed ($obj)"
.Vb 1
\&  my $stash = Package::Anon\->blessed($obj);
.Ve
.PP
Returns a Package::Anon instance for the package the given \f(CW$obj\fR is blessed
into, or undef if \f(CW$obj\fR isn't an object.
.SS "install_glob ($name)"
.IX Subsection "install_glob ($name)"
.Vb 1
\&  my $gv = $stash\->install_glob(\*(Aqfoo\*(Aq);
.Ve
.PP
Create a glob with the given \f(CW$name\fR and install it under that \f(CW$name\fR within
the \f(CW$stash\fR. The returned glob can be used to install symbols into the
\&\f(CW$stash\fR. See \*(L"\s-1SYMBOL TABLE MANIPULATION\*(R"\s0 for examples.
.SH "EXPERIMENTAL METHODS"
.IX Header "EXPERIMENTAL METHODS"
These methods interact with the symbol table in ways that could cause unexpected
results in your programs. Please use them with caution.
.SS "create_glob ($name)"
.IX Subsection "create_glob ($name)"
.Vb 1
\&  my $gv = $stash\->create_glob(\*(Aqfoo\*(Aq);
.Ve
.PP
Creates a new glob with the name \f(CW$name\fR, pointing to \f(CW$stash\fR as its
stash. The created glob is not installed into the \f(CW$stash\fR.
.PP
This method implements functionality similar to Symbol::gensym, but
allows you to specify the name of the glob.
.SH "SYMBOL TABLE MANIPULATION"
.IX Header "SYMBOL TABLE MANIPULATION"
This module is intended to create anonymous packages with behavior, not data
members. Support for data members has been documented because the Glob \s-1API\s0
supports the addition of data types besides coderefs. Please use this module
with caution when creating data members in your anonymous packages.
.PP
.Vb 1
\&  add_method(\*(Aqget_answer\*(Aq, sub {return 42});
.Ve
.PP
is the same as:
.PP
.Vb 2
\&  my $gv = install_glob(\*(Aqget_answer\*(Aq);
\&  *$gv = sub { return 42 };
.Ve
.PP
For other data types:
.PP
.Vb 3
\&  *$gv = \e$foo # scalar
\&  *$gv = \e@foo # array
\&  *$gv = \e%foo # hash
.Ve
.PP
Currently, \f(CW\*(C`Package::Anon\*(C'\fR instances are blessed stash references, so the
following is possible:
.PP
.Vb 1
\&  $stash\->{$symbol_name} = *$gv;
.Ve
.PP
However, the exact details of how to get a hold of the actual stash reference
might change in the future.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Ricardo Signes <rjbs@cpan.org>
.IP "\(bu" 4
Jesse Luehrs <doy@tozt.net>
.IP "\(bu" 4
Augustina Blair <auggy@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Florian Ragwitz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
