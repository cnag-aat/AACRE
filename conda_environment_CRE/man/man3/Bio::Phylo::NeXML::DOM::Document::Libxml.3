.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bio::Phylo::NeXML::DOM::Document::Libxml 3"
.TH Bio::Phylo::NeXML::DOM::Document::Libxml 3 "2014-02-08" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phylo::NeXML::DOM::Document::Libxml \- XML DOM document mappings to the 
"XML::LibXML" package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Don't use directly; use Bio::Phylo::NeXML::DOM\->new( \-format => 'libxml' ) instead.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides mappings the methods specified in the 
Bio::Phylo::NeXML::DOM::Document abstract class to the \f(CW\*(C`XML::LibXML::Document\*(C'\fR
package.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark A. Jensen ( maj \-at\- fortinbras \-dot\- us )
.SS "Constructor"
.IX Subsection "Constructor"
.IP "\fInew()\fR" 4
.IX Item "new()"
.Vb 6
\& Type    : Constructor
\& Title   : new
\& Usage   : $doc = Bio::Phylo::NeXML::DOM::Document\->new(@args)
\& Function: Create a Document object using the underlying package
\& Returns : Document object or undef on fail
\& Args    : Package\-specific arguments
.Ve
.IP "\fIparse_document()\fR" 4
.IX Item "parse_document()"
.Vb 6
\& Type    : Factory method
\& Title   : parse_document
\& Usage   : $doc = $dom\->parse_document($text)
\& Function: Create a new XML DOM document from XML text
\& Returns : DOM document
\& Args    : An XML String
.Ve
.SS "Document property accessors/mutators"
.IX Subsection "Document property accessors/mutators"
.IP "\fIset_encoding()\fR" 4
.IX Item "set_encoding()"
.Vb 6
\& Type    : Mutator
\& Title   : set_encoding
\& Usage   : $doc\->set_encoding($enc)
\& Function: Set encoding for document
\& Returns : True on success
\& Args    : Encoding descriptor as string
.Ve
.IP "\fIget_encoding()\fR" 4
.IX Item "get_encoding()"
.Vb 6
\& Type    : Accessor
\& Title   : get_encoding
\& Usage   : $doc\->get_encoding()
\& Function: Get encoding for document
\& Returns : Encoding descriptor as string
\& Args    : none
.Ve
.IP "\fIset_root()\fR" 4
.IX Item "set_root()"
.Vb 6
\& Type    : Mutator
\& Title   : set_root
\& Usage   : $doc\->set_root($elt)
\& Function: Set the document\*(Aqs root element
\& Returns : True on success
\& Args    : Element object
.Ve
.IP "\fIget_root()\fR" 4
.IX Item "get_root()"
.Vb 6
\& Type    : Accessor
\& Title   : get_root
\& Usage   : $doc\->get_root()
\& Function: Get the document\*(Aqs root element
\& Returns : Element object or undef if DNE
\& Args    : none
.Ve
.SS "Document element accessors"
.IX Subsection "Document element accessors"
.IP "\fIget_element_by_id()\fR" 4
.IX Item "get_element_by_id()"
.Vb 6
\& Type    : Accessor
\& Title   : get_element_by_id
\& Usage   : $doc\->get_element_by_id($id)
\& Function: Get element having id $id
\& Returns : Element object or undef if DNE
\& Args    : id designator as string
.Ve
.IP "\fIget_elements_by_tagname()\fR" 4
.IX Item "get_elements_by_tagname()"
.Vb 6
\& Type    : Accessor
\& Title   : get_elements_by_tagname
\& Usage   : $elt\->get_elements_by_tagname($tagname)
\& Function: Get array of elements having given tag name 
\& Returns : Array of elements or undef if no match
\& Args    : tag name as string
.Ve
.SS "Output methods"
.IX Subsection "Output methods"
.IP "\fIto_xml()\fR" 4
.IX Item "to_xml()"
.Vb 6
\& Type    : Serializer
\& Title   : to_xml
\& Usage   : $doc\->to_xml
\& Function: Create XML string from document
\& Returns : XML string
\& Args    : Formatting arguments as allowed by underlying package
.Ve
.SH "CITATION"
.IX Header "CITATION"
If you use Bio::Phylo in published research, please cite it:
.PP
\&\fBRutger A Vos\fR, \fBJason Caravas\fR, \fBKlaas Hartmann\fR, \fBMark A Jensen\fR
and \fBChase Miller\fR, 2011. Bio::Phylo \- phyloinformatic analysis using Perl.
\&\fI\s-1BMC\s0 Bioinformatics\fR \fB12\fR:63.
<http://dx.doi.org/10.1186/1471\-2105\-12\-63>
