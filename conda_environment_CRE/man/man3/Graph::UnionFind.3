.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Graph::UnionFind 3"
.TH Graph::UnionFind 3 "2014-03-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Graph::UnionFind \- union\-find data structures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Graph::UnionFind;
\&    my $uf = Graph::UnionFind\->new;
\&
\&    # Add the vertices to the data structure.
\&    $uf\->add($u);
\&    $uf\->add($v);
\&
\&    # Join the partitions of the vertices.
\&    $uf\->union( $u, $v );
\&
\&    # Find the partitions the vertices belong to
\&    # in the union\-find data structure.  If they
\&    # are equal, they are in the same partition.
\&    # If the vertex has not been seen,
\&    # undef is returned.
\&    my $pu = $uf\->find( $u );
\&    my $pv = $uf\->find( $v );
\&    $uf\->same($u, $v) # Equal to $pu eq $pv. 
\&
\&    # Has the union\-find seen this vertex?
\&    $uf\->has( $v )
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIUnion-find\fR is a special data structure that can be used to track the
partitioning of a set into subsets (a problem known also as \fIdisjoint sets\fR).
.PP
\&\fIGraph::UnionFind()\fR is used for \fIGraph::connected_components()\fR,
\&\fIGraph::connected_component()\fR, and \fIGraph::same_connected_components()\fR
if you specify a true \f(CW\*(C`union_find\*(C'\fR parameter when you create an undirected
graph.
.PP
Note that union-find is one way: you cannot (easily) 'ununion'
vertices once you have 'unioned' them.  This means that if you
delete edges from a \f(CW\*(C`union_find\*(C'\fR graph, you will get wrong results
from the \fIGraph::connected_components()\fR, \fIGraph::connected_component()\fR,
and \fIGraph::same_connected_components()\fR.
.SS "\s-1API\s0"
.IX Subsection "API"
.IP "add" 4
.IX Item "add"
.Vb 1
\&    $uf\->add($v)
.Ve
.Sp
Add the vertex v to the union-find.
.IP "union" 4
.IX Item "union"
.Vb 1
\&    $uf\->union($u, $v)
.Ve
.Sp
Add the edge u\-v to the union-find.  Also implicitly adds the vertices.
.IP "has" 4
.IX Item "has"
.Vb 1
\&    $uf\->has($v)
.Ve
.Sp
Return true if the vertex v has been added to the union-find, false otherwise.
.IP "find" 4
.IX Item "find"
.Vb 1
\&    $uf\->find($v)
.Ve
.Sp
Return the union-find partition the vertex v belongs to,
or \f(CW\*(C`undef\*(C'\fR if it has not been added.
.IP "new" 4
.IX Item "new"
.Vb 1
\&    $uf = Graph::UnionFind\->new()
.Ve
.Sp
The constructor.
.IP "same" 4
.IX Item "same"
.Vb 1
\&    $uf\->same($u, $v)
.Ve
.Sp
Return true of the vertices belong to the same union-find partition
the vertex v belongs to, false otherwise.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Jarkko Hietaniemi \fIjhi@iki.fi\fR
.SH "LICENSE"
.IX Header "LICENSE"
This module is licensed under the same terms as Perl itself.
