.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Alignment::MSAProbs 3"
.TH Bio::Tools::Run::Alignment::MSAProbs 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Alignment::MSAProbs \- Object for the calculation of a
multiple sequence alignment (MSA) from a set of unaligned sequences using 
the MSAProbs program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Build a msaprobs alignment factory
\&  $factory = Bio::Tools::Run::Alignment::MSAProbs\->new(@params);
\&
\&  # Pass the factory a list of sequences to be aligned.
\&  $inputfilename = \*(Aqt/cysprot.fa\*(Aq;
\&  # $aln is a SimpleAlign object.
\&  $aln = $factory\->align($inputfilename);
\&
\&  # or where @seq_array is an array of Bio::Seq objects
\&  $seq_array_ref = \e@seq_array;
\&  $aln = $factory\->align($seq_array_ref);
\&
\&  #There are various additional options and input formats available.
\&  #See the DESCRIPTION section that follows for additional details.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MSAProbs is Liu, Schmidt, and Maskell's (2010) alignment program using \s-1HMM\s0 
and partition function posterior probabilities.  For more a more in-depth 
description see the original publication:
.PP
.Vb 4
\&    Liu, Y., Schmidt, B., and Maskell, D. L. (2010) MSAProbs: multiple
\&    sequence alignment based on pair hidden Markov models and partition 
\&    function posterior probabilities. I<Bioinformatics> 26(16): 1958\-1964
\&    doi:10.1093/bioinformatics/btq338
\&    
\&                                \-OR\-
\&
\&    http://bioinformatics.oxfordjournals.org/content/26/16/1958.abstract
.Ve
.PP
You can download the source code from
http://sourceforge.net/projects/msaprobs/
.PP
It is recommended you use at least version 0.9; behaviour with earlier 
versions is questionable.
.SS "Helping the module find your executable"
.IX Subsection "Helping the module find your executable"
You will need to help MSAProbs to find the 'msaprobs' executable. This can 
be done in (at least) three ways:
.PP
.Vb 8
\&  1. Make sure the msaprobs executable is in your path (i.e. 
\&     \*(Aqwhich msaprobs\*(Aq returns a valid program)
\&  2. define an environmental variable MSAPROBSDIR which points to a 
\&     directory containing the \*(Aqmsaprobs\*(Aq app:
\&   In bash 
\&        export MSAPROBSDIR=/home/progs/msaprobs   or
\&   In csh/tcsh
\&        setenv MSAPROBSDIR /home/progs/msaprobs
\&
\&  3. include a definition of an environmental variable MSAPROBSDIR 
\&      in every script that will
\&     BEGIN {$ENV{MSAPROBSDIR} = \*(Aq/home/progs/msaprobs\*(Aq; }
\&     use Bio::Tools::Run::Alignment::MSAProbs;
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\& http://bugzilla.open\-bio.org/
.Ve
.SH "AUTHOR \- Jessen Bredeson"
.IX Header "AUTHOR - Jessen Bredeson"
Email jessenbredeson@berkeley.edu
.SH "CONTRIBUTIONS"
.IX Header "CONTRIBUTIONS"
This MSAProbs module was adapted from the Bio::Tools::Run::Alignment::Muscle 
module, written by Jason Stajich and almost all of the credit should be given
to him.
.PP
Email jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory\->program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   : exit if $prog\->version() < 0.9.4
\& Function: Determine the version number of the program
\& Example :
\& Returns : float or undef
\& Args    : none
.Ve
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $msaprobs = Bio::Tools::Run::Alignment::MSAProbs\->new();
\& Function: Constructor
\& Returns : Bio::Tools::Run::Alignment::MSAProbs
\& Args    : \-outfile => $outname
.Ve
.SS "run"
.IX Subsection "run"
.Vb 6
\& Title   : run
\& Usage   : my $output = $application\->run(\e@seqs);
\& Function: Generic run of an application
\& Returns : Bio::SimpleAlign object
\& Args    : Arrayref of Bio::PrimarySeqI objects or
\&           a filename to run on
.Ve
.SS "align"
.IX Subsection "align"
.Vb 10
\& Title   : align
\& Usage   :
\&        $inputfilename = \*(Aqt/data/cysprot.fa\*(Aq;
\&        $aln = $factory\->align($inputfilename);
\&or
\&        $seq_array_ref = \e@seq_array; 
\&        # @seq_array is array of Seq objs
\&        $aln = $factory\->align($seq_array_ref);
\& Function: Perform a multiple sequence alignment
\& Returns : Reference to a SimpleAlign object containing the
\&           sequence alignment.
\& Args    : Name of a file containing a set of unaligned fasta sequences
\&           or else an array of references to Bio::Seq objects.
\&
\& Throws an exception if argument is not either a string (eg a
\& filename) or a reference to an array of Bio::Seq objects.  If
\& argument is string, throws exception if file corresponding to string
\& name can not be found. If argument is Bio::Seq array, throws
\& exception if less than two sequence objects are in array.
.Ve
.SS "error_string"
.IX Subsection "error_string"
.Vb 5
\& Title   : error_string
\& Usage   : $obj\->error_string($newval)
\& Function: Where the output from the last analysus run is stored.
\& Returns : value of error_string
\& Args    : newvalue (optional)
.Ve
.SS "infile"
.IX Subsection "infile"
.Vb 6
\& Title   : infile
\& Usage   : $prog\->infile($filename)
\& Function: get/set the fasta (and only a fasta) file to run on
\&           or the array reference containing the Bio::SeqI objects
\& Returns : name of input sequence file or object array ref
\& Args    : name of input sequence file or object array ref
.Ve
.SS "outfile"
.IX Subsection "outfile"
.Vb 5
\& Title   : outfile
\& Usage   : $prog\->outfile($filename)
\& Function: get/set the file to save output to
\& Returns : outfile name if set
\& Args    : newvalue (optional)
.Ve
.SS "annot_file"
.IX Subsection "annot_file"
.Vb 5
\& Title   : annot_file
\& Usage   : $prog\->annot_file($filename)
\& Function: get/set the file name to write the MSA annotation to
\& Returns : filename or undef
\& Args    : filename (optional)
.Ve
.SS "num_threads"
.IX Subsection "num_threads"
.Vb 5
\& Title   : num_threads
\& Usage   : $prog\->num_threads($cores)
\& Function: get/set number of cores on your machine
\& Returns : integer
\& Args    : integer (optional; executable auto\-detects)
.Ve
.SS "consistency"
.IX Subsection "consistency"
.Vb 5
\& Title   : consistency
\& Usage   : $prog\->consistency($passes)
\& Function: get/set the number of consistency transformation passes
\& Returns : integer
\& Args    : integer 0..5, [default 2] (optional)
.Ve
.SS "iterations"
.IX Subsection "iterations"
.Vb 5
\& Title   : iterations
\& Usage   : $prog\->iterations($passes)
\& Function: get/set the number of iterative\-refinement passes
\& Returns : integer
\& Args    : integer 0..1000, [default 10] (optional)
.Ve
.SS "alignment_order"
.IX Subsection "alignment_order"
.Vb 6
\& Title   : alignment_order
\& Usage   : $prog\->alignment_order($bool)
\& Function: specify whether or not to output aligned sequences in
\&           alignment order, not input order
\& Returns : boolean
\& Args    : boolean [default: off] (optional)
.Ve
.SS "clustalw"
.IX Subsection "clustalw"
.Vb 6
\& Title   : clustalw
\& Usage   : $prog\->clustalw($bool)
\& Function: write output in clustalw format; makes no sense unless
\&           outfile() is also specified
\& Returns : boolean
\& Args    : boolean [default: off] (optional)
.Ve
.SH "Bio::Tools::Run::WrapperBase methods"
.IX Header "Bio::Tools::Run::WrapperBase methods"
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values  
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function: 
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $msaprobs\->outfile_name();
\& Function: Get the name of the output file from a run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : none
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $msaprobs\->cleanup();
\& Function: Will cleanup the tempdir directory
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
.SH "Private Methods"
.IX Header "Private Methods"
.SS "_run"
.IX Subsection "_run"
.Vb 8
\& Title   :  _run
\& Usage   :  Internal function, not to be called directly        
\& Function:  makes actual system call to msaprobs program
\& Example :
\& Returns : nothing; msaprobs output is written to a
\&           temporary file OR specified output file
\& Args    : Name of a file containing a set of unaligned fasta sequences
\&           and hash of parameters to be passed to msaprobs
.Ve
.SS "_setinput"
.IX Subsection "_setinput"
.Vb 6
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly        
\& Function:  Create input file for msaprobs program
\& Example :
\& Returns : name of file containing msaprobs data input AND
\& Args    : Arrayref of Seqs or input file name
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 7
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly        
\& Function:  Create parameter inputs for msaprobs program
\& Example :
\& Returns : parameter string to be passed to msaprobs
\&           during align
\& Args    : name of calling object
.Ve
.SS "aformat"
.IX Subsection "aformat"
.Vb 5
\& Title   : aformat
\& Usage   : my $alignmentformat = $self\->aformat();
\& Function: Get/Set alignment format
\& Returns : string
\& Args    : string
.Ve
