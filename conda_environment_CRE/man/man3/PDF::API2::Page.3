.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Page 3"
.TH PDF::API2::Page 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Page \- Methods to interact with individual pages
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$page = PDF::API2::Page\->new $pdf, $parent, $index" 4
.el .IP "\f(CW$page\fR = PDF::API2::Page\->new \f(CW$pdf\fR, \f(CW$parent\fR, \f(CW$index\fR" 4
.IX Item "$page = PDF::API2::Page->new $pdf, $parent, $index"
Returns a page object (called from \f(CW$pdf\fR\->page).
.ie n .IP "$page = PDF::API2::Page\->coerce $pdf, $pdfpage" 4
.el .IP "\f(CW$page\fR = PDF::API2::Page\->coerce \f(CW$pdf\fR, \f(CW$pdfpage\fR" 4
.IX Item "$page = PDF::API2::Page->coerce $pdf, $pdfpage"
Returns a page object converted from \f(CW$pdfpage\fR (called from \f(CW$pdf\fR\->openpage).
.ie n .IP "$page\->update" 4
.el .IP "\f(CW$page\fR\->update" 4
.IX Item "$page->update"
Marks a page to be updated (by \f(CW$pdf\fR\->update).
.ie n .IP "($llx, $lly, $urx, $ury) = $page\->\fImediabox()\fR" 4
.el .IP "($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$page\fR\->\fImediabox()\fR" 4
.IX Item "($llx, $lly, $urx, $ury) = $page->mediabox()"
.PD 0
.ie n .IP "$page\->mediabox($w, $h)" 4
.el .IP "\f(CW$page\fR\->mediabox($w, \f(CW$h\fR)" 4
.IX Item "$page->mediabox($w, $h)"
.ie n .IP "$page\->mediabox($llx, $lly, $urx, $ury)" 4
.el .IP "\f(CW$page\fR\->mediabox($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR)" 4
.IX Item "$page->mediabox($llx, $lly, $urx, $ury)"
.ie n .IP "$page\->mediabox($alias)" 4
.el .IP "\f(CW$page\fR\->mediabox($alias)" 4
.IX Item "$page->mediabox($alias)"
.PD
Get or set the mediabox.  This method supports the following aliases:
\&'4A0', '2A0', 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6',
\&'4B0', '2B0', 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6',
\&'\s-1LETTER\s0', '\s-1BROADSHEET\s0', '\s-1LEDGER\s0', '\s-1TABLOID\s0', '\s-1LEGAL\s0',
\&'\s-1EXECUTIVE\s0', and '36X36'.
.ie n .IP "($llx, $lly, $urx, $ury) = $page\->\fIcropbox()\fR" 4
.el .IP "($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$page\fR\->\fIcropbox()\fR" 4
.IX Item "($llx, $lly, $urx, $ury) = $page->cropbox()"
.PD 0
.ie n .IP "$page\->cropbox($w, $h)" 4
.el .IP "\f(CW$page\fR\->cropbox($w, \f(CW$h\fR)" 4
.IX Item "$page->cropbox($w, $h)"
.ie n .IP "$page\->cropbox($llx, $lly, $urx, $ury)" 4
.el .IP "\f(CW$page\fR\->cropbox($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR)" 4
.IX Item "$page->cropbox($llx, $lly, $urx, $ury)"
.ie n .IP "$page\->cropbox($alias)" 4
.el .IP "\f(CW$page\fR\->cropbox($alias)" 4
.IX Item "$page->cropbox($alias)"
.PD
Get or set the cropbox.  This method supports the same aliases as mediabox.
.Sp
The cropbox defaults to the mediabox.
.ie n .IP "($llx, $lly, $urx, $ury) = $page\->\fIbleedbox()\fR" 4
.el .IP "($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$page\fR\->\fIbleedbox()\fR" 4
.IX Item "($llx, $lly, $urx, $ury) = $page->bleedbox()"
.PD 0
.ie n .IP "$page\->bleedbox($w, $h)" 4
.el .IP "\f(CW$page\fR\->bleedbox($w, \f(CW$h\fR)" 4
.IX Item "$page->bleedbox($w, $h)"
.ie n .IP "$page\->bleedbox($llx, $lly, $urx, $ury)" 4
.el .IP "\f(CW$page\fR\->bleedbox($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR)" 4
.IX Item "$page->bleedbox($llx, $lly, $urx, $ury)"
.ie n .IP "$page\->bleedbox($alias)" 4
.el .IP "\f(CW$page\fR\->bleedbox($alias)" 4
.IX Item "$page->bleedbox($alias)"
.PD
Get or set the bleedbox.  This method supports the same aliases as mediabox.
.Sp
The bleedbox defaults to the cropbox.
.ie n .IP "($llx, $lly, $urx, $ury) = $page\->\fItrimbox()\fR" 4
.el .IP "($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$page\fR\->\fItrimbox()\fR" 4
.IX Item "($llx, $lly, $urx, $ury) = $page->trimbox()"
.PD 0
.ie n .IP "$page\->trimbox($w, $h)" 4
.el .IP "\f(CW$page\fR\->trimbox($w, \f(CW$h\fR)" 4
.IX Item "$page->trimbox($w, $h)"
.ie n .IP "$page\->trimbox($llx, $lly, $urx, $ury)" 4
.el .IP "\f(CW$page\fR\->trimbox($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR)" 4
.IX Item "$page->trimbox($llx, $lly, $urx, $ury)"
.PD
Get or set the trimbox.  This method supports the same aliases as mediabox.
.Sp
The trimbox defaults to the cropbox.
.ie n .IP "($llx, $lly, $urx, $ury) = $page\->\fIartbox()\fR" 4
.el .IP "($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR) = \f(CW$page\fR\->\fIartbox()\fR" 4
.IX Item "($llx, $lly, $urx, $ury) = $page->artbox()"
.PD 0
.ie n .IP "$page\->artbox($w, $h)" 4
.el .IP "\f(CW$page\fR\->artbox($w, \f(CW$h\fR)" 4
.IX Item "$page->artbox($w, $h)"
.ie n .IP "$page\->artbox($llx, $lly, $urx, $ury)" 4
.el .IP "\f(CW$page\fR\->artbox($llx, \f(CW$lly\fR, \f(CW$urx\fR, \f(CW$ury\fR)" 4
.IX Item "$page->artbox($llx, $lly, $urx, $ury)"
.ie n .IP "$page\->artbox($alias)" 4
.el .IP "\f(CW$page\fR\->artbox($alias)" 4
.IX Item "$page->artbox($alias)"
.PD
Get or set the artbox.  This method supports the same aliases as mediabox.
.Sp
The rtbox defaults to the cropbox.
.ie n .IP "$page\->rotate $deg" 4
.el .IP "\f(CW$page\fR\->rotate \f(CW$deg\fR" 4
.IX Item "$page->rotate $deg"
Rotates the page by the given degrees, which must be a multiple of 90.
.Sp
(This allows you to auto-rotate to landscape without changing the mediabox!)
.ie n .IP "$gfx = $page\->gfx $prepend" 4
.el .IP "\f(CW$gfx\fR = \f(CW$page\fR\->gfx \f(CW$prepend\fR" 4
.IX Item "$gfx = $page->gfx $prepend"
Returns a graphics content object. If \f(CW$prepend\fR is true the content
will be prepended to the page description.
.ie n .IP "$txt = $page\->text $prepend" 4
.el .IP "\f(CW$txt\fR = \f(CW$page\fR\->text \f(CW$prepend\fR" 4
.IX Item "$txt = $page->text $prepend"
Returns a text content object. If \f(CW$prepend\fR is true the content
will be prepended to the page description.
.ie n .IP "$ant = $page\->annotation" 4
.el .IP "\f(CW$ant\fR = \f(CW$page\fR\->annotation" 4
.IX Item "$ant = $page->annotation"
Returns a new annotation object.
.ie n .IP "$page\->resource $type, $key, $obj" 4
.el .IP "\f(CW$page\fR\->resource \f(CW$type\fR, \f(CW$key\fR, \f(CW$obj\fR" 4
.IX Item "$page->resource $type, $key, $obj"
Adds a resource to the page-inheritance tree.
.Sp
\&\fBExample:\fR
.Sp
.Vb 4
\&    $co\->resource(\*(AqFont\*(Aq,$fontkey,$fontobj);
\&    $co\->resource(\*(AqXObject\*(Aq,$imagekey,$imageobj);
\&    $co\->resource(\*(AqShading\*(Aq,$shadekey,$shadeobj);
\&    $co\->resource(\*(AqColorSpace\*(Aq,$spacekey,$speceobj);
.Ve
.Sp
\&\fBNote:\fR You only have to add the required resources, if
they are \s-1NOT\s0 handled by the *font*, *image*, *shade* or *space*
methods.
