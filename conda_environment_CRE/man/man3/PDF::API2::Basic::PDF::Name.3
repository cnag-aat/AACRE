.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PDF::API2::Basic::PDF::Name 3"
.TH PDF::API2::Basic::PDF::Name 3 "2019-08-09" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PDF::API2::Basic::PDF::Name \- Inherits from PDF::API2::Basic::PDF::String
and stores PDF names (things beginning with /)
.SH "METHODS"
.IX Header "METHODS"
.SS "PDF::API2::Basic::PDF::Name\->from_pdf($string)"
.IX Subsection "PDF::API2::Basic::PDF::Name->from_pdf($string)"
Creates a new string object (not a full object yet) from a given
string.  The string is parsed according to input criteria with
escaping working, particular to Names.
.ie n .SS "$n\->convert ($string, $pdf)"
.el .SS "\f(CW$n\fP\->convert ($string, \f(CW$pdf\fP)"
.IX Subsection "$n->convert ($string, $pdf)"
Converts a name into a string by removing the / and converting any hex
munging.
.ie n .SS "$s\->as_pdf ($pdf)"
.el .SS "\f(CW$s\fP\->as_pdf ($pdf)"
.IX Subsection "$s->as_pdf ($pdf)"
Returns a name formatted as \s-1PDF.\s0  \f(CW$pdf\fR is optional but should be the
\&\s-1PDF\s0 File object for which the name is intended if supplied.
.ie n .SS "PDF::API2::Basic::PDF::Name\->string_to_name ($string, $pdf)"
.el .SS "PDF::API2::Basic::PDF::Name\->string_to_name ($string, \f(CW$pdf\fP)"
.IX Subsection "PDF::API2::Basic::PDF::Name->string_to_name ($string, $pdf)"
Suitably encode the string \f(CW$string\fR for output in the File object \f(CW$pdf\fR
(the exact format may depend on the version of \f(CW$pdf\fR).
.ie n .SS "PDF::API2::Basic::PDF::Name\->name_to_string ($string, $pdf)"
.el .SS "PDF::API2::Basic::PDF::Name\->name_to_string ($string, \f(CW$pdf\fP)"
.IX Subsection "PDF::API2::Basic::PDF::Name->name_to_string ($string, $pdf)"
Suitably decode the string \f(CW$string\fR as read from the File object \f(CW$pdf\fR
(the exact decoding may depend on the version of \f(CW$pdf\fR).  Principally,
undo the hex encoding for \s-1PDF\s0 versions > 1.1.
