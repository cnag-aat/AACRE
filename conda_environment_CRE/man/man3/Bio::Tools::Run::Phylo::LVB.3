.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::LVB 3"
.TH Bio::Tools::Run::Phylo::LVB 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::LVB \- Object for using the LVB program to create
an array of Bio::Tree objects from a nucleotide multiple alignment
file or a nucleotide SimpleAlign object. Works with LVB version 2.1.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::Run::Phylo::LVB;
\&
\&  # Create a SimpleAlign object.
\&  # NOTE. Aligning nucleotide sequence directly, as below, makes
\&  # sense for non\-coding nucleotide sequence (e.g., structural RNA
\&  # genes, introns, ITS). For protein\-coding genes, to prevent
\&  # Clustal intronducing frameshifts one should instead align the
\&  # translations of the genes, then convert the multiple alignment
\&  # to nucleotide by referring to the corresponding transcript
\&  # sequences (e.g., using EMBOSS tranalign).
\&  use Bio::Tools::Run::Alignment::Clustalw;
\&  $aln_factory = Bio::Tools::Run::Alignment::Clustalw\->new(quiet => 1);
\&  $inputfilename = "/Users/daniel/nuc.fa";
\&  $aln = $aln_factory\->align($inputfilename);
\&
\&  # Create the tree or trees.
\&  $tree_factory = Bio::Tools::Run::Phylo::LVB\->new(quiet => 1);
\&  @trees = $tree_factory\->run($aln);
\&
\&  # Or one can pass in a file name containing a nucleotide multiple
\&  # alignment in Phylip 3.6 format:
\&  $tree_factory = Bio::Tools::Run::Phylo::LVB\->new(quiet => 1);
\&  $tree = $tree_factory\->run("/Users/daniel/nuc.phy");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Wrapper for \s-1LVB,\s0 which uses a simulated annealing heuristic search
to seek parsimonious trees from a nucleotide multiple alignment.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "PARAMETERS FOR LVB COMPUTATION"
.IX Header "PARAMETERS FOR LVB COMPUTATION"
.SS "\s-1FORMAT\s0"
.IX Subsection "FORMAT"
.Vb 9
\&  Title       : FORMAT
\&  Description : (optional)
\&                When running LVB from a Phylip 3.6\-format
\&                multiple alignment file, this specifies
\&                the layout of the file. It may be
\&                "interleaved" or "sequential". FORMAT is
\&                automatically set to "interleaved" if
\&                running from a SimpleAlign object.
\&                Defaults to "interleaved".
.Ve
.SS "\s-1GAPS\s0"
.IX Subsection "GAPS"
.Vb 12
\&  Title       : GAPS
\&  Description : (optional)
\&                LVB can treat gaps represented in the
\&                multiple alignment by "\-" as either
\&                "fifthstate" or "unknown". "fifthstate"
\&                regards "\-" as equivalent to "O", which
\&                is an unambiguous character state
\&                distinct from all nucleotides. "unknown"
\&                regards "\-" as equivalent to "?", which
\&                is as an ambiguous site that may contain
\&                "A" or "C" or "G" or "T" or "O".
\&                Defaults to "unknown".
.Ve
.SS "\s-1SEED\s0"
.IX Subsection "SEED"
.Vb 8
\&  Title       : SEED
\&  Description : (optional)
\&                This specifies the random number seed
\&                for LVB. SEED must be an integer in the
\&                range 0 to 900000000 inclusive. If no
\&                seed is specified, LVB takes a seed from
\&                the system clock. By default, no seed is
\&                specified.
.Ve
.SS "\s-1DURATION\s0"
.IX Subsection "DURATION"
.Vb 7
\&  Title       : DURATION
\&  Description : (optional)
\&                This specifies the duration of the
\&                analysis, which may be "fast" or "slow".
\&                "slow" causes LVB to perform a more
\&                thorough and more time\-consuming search
\&                than "fast". Defaults to "slow".
.Ve
.SS "\s-1BOOTSTRAPS\s0"
.IX Subsection "BOOTSTRAPS"
.Vb 6
\&  Title       : BOOTSTRAPS
\&  Description : (optional)
\&                This specifies the number of bootstrap
\&                replicates to use, which must be a
\&                positive integer. Set bootstraps to 0 for
\&                no bootstrapping. Defaults to 0.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Barker
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Email jason\-AT\-bioperl_DOT_org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : \->program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 4
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns undef
\& Args    :
.Ve
.SS "run"
.IX Subsection "run"
.Vb 12
\& Title   : run 
\& Usage   :
\&        $inputfilename = \*(Aq/Users/daniel/nuc.phy\*(Aq;
\&        @trees = $factory\->run($inputfilename);
\& Function: Create one or more LVB trees from a SimpleAlign
\&           object or a file containing a Phylip 3.6\-format
\&           nucleotide multiple alignment.
\& Example :
\& Returns : Array of L<Bio::Tree> objects
\& Args    : Name of a file containing a nucleotide multiple
\&           alignment in Phylip 3.6 format, or a SimpleAlign
\&           object
.Ve
.SS "create_tree"
.IX Subsection "create_tree"
.Vb 12
\& Title   : create_tree
\& Usage   :
\&        $inputfilename = \*(Aq/Users/daniel/nuc.phy\*(Aq;
\&        @trees = $factory\->create_tree($inputfilename);
\& Function: Create one or more LVB trees from a SimpleAlign
\&           object or a file containing a Phylip 3.6\-format
\&           nucleotide multiple alignment.
\& Example :
\& Returns : Array of L<Bio::Tree> objects
\& Args    : Name of a file containing a nucleotide multiple 
\&           alignment in Phylip 3.6 format, or a SimpleAlign
\&           object
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 8
\& Title   : _run
\& Usage   : Internal function, not to be called directly 
\& Function:  makes actual system call to lvb program
\& Example :
\& Returns : Array of Bio::Tree objects
\& Args    : Name of a file containing a multiple alignment
\&           in Phylip 3.6 format and a parameter string to be
\&           passed to LVB
.Ve
.SS "_setinput"
.IX Subsection "_setinput"
.Vb 7
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create input file for lvb program
\& Example :
\& Returns : name of file containing a multiple alignment in
\&           Phylip 3.6 format 
\& Args    : SimpleAlign object reference or input file name
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 6
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create parameter inputs for lvb program
\& Example :
\& Returns : parameter string to be passed to LVB
\& Args    : name of calling object
.Ve
