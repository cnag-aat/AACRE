.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Alignment::StandAloneFasta 3"
.TH Bio::Tools::Run::Alignment::StandAloneFasta 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Alignment::StandAloneFasta \- Object for the local
execution of the Fasta3 programs ((t)fasta3, (t)fastx3, (t)fasty3
ssearch3)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  #!/usr/bin/perl
\&  use Bio::Tools::Run::Alignment::StandAloneFasta;
\&  use Bio::SeqIO;
\&  use strict;
\&  my @arg=(
\&  \*(Aqb\*(Aq =>\*(Aq15\*(Aq,
\&  \*(AqO\*(Aq =>\*(Aqresultfile\*(Aq,
\&  \*(AqH\*(Aq=>\*(Aq\*(Aq,
\&  \*(Aqprogram\*(Aq=>\*(Aqfasta34\*(Aq
\&  );
\&
\&  my $factory=Bio::Tools::Run::Alignment::StandAloneFasta\->new(@arg);
\&  $factory\->ktup(1);
\&
\&  $factory\->library(\*(Aqp\*(Aq);
\&
\&  #print result file name
\&  print $factory\->O;
\&
\&
\&  my @fastreport=$factory\->run($ARGV[0]);
\&
\&  foreach  (@fastreport) {
\&        print "Parsed fasta report:\en";
\&    my $result = $_\->next_result;
\&    while( my $hit = $result\->next_hit()) {
\&       print "\ethit name: ", $hit\->name(), "\en";
\&         while( my $hsp = $hit\->next_hsp()) {
\&         print "E: ", $hsp\->evalue(), "frac_identical: ",
\&        $hsp\->frac_identical(), "\en";
\&         }
\&      }
\&    }
\&
\&   #pass in seq objects
\&   my $sio = Bio::SeqIO\->new(\-file=>$ARGV[0],\-format=>"fasta");
\&   my $seq = $sio\->next_seq;
\&   my @fastreport=$factory\->run($ARGV[0]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This wrapper works with version 3 of the \s-1FASTA\s0 program package (see
W. R. Pearson and D. J. Lipman (1988), \*(L"Improved Tools for Biological
Sequence Analysis\*(R", \s-1PNAS 85:2444\-2448\s0 (Pearson and Lipman, 1988);
W. R.  Pearson (1996) \*(L"Effective protein sequence comparison\*(R"
Meth. Enzymol.  266:227\-258 (Pearson, 1996); Pearson et. al. (1997)
Genomics 46:24\-36 (Zhang et al., 1997); Pearson, (1999) Meth. in
Molecular Biology 132:185\-219 (Pearson, 1999).  Version 3 of the \s-1FASTA\s0
packages contains many programs for searching \s-1DNA\s0 and protein
databases and one program (prss3) for evaluating statistical
significance from randomly shuffled sequences.
.PP
Fasta is available at ftp://ftp.virginia.edu/pub/fasta
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \-  Tiequan Zhang"
.IX Header "AUTHOR - Tiequan Zhang"
.Vb 2
\&       Adapted for bioperl by Shawn Hoon
\&       Enhanced by Jason Stajich
.Ve
.PP
Email tqzhang1973@yahoo.com
      shawnh@fugu\-sg.org
      jason\-at\-bioperl.org
.SH "Appendix"
.IX Header "Appendix"
The rest of the documendation details each of the object
methods. Internal methods are preceded with a underscore
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $factory\->program_name()
\& Function: holds the program name
\& Returns:  string     
\& Args    : None
.Ve
.SS "executable"
.IX Subsection "executable"
.Vb 6
\& Title   : executable
\& Usage   : my $exe = $blastfactory\->executable(\*(Aqblastall\*(Aq);
\& Function: Finds the full path to the \*(Aqcodeml\*(Aq executable
\& Returns : string representing the full path to the exe
\& Args    : [optional] name of executable to set path to 
\&           [optional] boolean flag whether or not warn when exe is not found
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : $factory\->program_dir(@params)
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "run"
.IX Subsection "run"
.Vb 1
\& Title   : run
\&
\& Usage   : my @fasta_object = $factory\->($input,$onefile);
\&           where $factory is the name of executable FASTA program;
\&           $input is file name containing the sequences in the format 
\&           of fasta  or Bio::Seq object or array of Bio::Seq object;
\&           $onefile is 0 if you want to save the outputs to different files 
\&           default: outputs are saved in one file
\&
\& Function: Attempts to run an executable FASTA program  
\&           and return array of  fasta objects containing the fasta report 
\& Returns : aray of fasta report object
\&           If the user specify the output file(s), 
\&           the raw fasta report will be saved
\& Args    : sequence object OR array reference of sequence objects
\&           filename of file containing fasta formatted sequences
.Ve
.SS "library"
.IX Subsection "library"
.Vb 10
\& Title   : library
\& Usage   : my $lb = $self\->library
\& Function: Fetch or set the name of the library to search against
\& Returns : The name of the library 
\& Args    : No argument if user wants to fetch the name of library file; 
\&           A letter or a string of letter preceded by %; 
\&           (e.g. P or %pn, the letter is  the character in the third field  
\&           of any line of fastlibs file  ) or the name of library file 
\&           (if environmental variable FASTLIBS is not set); 
\&            if user wants to set the name of library file to search against
.Ve
.SS "output"
.IX Subsection "output"
.Vb 6
\& Title   : output
\& Usage   : $obj\->output($newval)
\& Function: The output directory if we want to use this
\& Example : 
\& Returns : value of output (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "ktup"
.IX Subsection "ktup"
.Vb 7
\& Title   :  ktup
\& Usage   :  my $ktup = $self\->ktup 
\& Function:  Fetch or set the ktup value for executable FASTA programs
\& Example :
\& Returns :  The value of ktup  if defined, else undef is returned 
\& Args    :  No argument if user want to fetch ktup value; A integer value between 1\-6 if user want to set the
\&           ktup value
.Ve
.SS "_setinput"
.IX Subsection "_setinput"
.Vb 6
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly  
\& Function:   Create input file(s) for Blast executable
\& Example :
\& Returns : array of Bio::Seq object reference
\& Args    : Seq object reference or input file name
.Ve
.SS "_exist"
.IX Subsection "_exist"
.Vb 8
\& Title   : _exist
\& Usage   : Internal function, not to be called directly
\& Function: Determine whether a executable FASTA program can be found 
\&           Cf. the DESCRIPTION section of this POD for how to make sure
\&           for your FASTA installation to be found. This method checks for
\&           existence of the blastall executable in the path.
\& Returns : 1 if FASTA program found at expected location, 0 otherwise.
\& Args    :  none
.Ve
.SS "_setparams"
.IX Subsection "_setparams"
.Vb 5
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly  
\& Function:  Create parameter inputs for FASTA executable
\& Returns : part of parameter string to be passed to FASTA program
\& Args    : none
.Ve
