.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::Phylo::Phylip::SeqBoot 3"
.TH Bio::Tools::Run::Phylo::Phylip::SeqBoot 3 "2019-10-28" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::Phylo::Phylip::SeqBoot \- Wrapper for the phylip
program SeqBoot
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  #Create a SimpleAlign object
\&  @params = (\*(Aqktuple\*(Aq => 2, \*(Aqmatrix\*(Aq => \*(AqBLOSUM\*(Aq);
\&  $factory = Bio::Tools::Run::Alignment::Clustalw\->new(@params);
\&  $inputfilename = \*(Aqt/data/cysprot.fa\*(Aq;
\&  $aln = $factory\->align($inputfilename); # $aln is a SimpleAlign object.
\&
\&  # Use seqboot to generate bootstap alignments
\&  my @params = (\*(Aqdatatype\*(Aq=>\*(AqSEQUENCE\*(Aq,\*(Aqreplicates\*(Aq=>100);
\&  my $seq = Bio::Tools::Run::Phylo::Phylip::SeqBoot\->new(@params);
\&
\&  my $aln_ref = $seq\->run($aln);
\&
\&  my $aio = Bio::AlignIO\->new(\-file=>">alignment.bootstrap",\-format=>"phylip");
\&  foreach my $ai(@{$aln_ref}){
\&         $aio\->write_aln($ai);
\&  }
\&
\&  # To prevent PHYLIP from truncating sequence names:
\&  # Step 1. Shelf the original names:
\&  my ($aln_safe, $ref_name)=                  #  $aln_safe has serial names
\&             $aln\->set_displayname_safe();    #  $ref_name holds orginal names 
\&  # Step 2. Run PHYLIP programs:
\&  $aln_ref = $seq\->run($aln_safe);            #  Use $aln_safe instead of $aln
\&  # Step 3. Retrieve orgininal names
\&  $aio = Bio::AlignIO\->new(
\&             \-file=>">alignment.bootstrap",
\&             \-format=>"fasta");               #  FASTA output to view full names
\&  foreach my $ai(@{$aln_ref}){
\&         my $new_aln=$ai\->restore_displayname($ref_name); #  Restore names
\&         $aio\->write_aln($new_aln);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Wrapper for seqboot from the phylip package by Joseph Felsentein.
.PP
Taken from phylip doc...
.PP
\&\*(L"\s-1SEQBOOT\s0 is a general boostrapping tool.  It is intended to  allow  you  to
generate  multiple data sets that are resampled versions of the input data set.
\&\s-1SEQBOOT\s0  can  handle  molecular   sequences,   binary   characters, 
restriction sites, or gene frequencies.\*(R"
.PP
More documentation on using seqboot and setting parameters may be found
in the phylip package.
.PP
\&\s-1VERSION\s0 Support
This wrapper currently supports v3.5 of phylip. There is also support for v3.6 although
this is still experimental as v3.6 is still under alpha release and not all functionalities maybe supported.
.SH "PARAMETERS FOR SEQBOOT"
.IX Header "PARAMETERS FOR SEQBOOT"
.SS "\s-1MODEL\s0"
.IX Subsection "MODEL"
Title		: \s-1DATATYPE\s0
Description	: (optional)
.PP
.Vb 5
\&                  This program supports 3 different datatypes
\&                  SEQUENCE: Molecular Sequences
\&                  MORPH   : Discrete  Morphological  Characters
\&                  REST    : Restriction Sites
\&                  GENEFREQ: Gene  Frequencies
\&
\&             Defaults to SEQUENCE
.Ve
.SS "\s-1PERMUTE\s0"
.IX Subsection "PERMUTE"
Title: \s-1PERMUTE\s0
Description: (optional)
.PP
.Vb 1
\&             3 different resampling methods are available:
\&
\&             BOOTSTRAP : creating a new data set by sampling N
\&                         characters randomly with replacement The
\&                         resulting data set has the same size as the
\&                         original, but some characters have been left
\&                         out and others are duplicated
\&
\&             JACKKNIFE : Delete\-half\-jackknifing. It involves sampling
\&                         a random half of the characters, and
\&                         including them in the data but dropping the
\&                         others The resulting data sets are half the
\&                         size of the original, and no characters are
\&                         duplicated.
\&
\&             PERMUTE : Permuting species within characters. It
\&                       involves permuting the columns of the data
\&                       matrix separately.  This produces data matrices
\&                       that have the same number and kinds of
\&                       characters but no taxonomic structure.
\&
\&             Defaults to BOOTSTRAP
.Ve
.SS "\s-1REPLICATES\s0"
.IX Subsection "REPLICATES"
.Vb 2
\&  Title         : REPLICATES
\&  Description   : (optional)
\&
\&                This options allows the user to set the number of
\&                replicate data sets. Most statisticians would be
\&                happiest with 1000 to 10,000 replicates in a
\&                bootstrap, but 100 gives a good rough picture
\&
\&                Defaults to 100
.Ve
.SS "\s-1ALLELES\s0"
.IX Subsection "ALLELES"
Title		:  \s-1ALLELES\s0
Description : (optional)
.PP
.Vb 3
\&            This option is to be used with gene frequencies datatype
\&            option to specify that all alleles at each locus are in
\&            the input file.
\&
\&                  Defaults to NULL
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
Email shawnh@fugu\-sg.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : >program_name()
\& Function: holds the program name
\& Returns:  string
\& Args    : None
.Ve
.SS "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : \->program_dir()
\& Function: returns the program directory, obtained from ENV variable.
\& Returns:  string
\& Args    :
.Ve
.SS "idlength"
.IX Subsection "idlength"
.Vb 5
\& Title   : idlength 
\& Usage   : $obj\->idlength ($newval)
\& Function: 
\& Returns : value of idlength 
\& Args    : newvalue (optional)
.Ve
.SS "run"
.IX Subsection "run"
.Vb 8
\& Title   : run 
\& Usage   :
\&        $inputfilename = \*(Aqt/data/prot.phy\*(Aq;
\&        $matrix= $seqboot_factory\->run($inputfilename);
\&or
\&        $seq_array_ref = \e@seq_array; @seq_array is array of Seq objs
\&        $aln = $clustalw_factory\->align($seq_array_ref);
\&        $aln_ref = $SeqBootfactory\->run($aln);
\&
\& Function: Create bootstrap sets of alignments
\& Example :
\& Returns : an array ref of L<Bio::SimpleAlign>
\& Args    : Name of a file containing a multiple alignment in Phylip format
\&           or an SimpleAlign object 
\&
\& Throws an exception if argument is not either a string (eg a
\& filename) or a Bio::SimpleAlign object. If
\& argument is string, throws exception if file corresponding to string
\& name can not be found.
.Ve
.SS "_run"
.IX Subsection "_run"
.Vb 7
\& Title   :  _run
\& Usage   :  Internal function, not to be called directly        
\& Function:  makes actual system call to SeqBoot program
\& Example :
\& Returns : an array ref of <Bio::SimpleAlign> 
\& Args    : Name of a file containing a set of multiple alignments in Phylip format 
\&           and a parameter string to be passed to SeqBoot
.Ve
.SS "\fI_setinput()\fP"
.IX Subsection "_setinput()"
.Vb 6
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create input file for SeqBoot program
\& Example :
\& Returns : name of file containing a multiple alignment in Phylip format 
\& Args    : SimpleAlign object reference or input file name
.Ve
.SS "\fI_setparams()\fP"
.IX Subsection "_setparams()"
.Vb 6
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create parameter inputs for SeqBoot program
\& Example :
\& Returns : parameter string to be passed to SeqBoot
\& Args    : name of calling object
.Ve
.SH "Bio::Tools::Run::Wrapper methods"
.IX Header "Bio::Tools::Run::Wrapper methods"
.SS "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj\->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values  
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.SS "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj\->save_tempfiles($newval)
\& Function: 
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.SS "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $SeqBoot\->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.SS "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self\->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.SS "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $codeml\->cleanup();
\& Function: Will cleanup the tempdir directory after a SeqBoot run
\& Returns : none
\& Args    : none
.Ve
.SS "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj\->io($newval)
\& Function:  Gets a L<Bio::Root::IO> object
\& Returns : L<Bio::Root::IO>
\& Args    : none
.Ve
